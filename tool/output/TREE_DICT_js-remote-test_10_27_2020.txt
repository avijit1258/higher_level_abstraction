[{'key': 1856, 'parent': -1, 'tfidf_word': 'login read remove message section close symlink testset send device ', 'tfidf_method': 'SimpleSession check_args open_pseudo_terminal __init__ do_continue __init__ define_environment arguments_parse _get_breakpoint is_executable ', 'lda_word': ' resolve,build,info,create,execute,', 'lda_method': ' main,build,execute,create_testing_environment,exec_shell,', 'lsi_word': ' resolve,build,execute,create,read,', 'lsi_method': ' execute,build,main,resolve,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Create a device object for testing. Public method to restore the project files. Run IoT.js Join one or more path components intelligently. Resolve the given symbol. Remove the given file. Run IoT.js Save data to the member variable. Public method to build the module by the given build_info object. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Run the command defined in the build.config file. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Build jerry or iotjs for the given device, both release and debug. Execute the given command. Test whether a path exists. Read all the tests into dictionary. Read JSON file. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Create the Docker container where we will run the builds. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given command in Docker. Reset the device to create clean environment. Read all the tests from the given folder and create a. Read all the names of the object files that are. Create a final JSON result file from the build and test information. Read JSON based configuration file. Copy the created files (libs, linker.map, ...) into the build folder. Write a JSON file from the given data. Execute all the init commands that the modules define. Print a message with the given color.', 'files_count': 30, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'testrunner.py', 'artik053.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py', 'serialcom.py', 'device_base.py', 'serial_device.py', 'testresult.py', 'rpi2.py', 'rpi3.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py', 'travis_script.py', 'telnetcom.py', 'sshcom.py', 'skiplist.py', 'reporter.py', 'tester.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py', 'symbol_resolver.py'], 'execution_path_count': 929, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '243': 'run(testrunner.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)', '184': 'login(artik053.py)', '223': 'login(serial_device.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '255': 'execute(tester.py)', '140': 'merge_dicts(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '153': 'symlink(utils.py)', '171': 'fetch_modules(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '79': 'save_artifacts(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '101': 'mount_fs_writable(builtins.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '69': 'namespace_as_dict(__init__.py)'}}, {'key': 1853, 'parent': 1856, 'tfidf_word': 'create message symlink close testset environment send read section device ', 'tfidf_method': 'JerryDebugger JerryBreakpoint DebuggerPrompt recursive_check read_until readline report_configuration parse_option run_jerry set_prompt ', 'lda_word': ' execute,exec,run,coverage,shell,', 'lda_method': ' execute,print_command,exec_shell,abspath,relpath,', 'lsi_word': ' execute,exec,command,shell,print,', 'lsi_method': ' execute,exec_shell,print_command,fail,init,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br> &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Create a device object for testing. Public method to restore the project files. Remove the given file. Run IoT.js Save data to the member variable. Public method to build the module by the given build_info object. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Run the command defined in the build.config file. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Build jerry or iotjs for the given device, both release and debug. Execute the given command. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given command in Docker. Read JSON based configuration file. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Execute all the init commands that the modules define. Print a message with the given color.', 'files_count': 29, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'testrunner.py', 'artik053.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py', 'serialcom.py', 'device_base.py', 'serial_device.py', 'testresult.py', 'rpi2.py', 'rpi3.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py', 'travis_script.py', 'telnetcom.py', 'sshcom.py', 'skiplist.py', 'reporter.py', 'tester.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 512, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '243': 'run(testrunner.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)', '184': 'login(artik053.py)', '223': 'login(serial_device.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '255': 'execute(tester.py)', '140': 'merge_dicts(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '153': 'symlink(utils.py)', '171': 'fetch_modules(__init__.py)'}}, {'key': 1855, 'parent': 1856, 'tfidf_word': 'hoist date entry dict info namespace objdict encode read section ', 'tfidf_method': 'try_match_section try_match_fill append info hoist_section get_memory_map_lines try_match_entry ObjectDict encode_as_objdict namespace_as_dict ', 'lda_word': ' resolve,execute,build,command,module,', 'lda_method': ' main,create_testing_environment,build,execute,create_build_info,', 'lsi_word': ' resolve,build,create,execute,symbol,', 'lsi_method': ' build,execute,resolve_string,resolve_symbol,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given command. Read all the names of the object files that are. Return a relative filepath to path from the start directory. Read JSON file. Write binary size and commit information into a file. Print a message with the given color. Read JSON based configuration file. Return the base name of pathname path. Execute the given test. Copy the created files (libs, linker.map, ...) into the build folder. Run the command defined in the build.config file. Write a JSON file from the given data. Checks that the given path is exist. Execute all the init commands that the modules define. Public method to build the module by the given build_info object. Execute the built-in command.', 'files_count': 15, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py', 'lumpy.py', 'testresult.py', 'artik053.py'], 'execution_path_count': 417, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '77': 'build_modules(builder.py)', '129': 'exec_builtin(utils.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '138': 'last_commit_info(utils.py)', '79': 'save_artifacts(builder.py)', '137': 'join(utils.py)', '82': 'read_modules(builder.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '83': 'should_build(builder.py)', '87': 'load_map_data(lumpy.py)', '155': 'write_json_file(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '126': 'current_date(utils.py)', '106': 'info(console.py)', '101': 'mount_fs_writable(builtins.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '69': 'namespace_as_dict(__init__.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '174': 'patch_modules(__init__.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)'}}, {'key': 1849, 'parent': 1853, 'tfidf_word': 'init close read environment testset send section remove patch device ', 'tfidf_method': 'is_executable parse_arguments execute report_final report_pass report_skip report_timeout _skip_iotjs_test Multimap report_testset ', 'lda_word': ' open,exec,command,execute,read,', 'lda_method': ' execute,main,close,logout,process_messages,', 'lsi_word': ' execute,exec,command,read,init,', 'lsi_method': ' execute,init,fail,exec_command,open,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br> &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Create a device object for testing. Remove the given file. Run IoT.js Save data to the member variable. Public method to build the module by the given build_info object. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Check whether the file is executable. Run the command defined in the build.config file. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Build jerry or iotjs for the given device, both release and debug. Execute the given command. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given command in Docker. Read JSON based configuration file. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Execute all the init commands that the modules define. Print a message with the given color.', 'files_count': 29, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'testrunner.py', 'artik053.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py', 'serialcom.py', 'device_base.py', 'serial_device.py', 'testresult.py', 'rpi2.py', 'rpi3.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py', 'travis_script.py', 'telnetcom.py', 'sshcom.py', 'skiplist.py', 'reporter.py', 'tester.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 317, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '243': 'run(testrunner.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)', '184': 'login(artik053.py)', '223': 'login(serial_device.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '255': 'execute(tester.py)', '140': 'merge_dicts(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1852, 'parent': 1853, 'tfidf_word': 'internet freya genromfs rmtree break file patch builtin remove symlink ', 'tfidf_method': 'symlink mkdir __init__ genromfs config_internet init_freya_config is_broken_symlink rmtree remove_file exec_builtin ', 'lda_word': ' patch,module,finalize,main,execute,', 'lda_method': ' init,initialize,execute,patch_modules,exec_shell,', 'lsi_word': ' execute,exec,shell,command,print,', 'lsi_method': ' execute,exec_shell,print_command,run_coverage_script,init,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Restore the modified project files. Run the command defined in the build.config file. Create a romfs_img from the source directory that is. Checks that the given path is exist. Remove the given file. Execute the given test.', 'files_count': 12, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py', 'artik053.py', 'ssh_device.py', 'builtins.py', 'flasher.py', 'stm32f4dis.py', '__main__.py', '__init__.py', 'builder.py'], 'execution_path_count': 195, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '140': 'merge_dicts(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '99': 'get(builtins.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '141': 'mkdir(utils.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '185': 'reset(artik053.py)', '74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '129': 'exec_builtin(utils.py)'}}, {'key': 1844, 'parent': 1855, 'tfidf_word': 'append current line date entry fill hoist memory read section ', 'tfidf_method': 'read_json_file append try_match_entry try_match_fill try_match_section try_match_symbol current_date info hoist_section get_memory_map_lines ', 'lda_word': ' resolve,build,section,read,calculate,', 'lda_method': ' resolve,resolve_string,resolve_symbol,create_build_info,build,', 'lsi_word': ' resolve,build,create,symbol,string,', 'lsi_method': ' resolve,resolve_symbol,resolve_string,build,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the given command. Read JSON based configuration file. Return a relative filepath to path from the start directory. Read JSON file. Print a message with the given color. Write binary size and commit information into a file. Execute the given test. Return the base name of pathname path. Copy the created files (libs, linker.map, ...) into the build folder. Run the command defined in the build.config file. Helper function to print commands. Write a JSON file from the given data. Execute all the init commands that the modules define. Public method to build the module by the given build_info object. Execute the built-in command.', 'files_count': 14, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 174, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '77': 'build_modules(builder.py)', '129': 'exec_builtin(utils.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '138': 'last_commit_info(utils.py)', '79': 'save_artifacts(builder.py)', '137': 'join(utils.py)', '82': 'read_modules(builder.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '83': 'should_build(builder.py)', '87': 'load_map_data(lumpy.py)', '155': 'write_json_file(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '126': 'current_date(utils.py)', '106': 'info(console.py)'}}, {'key': 1854, 'parent': 1855, 'tfidf_word': 'entry line append fill hoist namespace resolve read info section ', 'tfidf_method': 'try_match_section try_match_fill info hoist_section get_memory_map_lines namespace_as_dict encode_as_objdict ObjectDict try_match_entry append ', 'lda_word': ' resolve,build,create,testing,main,', 'lda_method': ' get,execute,mount_fs_writable,build,resolve,', 'lsi_word': ' resolve,build,execute,get,create,', 'lsi_method': ' execute,get,mount_fs_writable,main,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given command. Read all the names of the object files that are. Return a relative filepath to path from the start directory. Read JSON file. Write binary size and commit information into a file. Read JSON based configuration file. Execute the given test. Return the base name of pathname path. Run the command defined in the build.config file. Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Execute all the init commands that the modules define. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 15, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'sshcom.py', 'serialcom.py', 'flasher.py', 'artik053.py', 'symbol_resolver.py'], 'execution_path_count': 243, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '106': 'info(console.py)', '126': 'current_date(utils.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '101': 'mount_fs_writable(builtins.py)', '78': 'init_modules(builder.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '69': 'namespace_as_dict(__init__.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '83': 'should_build(builder.py)', '169': 'flash(flasher.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '174': 'patch_modules(__init__.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)'}}, {'key': 1748, 'parent': 1849, 'tfidf_word': 'read genromfs freya flash calculate section info create build patch ', 'tfidf_method': 'init_modules init_freya_config run __init__ reset genromfs reset flash build_modules execute ', 'lda_word': ' execute,builtin,exec,fail,get,', 'lda_method': ' exec_builtin,execute,fail,get,main,', 'lsi_word': ' execute,get,exec,fail,builtin,', 'lsi_method': ' execute,fail,get,exec_builtin,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Public method to restore the project files. Load the resource infromation that all modules define. Execute the given test. Public method to initialize the project. Write binary size and commit information into a file. Reset the device to create clean environment. Restore the modified project files. Run the command defined in the build.config file. Configure all the required modules. Modify the source code of the required modules. Execute all the init commands that the modules define. Main method to run IoT.js or JerryScript tests. Public method to build the module by the given build_info object.', 'files_count': 11, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'testrunner.py', 'artik053.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '243': 'run(testrunner.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)'}}, {'key': 1848, 'parent': 1849, 'tfidf_word': 'close read testset get init send section environment remove device ', 'tfidf_method': 'report_pass parse_option report_skip report_testset read_until run_jerry report_timeout parse_arguments define_environment DebuggerPrompt ', 'lda_word': ' exist,file,upload,create,read,', 'lda_method': ' execute,exec_command,copy,exist,run_coverage_script,', 'lsi_word': ' command,read,exec,init,execute,', 'lsi_method': ' init,execute,open,exec_command,fail,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Build jerry or iotjs for the given device, both release and debug. Execute the given command. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given command in Docker. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['stm32f4dis.py', 'serialcom.py', 'utils.py', 'device_base.py', 'artik053.py', 'serial_device.py', 'flasher.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py', 'builtins.py', 'travis_script.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'skiplist.py', 'reporter.py', 'tester.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 297, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '223': 'login(serial_device.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '128': 'dirname(utils.py)', '266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '99': 'get(builtins.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '255': 'execute(tester.py)', '140': 'merge_dicts(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1845, 'parent': 1852, 'tfidf_word': 'basename command exist internet merge dicts genromfs freya dirname mkdir ', 'tfidf_method': 'reset run exists genromfs __init__ config_internet merge_dicts init_freya_config dirname mkdir ', 'lda_word': ' execute,exist,copy,command,run,', 'lda_method': ' execute,last_commit_info,run_coverage_script,exec_shell,print_command,', 'lsi_word': ' execute,exec,shell,command,print,', 'lsi_method': ' execute,exec_shell,print_command,run_coverage_script,last_commit_info,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Run the command defined in the build.config file. Helper function to print commands. Execute the given test.', 'files_count': 9, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py', 'artik053.py', 'ssh_device.py', 'builtins.py', 'flasher.py', 'stm32f4dis.py'], 'execution_path_count': 106, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '140': 'merge_dicts(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '99': 'get(builtins.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '141': 'mkdir(utils.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '185': 'reset(artik053.py)'}}, {'key': 1850, 'parent': 1852, 'tfidf_word': 'dicts basename log file break rmtree patch remove builtin symlink ', 'tfidf_method': 'log abspath basename merge_dicts mkdir dirname rmtree remove_file is_broken_symlink exec_builtin ', 'lda_word': ' module,config,execute,init,initialize,', 'lda_method': ' execute,exec_shell,print_command,init,initialize,', 'lsi_word': ' module,execute,patch,init,initialize,', 'lsi_method': ' execute,init,initialize,config_modules,exec_shell,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Restore the modified project files. Helper function to print commands. Checks that the given path is exist. Remove the given file. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'builder.py'], 'execution_path_count': 89, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '129': 'exec_builtin(utils.py)'}}, {'key': 1814, 'parent': 1844, 'tfidf_word': 'dirname log object last section commit size calculate libs info ', 'tfidf_method': 'mkdir relpath dirname basename abspath log create_build_info last_commit_info calculate_section_sizes read_objects_from_libs ', 'lda_word': ' resolve,build,symbol,config,string,', 'lda_method': ' create_build_info,create_testing_environment,main,execute,build,', 'lsi_word': ' resolve,execute,build,config,command,', 'lsi_method': ' resolve_symbol,resolve,resolve_string,build,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Write binary size and commit information into a file. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Public method to build the module by the given build_info object. Return the absolute path. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 60, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '77': 'build_modules(builder.py)', '129': 'exec_builtin(utils.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '138': 'last_commit_info(utils.py)'}}, {'key': 1834, 'parent': 1844, 'tfidf_word': 'hoist fill entry date memory current append line read section ', 'tfidf_method': 'read_json_file hoist_section append try_match_entry try_match_fill try_match_section try_match_symbol info get_memory_map_lines current_date ', 'lda_word': ' resolve,build,file,flash,config,', 'lda_method': ' resolve_string,resolve_symbol,resolve,build,create_testing_environment,', 'lsi_word': ' resolve,build,create,info,symbol,', 'lsi_method': ' resolve_symbol,resolve_string,resolve,build,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given command. Read JSON based configuration file. Return a relative filepath to path from the start directory. Read JSON file. Write binary size and commit information into a file. Execute the given test. Return the base name of pathname path. Copy the created files (libs, linker.map, ...) into the build folder. Helper function to print commands. Write a JSON file from the given data. Checks that the given path is exist. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 14, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'flasher.py', 'builtins.py', 'console.py', 'coverage_client.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 114, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '82': 'read_modules(builder.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '83': 'should_build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '155': 'write_json_file(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '126': 'current_date(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)'}}, {'key': 1841, 'parent': 1854, 'tfidf_word': 'fill date line entry objdict namespace encode file section read ', 'tfidf_method': 'try_match_symbol try_match_section try_match_fill append namespace_as_dict hoist_section get_memory_map_lines ObjectDict try_match_entry current_date ', 'lda_word': ' create,main,testing,environment,join,', 'lda_method': ' merge_dicts,read_objects_from_libs,calculate_section_sizes,create_build_info,execute,', 'lsi_word': ' build,create,main,testing,environment,', 'lsi_method': ' main,create_testing_environment,build,execute,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given command. Read all the names of the object files that are. Return a relative filepath to path from the start directory. Read JSON based configuration file. Write binary size and commit information into a file. Read JSON file. Run the command defined in the build.config file. Write a JSON file from the given data. Execute all the init commands that the modules define. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 12, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'sshcom.py', 'serialcom.py'], 'execution_path_count': 89, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '106': 'info(console.py)', '126': 'current_date(utils.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '101': 'mount_fs_writable(builtins.py)', '78': 'init_modules(builder.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '69': 'namespace_as_dict(__init__.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '83': 'should_build(builder.py)'}}, {'key': 1851, 'parent': 1854, 'tfidf_word': 'dicts log relpath dirname login upload build read resolve join ', 'tfidf_method': 'log mkdir merge_dicts basename dirname relpath upload execute login join ', 'lda_word': ' get,initialize,init,execute,mount,', 'lda_method': ' execute,get,mount_fs_writable,exec_shell,main,', 'lsi_word': ' resolve,get,build,execute,writable,', 'lsi_method': ' get,execute,mount_fs_writable,exec_shell,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given test. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 11, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'testresult.py', 'artik053.py', 'console.py', 'coverage_client.py', '__main__.py', '__init__.py', 'builder.py', 'symbol_resolver.py'], 'execution_path_count': 154, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '174': 'patch_modules(__init__.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '145': 'read_config_file(utils.py)', '77': 'build_modules(builder.py)', '137': 'join(utils.py)'}}, {'key': 1510, 'parent': 1748, 'tfidf_word': 'init calculate libs commit object read section size last info ', 'tfidf_method': 'main build get execute_config_command create_build_info last_commit_info build_modules init_modules calculate_section_sizes read_objects_from_libs ', 'lda_word': ' execute,init,command,config,module,', 'lda_method': ' fail,main,execute,build,execute_config_command,', 'lsi_word': ' build,create,execute,environment,main,', 'lsi_method': ' main,execute,fail,get,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Write binary size and commit information into a file. Run the command defined in the build.config file. Execute all the init commands that the modules define. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)'}}, {'key': 1664, 'parent': 1748, 'tfidf_word': 'main reset restore finalize flash freya internet command genromfs patch ', 'tfidf_method': 'genromfs reset flash execute reset __init__ run execute_config_command config_internet init_freya_config ', 'lda_word': ' execute,fail,exec,get,builtin,', 'lda_method': ' execute,get,fail,exec_builtin,execute_config_command,', 'lsi_word': ' execute,get,exec,fail,builtin,', 'lsi_method': ' execute,exec_builtin,fail,get,run_coverage_script,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Public method to restore the project files. Execute the given test. Public method to initialize the project. Restore the modified project files. Run the command defined in the build.config file. Replace the Internet related symbols to concrete values in the NuttX config file. Create a romfs_img from the source directory that is. Configure all the required modules. Modify the source code of the required modules. Main method to run IoT.js or JerryScript tests. Reset the device to create clean environment.', 'files_count': 11, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py', '__main__.py', '__init__.py', 'builder.py'], 'execution_path_count': 16, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)'}}, {'key': 1783, 'parent': 1848, 'tfidf_word': 'map flash environment data testing testsets config file read init ', 'tfidf_method': '__init__ flash read_testsets run run read_config_file __init__ create_testing_environment main __init__ ', 'lda_word': ' file,read,command,exception,exec,', 'lda_method': ' exec_command,timeoutexception,open,login,execute,', 'lsi_word': ' command,exception,exec,timeout,open,', 'lsi_method': ' exec_command,timeoutexception,open,login,init,', 'spm_method': ' ', 'text_summary': 'Flash the device. Read JSON based configuration file. Read JSON file. Read all the tests into dictionary. Create a final JSON result file from the build and test information. Login to the device. Write a JSON file from the given data. Execute the given test.', 'files_count': 17, 'files': ['stm32f4dis.py', 'serialcom.py', 'utils.py', 'device_base.py', 'artik053.py', 'serial_device.py', 'flasher.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 23, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '223': 'login(serial_device.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 1847, 'parent': 1848, 'tfidf_word': 'close get testset read init send section environment remove device ', 'tfidf_method': '__init__ recursive_check parse_option report_skip report_testset check_args report_timeout parse_arguments report_pass run_jerry ', 'lda_word': ' init,read,run,fail,open,', 'lda_method': ' init,execute,main,run_coverage_script,copy,', 'lsi_word': ' read,init,execute,command,run,', 'lsi_method': ' init,fail,execute,open,main,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br> &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Build jerry or iotjs for the given device, both release and debug. Execute the given command. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given command in Docker. Read JSON based configuration file. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['testrunner.py', 'utils.py', 'artik053.py', 'ssh_device.py', 'builtins.py', 'travis_script.py', 'stm32f4dis.py', 'device_base.py', 'flasher.py', 'telnetcom.py', 'console.py', '__main__.py', '__init__.py', 'testresult.py', 'rpi2.py', 'rpi3.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py', 'sshcom.py', 'skiplist.py', 'serialcom.py', 'reporter.py', 'serial_device.py', 'tester.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 274, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '128': 'dirname(utils.py)', '266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '184': 'login(artik053.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '99': 'get(builtins.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '255': 'execute(tester.py)', '140': 'merge_dicts(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1805, 'parent': 1845, 'tfidf_word': 'relpath merge log abspath fail dirname dicts basename get exist ', 'tfidf_method': 'copy fail relpath exists dirname basename abspath log merge_dicts get ', 'lda_word': ' get,execute,last,run,shell,', 'lda_method': ' execute,last_commit_info,run_coverage_script,copy,exec_shell,', 'lsi_word': ' execute,last,info,commit,run,', 'lsi_method': ' execute,last_commit_info,run_coverage_script,exec_shell,print_command,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Helper function to print commands. Execute the given test.', 'files_count': 6, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 27, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '140': 'merge_dicts(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1837, 'parent': 1845, 'tfidf_word': 'genromfs freya exist merge dicts info last dirname mkdir commit ', 'tfidf_method': 'genromfs __init__ config_internet init_freya_config exists merge_dicts dirname mkdir last_commit_info run ', 'lda_word': ' execute,shell,exec,get,fail,', 'lda_method': ' execute,exec_shell,fail,get,print_command,', 'lsi_word': ' execute,exec,shell,command,print,', 'lsi_method': ' execute,exec_shell,print_command,reset,fail,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Run the command defined in the build.config file. Helper function to print commands. Return the absolute path. Execute the given test.', 'files_count': 9, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py', 'coverage_client.py', 'flasher.py', 'stm32f4dis.py'], 'execution_path_count': 79, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '140': 'merge_dicts(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '185': 'reset(artik053.py)'}}, {'key': 1838, 'parent': 1850, 'tfidf_word': 'abspath merge log dirname dicts break basename mkdir remove symlink ', 'tfidf_method': 'relpath merge_dicts is_broken_symlink dirname remove_file rmtree basename abspath log mkdir ', 'lda_word': ' restore,file,config,module,main,', 'lda_method': ' is_broken_symlink,remove,config_modules,finalize,main,', 'lsi_word': ' finalize,module,main,patch,execute,', 'lsi_method': ' finalize,main,execute,config_modules,restore_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Restore the modified project files. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Remove the given file.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 38, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1839, 'parent': 1850, 'tfidf_word': 'mkdir dirname abspath file break rmtree patch builtin remove symlink ', 'tfidf_method': 'mkdir dirname basename abspath log merge_dicts is_broken_symlink remove_file rmtree exec_builtin ', 'lda_word': ' initialize,init,module,config,remove,', 'lda_method': ' initialize,init,execute,exec_shell,patch_modules,', 'lsi_word': ' init,initialize,module,execute,patch,', 'lsi_method': ' init,initialize,execute,exec_shell,config_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Test whether a path exists. Return a relative filepath to path from the start directory. Restore the modified project files. Return the base name of pathname path. Modify the source code of the required modules. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Remove the given file. Execute the given test.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 51, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '171': 'fetch_modules(__init__.py)', '129': 'exec_builtin(utils.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)'}}, {'key': 1760, 'parent': 1814, 'tfidf_word': 'get dicts merge resolve basename mkdir log dirname relpath abspath ', 'tfidf_method': 'exists merge_dicts relpath dirname get basename abspath log mkdir get ', 'lda_word': ' resolve,execute,module,config,command,', 'lda_method': ' resolve_symbol,init_modules,resolve_string,execute_config_command,build,', 'lsi_word': ' resolve,execute,config,command,build,', 'lsi_method': ' build,init_modules,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 24, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1794, 'parent': 1814, 'tfidf_word': 'mkdir libs last init calculate commit dirname object abspath info ', 'tfidf_method': 'relpath mkdir basename abspath init_modules log calculate_section_sizes read_objects_from_libs dirname last_commit_info ', 'lda_word': ' resolve,build,execute,read,config,', 'lda_method': ' resolve,resolve_string,build_modules,create_testing_environment,execute,', 'lsi_word': ' resolve,build,execute,config,command,', 'lsi_method': ' resolve_symbol,resolve_string,resolve,build,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Return the sizes of the main sections. Return a relative filepath to path from the start directory. Write binary size and commit information into a file. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Public method to build the module by the given build_info object. Return the absolute path. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'flasher.py', 'coverage_client.py'], 'execution_path_count': 36, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '138': 'last_commit_info(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1819, 'parent': 1834, 'tfidf_word': 'memory line fill entry date current append hoist section read ', 'tfidf_method': 'get append get_memory_map_lines hoist_section current_date try_match_entry try_match_fill try_match_section try_match_symbol abspath ', 'lda_word': ' resolve,build,read,create,file,', 'lda_method': ' open,build,exec_command,timeoutexception,resolve,', 'lsi_word': ' resolve,build,create,symbol,string,', 'lsi_method': ' resolve_symbol,resolve,resolve_string,build,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Read JSON based configuration file. Read JSON file. Recursively replace the symbols in the given string. Copy the created files (libs, linker.map, ...) into the build folder. Write a JSON file from the given data. Checks that the given path is exist. Resolve the given symbol.', 'files_count': 14, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'flasher.py', 'builtins.py', 'console.py', 'coverage_client.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 42, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '82': 'read_modules(builder.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '83': 'should_build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '155': 'write_json_file(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '126': 'current_date(utils.py)'}}, {'key': 1824, 'parent': 1834, 'tfidf_word': 'data line hoist fill memory date current append entry section ', 'tfidf_method': 'open read_until get_memory_map_lines current_date try_match_entry try_match_fill try_match_section try_match_symbol append hoist_section ', 'lda_word': ' resolve,build,string,info,file,', 'lda_method': ' flash,read_config_file,resolve_symbol,resolve,resolve_string,', 'lsi_word': ' resolve,build,info,create,read,', 'lsi_method': ' resolve,resolve_string,resolve_symbol,build,create_build_info,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Write binary size and commit information into a file. Return the base name of pathname path. Helper function to print commands. Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 13, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'lumpy.py', 'testresult.py', 'builtins.py', 'coverage_client.py', '__main__.py', '__init__.py'], 'execution_path_count': 72, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '87': 'load_map_data(lumpy.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)', '123': 'abspath(utils.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)'}}, {'key': 1800, 'parent': 1841, 'tfidf_word': 'memory line hoist fill entry date current symbol append section ', 'tfidf_method': 'get current_date get_memory_map_lines hoist_section try_match_entry try_match_fill try_match_section try_match_symbol append info ', 'lda_word': ' info,build,create,environment,commit,', 'lda_method': ' main,create_build_info,build,calculate_section_sizes,create_testing_environment,', 'lsi_word': ' build,create,info,testing,environment,', 'lsi_method': ' build,create_testing_environment,main,create_build_info,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given command. Return a relative filepath to path from the start directory. Write binary size and commit information into a file. Return the base name of pathname path. Helper function to print commands. Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 12, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'sshcom.py', 'serialcom.py'], 'execution_path_count': 42, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '106': 'info(console.py)', '126': 'current_date(utils.py)'}}, {'key': 1821, 'parent': 1841, 'tfidf_word': 'join dict timeout namespace objdict object exception encode file read ', 'tfidf_method': 'join read_until open exec_command ObjectDict encode_as_objdict namespace_as_dict TimeoutException open open ', 'lda_word': ' build,testing,create,environment,main,', 'lda_method': ' main,create_testing_environment,build,execute_config_command,execute,', 'lsi_word': ' build,execute,create,main,environment,', 'lsi_method': ' create_testing_environment,main,build,execute,build_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Run the command defined in the build.config file. Public method to build the module by the given build_info object. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py'], 'execution_path_count': 47, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '101': 'mount_fs_writable(builtins.py)', '78': 'init_modules(builder.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '137': 'join(utils.py)', '69': 'namespace_as_dict(__init__.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '83': 'should_build(builder.py)'}}, {'key': 1828, 'parent': 1851, 'tfidf_word': 'get mkdir log fail dirname dicts relpath basename merge abspath ', 'tfidf_method': 'flash get abspath mkdir merge_dicts fail dirname basename log relpath ', 'lda_word': ' get,execute,environment,writable,mount,', 'lda_method': ' execute,get,mount_fs_writable,exec_shell,print_command,', 'lsi_word': ' get,execute,mount,writable,exec,', 'lsi_method': ' execute,get,mount_fs_writable,exec_shell,print_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Public method to initialize the project. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 10, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'testresult.py', 'artik053.py', 'console.py', 'coverage_client.py', '__main__.py', '__init__.py', 'builder.py'], 'execution_path_count': 70, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '174': 'patch_modules(__init__.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)'}}, {'key': 1831, 'parent': 1851, 'tfidf_word': 'abspath log merge mkdir dirname dicts relpath basename resolve join ', 'tfidf_method': 'fail abspath get mkdir log merge_dicts dirname basename relpath join ', 'lda_word': ' resolve,read,build,get,file,', 'lda_method': ' get,mount_fs_writable,execute,resolve_string,resolve,', 'lsi_word': ' resolve,build,read,get,mount,', 'lsi_method': ' get,execute,mount_fs_writable,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'symbol_resolver.py', 'flasher.py'], 'execution_path_count': 84, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '77': 'build_modules(builder.py)', '137': 'join(utils.py)'}}, {'key': 1275, 'parent': 1510, 'tfidf_word': 'environment exec fail get main module testing init build execute ', 'tfidf_method': 'fail exec_builtin execute execute_config_command create_testing_environment main build get build_modules init_modules ', 'lda_word': ' execute,create,config,build,builtin,', 'lda_method': ' execute_config_command,build,main,execute,create_testing_environment,', 'lsi_word': ' execute,build,module,exec,config,', 'lsi_method': ' execute,exec_builtin,execute_config_command,get,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Execute the given test. Run the command defined in the build.config file.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)'}}, {'key': 1358, 'parent': 1510, 'tfidf_word': 'calculate size last libs object read section create info build ', 'tfidf_method': 'exec_builtin execute create_testing_environment main build create_build_info get last_commit_info calculate_section_sizes read_objects_from_libs ', 'lda_word': ' create,execute,exec,testing,build,', 'lda_method': ' create_testing_environment,exec_builtin,main,create_build_info,last_commit_info,', 'lsi_word': ' build,create,info,builtin,fail,', 'lsi_method': ' build,execute,main,fail,exec_builtin,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)'}}, {'key': 1618, 'parent': 1664, 'tfidf_word': 'commit info last init reset flash genromfs command internet freya ', 'tfidf_method': 'config_internet run __init__ init_freya_config execute genromfs flash execute_config_command reset reset ', 'lda_word': ' exec,execute,builtin,fail,get,', 'lda_method': ' execute,fail,exec_builtin,get,run_coverage_script,', 'lsi_word': ' execute,get,exec,fail,builtin,', 'lsi_method': ' execute,fail,get,exec_builtin,run_coverage_script,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Run the command defined in the build.config file. Main method to run IoT.js or JerryScript tests. Reset the device to create clean environment. Execute the given test.', 'files_count': 8, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1625, 'parent': 1664, 'tfidf_word': 'get module config file finalize init initialize main restore patch ', 'tfidf_method': 'execute get patch restore_file config_modules finalize initialize patch_modules main __init__ ', 'lda_word': ' exec,builtin,execute,fail,patch,', 'lda_method': ' execute,get,exec_builtin,fail,restore_file,', 'lsi_word': ' patch,get,module,builtin,fail,', 'lsi_method': ' exec_builtin,get,execute,fail,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Restore the modified project files. Public method to restore the project files. Execute the built-in command. Modify the source code of the required modules.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'builder.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)'}}, {'key': 1654, 'parent': 1783, 'tfidf_word': 'command exception exec timeout execute build info iotjs login ', 'tfidf_method': 'TimeoutException exec_command execute login login execute iotjs_build_info ', 'lda_word': ' exec,exception,command,login,execute,', 'lda_method': ' timeoutexception,execute,exec_command,login,iotjs_build_info,', 'lsi_word': ' command,exception,exec,timeout,login,', 'lsi_method': ' exec_command,timeoutexception,login,execute,iotjs_build_info,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the given command. Get buildinfo from iotjs.', 'files_count': 6, 'files': ['stm32f4dis.py', 'serialcom.py', 'utils.py', 'device_base.py', 'artik053.py', 'serial_device.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '223': 'login(serial_device.py)'}}, {'key': 1675, 'parent': 1783, 'tfidf_word': 'data testing testsets config iotjs build file login read init ', 'tfidf_method': 'run read_testsets login execute flash __init__ load_map_data iotjs_build_info run __init__ ', 'lda_word': ' save,write,file,json,command,', 'lda_method': ' timeoutexception,open,exec_command,init,main,', 'lsi_word': ' command,timeout,exception,exec,open,', 'lsi_method': ' timeoutexception,open,exec_command,login,init,', 'spm_method': ' ', 'text_summary': 'Flash the device. Read JSON based configuration file. Execute the given command. Read JSON file. Read all the tests into dictionary. Create a final JSON result file from the build and test information. Login to the device. Write a JSON file from the given data. Execute the given test.', 'files_count': 17, 'files': ['flasher.py', 'utils.py', 'serialcom.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'device_base.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 18, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 1809, 'parent': 1847, 'tfidf_word': 'execute config dirname init commit freya genromfs info internet last ', 'tfidf_method': 'run_coverage_script dirname execute execute init_freya_config last_commit_info __init__ config_internet genromfs run ', 'lda_word': ' copy,execute,exist,script,init,', 'lda_method': ' execute,copy,dirname,genromfs,config_internet,', 'lsi_word': ' execute,copy,exist,run,script,', 'lsi_method': ' execute,copy,exist,run_coverage_script,mkdir,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Execute the given test.', 'files_count': 5, 'files': ['testrunner.py', 'utils.py', 'artik053.py', 'ssh_device.py', 'builtins.py'], 'execution_path_count': 21, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '128': 'dirname(utils.py)'}}, {'key': 1846, 'parent': 1847, 'tfidf_word': 'get testset exist read send init section environment remove device ', 'tfidf_method': 'DebuggerPrompt JerryBreakpoint JerryDebugger JerryFunction requestAvatar arguments_parse report_pass __init__ define_environment Multimap ', 'lda_word': ' command,exec,execute,login,build,', 'lda_method': ' open,run,fail,read_json_file,run_testset,', 'lsi_word': ' read,init,command,open,exec,', 'lsi_method': ' init,fail,open,main,login,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Build jerry or iotjs for the given device, both release and debug. Execute the given command. Return a relative filepath to path from the start directory. Test whether a path exists. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given command in Docker. Checking resources before testing. Read JSON based configuration file. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['travis_script.py', 'utils.py', 'artik053.py', 'stm32f4dis.py', 'device_base.py', 'flasher.py', 'telnetcom.py', 'console.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py', 'sshcom.py', 'skiplist.py', 'serialcom.py', 'reporter.py', 'builtins.py', 'serial_device.py', 'tester.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 253, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '99': 'get(builtins.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1670, 'parent': 1805, 'tfidf_word': 'relpath merge log abspath fail dirname dicts basename get exist ', 'tfidf_method': 'copy fail log abspath basename dirname exists merge_dicts relpath get ', 'lda_word': ' last,run,info,execute,commit,', 'lda_method': ' exec_shell,last_commit_info,run,execute,print_command,', 'lsi_word': ' run,last,info,commit,execute,', 'lsi_method': ' run,execute,last_commit_info,exec_shell,print_command,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Execute the given test.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '140': 'merge_dicts(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1761, 'parent': 1805, 'tfidf_word': 'relpath merge log abspath fail dirname dicts basename get exist ', 'tfidf_method': 'copy fail relpath exists dirname basename abspath log merge_dicts get ', 'lda_word': ' execute,script,coverage,run,info,', 'lda_method': ' execute,run_coverage_script,exec_shell,print_command,last_commit_info,', 'lsi_word': ' execute,commit,script,last,coverage,', 'lsi_method': ' execute,run_coverage_script,last_commit_info,exec_shell,print_command,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 18, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1826, 'parent': 1837, 'tfidf_word': 'internet genromfs freya log relpath basename abspath last commit info ', 'tfidf_method': '__init__ init_freya_config genromfs basename abspath get log relpath last_commit_info run ', 'lda_word': ' shell,execute,exec,command,print,', 'lda_method': ' exec_shell,execute,fail,print_command,run_coverage_script,', 'lsi_word': ' execute,shell,exec,print,command,', 'lsi_method': ' execute,exec_shell,print_command,run_coverage_script,get,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the given test. Return the absolute path.', 'files_count': 7, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py', 'coverage_client.py'], 'execution_path_count': 45, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 1835, 'parent': 1837, 'tfidf_word': 'exist command dicts merge log mkdir basename relpath dirname abspath ', 'tfidf_method': 'exists merge_dicts relpath get dirname basename abspath log mkdir get ', 'lda_word': ' execute,command,flash,config,merge,', 'lda_method': ' execute,exist,copy,reset,print_command,', 'lsi_word': ' execute,command,shell,exec,reset,', 'lsi_method': ' execute,reset,exec_shell,print_command,copy,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'stm32f4dis.py', 'artik053.py'], 'execution_path_count': 34, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '183': 'execute(artik053.py)', '185': 'reset(artik053.py)'}}, {'key': 1682, 'parent': 1838, 'tfidf_word': 'copy exist dicts relpath log merge mkdir basename dirname abspath ', 'tfidf_method': 'exists get get dirname relpath basename abspath log mkdir merge_dicts ', 'lda_word': ' patch,finalize,main,module,execute,', 'lda_method': ' finalize,patch,main,patch_modules,fail,', 'lsi_word': ' patch,module,finalize,main,execute,', 'lsi_method': ' finalize,patch_modules,main,patch,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1788, 'parent': 1838, 'tfidf_word': 'rmtree remove abspath merge log dirname dicts basename mkdir symlink ', 'tfidf_method': 'remove_file get is_broken_symlink relpath merge_dicts dirname basename abspath log mkdir ', 'lda_word': ' copy,execute,file,restore,config,', 'lda_method': ' finalize,restore_file,main,config_modules,execute,', 'lsi_word': ' finalize,module,main,config,file,', 'lsi_method': ' main,finalize,config_modules,restore_file,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Test whether a path exists. Return the base name of pathname path. Remove the resource file. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Remove the given file. Remove directory. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 23, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1789, 'parent': 1839, 'tfidf_word': 'relpath remove abspath merge log dirname dicts basename mkdir symlink ', 'tfidf_method': 'remove_file get is_broken_symlink relpath merge_dicts dirname basename abspath log mkdir ', 'lda_word': ' remove,init,module,initialize,config,', 'lda_method': ' initialize,init,config_modules,restore_file,execute,', 'lsi_word': ' module,config,init,initialize,file,', 'lsi_method': ' init,initialize,config_modules,restore_file,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Test whether a path exists. Return the base name of pathname path. Remove the resource file. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Create a symlink at dst pointing to src. Remove the given file. Remove directory. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 23, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1832, 'parent': 1839, 'tfidf_word': 'patch dicts relpath log merge mkdir basename dirname abspath builtin ', 'tfidf_method': 'get get dirname relpath basename abspath log mkdir merge_dicts exec_builtin ', 'lda_word': ' patch,initialize,module,init,execute,', 'lda_method': ' initialize,patch_modules,init,fail,get,', 'lsi_word': ' patch,initialize,init,module,execute,', 'lsi_method': ' initialize,init,execute,exec_shell,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Execute the given test. Execute the built-in command.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 28, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '140': 'merge_dicts(utils.py)', '64': 'get(coverage_client.py)', '134': 'exists(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)'}}, {'key': 1484, 'parent': 1760, 'tfidf_word': 'get exist dicts resolve mkdir dirname relpath basename log abspath ', 'tfidf_method': 'fail exists mkdir dirname relpath get basename abspath log get ', 'lda_word': ' resolve,execute,environment,command,symbol,', 'lda_method': ' merge_dicts,execute_config_command,resolve_symbol,execute,main,', 'lsi_word': ' resolve,execute,command,build,environment,', 'lsi_method': ' execute_config_command,build,create_testing_environment,main,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1485, 'parent': 1760, 'tfidf_word': 'get dicts merge resolve dirname log basename mkdir relpath abspath ', 'tfidf_method': 'fail exists mkdir dirname basename relpath abspath get log get ', 'lda_word': ' resolve,execute,config,command,symbol,', 'lda_method': ' exist,copy,mkdir,execute,read_config_file,', 'lsi_word': ' resolve,config,execute,command,build,', 'lsi_method': ' build,read_config_file,resolve_symbol,resolve,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Resolve the given symbol. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1613, 'parent': 1794, 'tfidf_word': 'commit object section size calculate config create read resolve info ', 'tfidf_method': 'read_config_file create_testing_environment main create_build_info flash last_commit_info read_objects_from_libs build_modules init_modules calculate_section_sizes ', 'lda_word': ' resolve,build,create,read,info,', 'lda_method': ' resolve,resolve_symbol,execute,exec_builtin,fail,', 'lsi_word': ' resolve,build,execute,create,symbol,', 'lsi_method': ' build,get,fail,resolve_symbol,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Read all the names of the object files that are. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Run the command defined in the build.config file. Resolve the given symbol. Execute all the init commands that the modules define. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'flasher.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '138': 'last_commit_info(utils.py)'}}, {'key': 1782, 'parent': 1794, 'tfidf_word': 'merge exist dicts resolve basename dirname mkdir log relpath abspath ', 'tfidf_method': 'get exists merge_dicts get relpath dirname basename abspath log mkdir ', 'lda_word': ' resolve,build,execute,config,string,', 'lda_method': ' exec_shell,execute,execute_config_command,resolve_symbol,build_modules,', 'lsi_word': ' resolve,build,execute,config,command,', 'lsi_method': ' resolve_symbol,build_modules,resolve,resolve_string,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 28, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1751, 'parent': 1819, 'tfidf_word': 'environment create exist flash dirname mkdir read config file resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol exists create_testing_environment main dirname mkdir read_config_file flash ', 'lda_word': ' resolve,dirname,config,flash,read,', 'lda_method': ' dirname,save_artifacts,build,copy,read_config_file,', 'lsi_word': ' resolve,build,save,copy,artifact,', 'lsi_method': ' build,save_artifacts,copy,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Copy the created files (libs, linker.map, ...) into the build folder. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'flasher.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1773, 'parent': 1819, 'tfidf_word': 'current abspath date dirname mkdir memory line hoist section read ', 'tfidf_method': 'get_memory_map_lines hoist_section append current_date try_match_entry try_match_fill try_match_section try_match_symbol abspath dirname ', 'lda_word': ' resolve,create,build,symbol,string,', 'lda_method': ' build,resolve_symbol,resolve,resolve_string,create_build_info,', 'lsi_word': ' resolve,build,create,symbol,string,', 'lsi_method': ' resolve,resolve_string,resolve_symbol,main,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Read JSON based configuration file. Recursively loop on the given node, and resolve all the. Read JSON file. Recursively replace the symbols in the given string. Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 14, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py', 'utils.py', 'builder.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py', 'lumpy.py', 'flasher.py', 'testresult.py'], 'execution_path_count': 33, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '83': 'should_build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '169': 'flash(flasher.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '126': 'current_date(utils.py)'}}, {'key': 1747, 'parent': 1824, 'tfidf_word': 'current date entry mkdir memory line fill dirname abspath section ', 'tfidf_method': 'mkdir get_memory_map_lines hoist_section dirname current_date try_match_entry try_match_fill try_match_section try_match_symbol abspath ', 'lda_word': ' resolve,build,read,section,symbol,', 'lda_method': ' load_map_data,open,fail,calculate_section_sizes,create_build_info,', 'lsi_word': ' resolve,build,read,file,symbol,', 'lsi_method': ' resolve_symbol,flash,read_config_file,resolve,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 11, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'lumpy.py', 'testresult.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 26, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '87': 'load_map_data(lumpy.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)', '123': 'abspath(utils.py)'}}, {'key': 1816, 'parent': 1824, 'tfidf_word': 'info resolve log mkdir relpath dirname dicts basename merge abspath ', 'tfidf_method': 'log merge_dicts relpath get dirname basename abspath mkdir get info ', 'lda_word': ' resolve,build,info,create,read,', 'lda_method': ' log,resolve_symbol,resolve,resolve_string,flash,', 'lsi_word': ' resolve,build,info,create,symbol,', 'lsi_method': ' create_build_info,resolve,resolve_symbol,resolve_string,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Write binary size and commit information into a file. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 46, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)'}}, {'key': 1591, 'parent': 1800, 'tfidf_word': 'fail get dirname log dicts merge mkdir basename relpath abspath ', 'tfidf_method': 'exists merge_dicts mkdir dirname relpath get basename abspath log get ', 'lda_word': ' build,create,main,environment,info,', 'lda_method': ' build,last_commit_info,execute,create_build_info,create_testing_environment,', 'lsi_word': ' build,create,info,commit,environment,', 'lsi_method': ' create_testing_environment,create_build_info,last_commit_info,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1790, 'parent': 1800, 'tfidf_word': 'relpath dicts entry fill merge memory hoist last date abspath ', 'tfidf_method': 'hoist_section append get_memory_map_lines basename current_date get last_commit_info merge_dicts abspath get ', 'lda_word': ' create,build,environment,write,file,', 'lda_method': ' create_testing_environment,main,create_build_info,build,calculate_section_sizes,', 'lsi_word': ' create,build,info,section,testing,', 'lsi_method': ' create_testing_environment,create_build_info,build,main,calculate_section_sizes,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given command. Return a relative filepath to path from the start directory. Write binary size and commit information into a file. Helper function to print commands. Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 12, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'sshcom.py', 'serialcom.py'], 'execution_path_count': 31, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '126': 'current_date(utils.py)'}}, {'key': 1795, 'parent': 1821, 'tfidf_word': 'command get dicts merge log mkdir relpath basename dirname abspath ', 'tfidf_method': 'fail exists merge_dicts get basename mkdir relpath abspath log dirname ', 'lda_word': ' build,execute,create,testing,module,', 'lda_method': ' main,create_testing_environment,build,build_modules,execute,', 'lsi_word': ' build,execute,environment,module,main,', 'lsi_method': ' main,build_modules,create_testing_environment,build,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 24, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '101': 'mount_fs_writable(builtins.py)'}}, {'key': 1815, 'parent': 1821, 'tfidf_word': 'abspath log exception encode dirname basename mkdir timeout file read ', 'tfidf_method': 'ObjectDict dirname encode_as_objdict namespace_as_dict basename abspath TimeoutException log exec_command relpath ', 'lda_word': ' testing,environment,create,main,dict,', 'lda_method': ' read_json_file,exec_command,build,create_testing_environment,read_modules,', 'lsi_word': ' execute,build,testing,environment,main,', 'lsi_method': ' create_testing_environment,main,build,init_modules,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given command. Return a relative filepath to path from the start directory. Run the command defined in the build.config file. Execute all the init commands that the modules define. Public method to build the module by the given build_info object.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py'], 'execution_path_count': 23, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '137': 'join(utils.py)', '69': 'namespace_as_dict(__init__.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '83': 'should_build(builder.py)'}}, {'key': 1791, 'parent': 1828, 'tfidf_word': 'get relpath mkdir abspath log dirname dicts basename merge fail ', 'tfidf_method': 'exists relpath abspath log get fail dirname basename mkdir merge_dicts ', 'lda_word': ' get,execute,mount,writable,environment,', 'lda_method': ' exist,copy,execute,mount_fs_writable,get,', 'lsi_word': ' get,execute,writable,mount,environment,', 'lsi_method': ' execute,get,mount_fs_writable,get_environment,exec_shell,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'testresult.py', 'artik053.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 30, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1812, 'parent': 1828, 'tfidf_word': 'exist log merge mkdir dirname dicts basename relpath fail abspath ', 'tfidf_method': 'exists get abspath log mkdir fail dirname basename relpath merge_dicts ', 'lda_word': ' mkdir,exist,copy,initialize,init,', 'lda_method': ' get,mount_fs_writable,execute,initialize,init,', 'lsi_word': ' get,execute,module,mount,writable,', 'lsi_method': ' get,execute,mount_fs_writable,exec_shell,init,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'builder.py'], 'execution_path_count': 40, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '174': 'patch_modules(__init__.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)'}}, {'key': 1784, 'parent': 1831, 'tfidf_word': 'merge mkdir fail dirname dicts relpath basename log abspath resolve ', 'tfidf_method': 'exists relpath merge_dicts get dirname basename log fail mkdir abspath ', 'lda_word': ' build,resolve,read,get,writable,', 'lda_method': ' get,mount_fs_writable,build,should_build,read_modules,', 'lsi_word': ' resolve,build,read,get,execute,', 'lsi_method': ' get,mount_fs_writable,read_modules,should_build,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'symbol_resolver.py', 'flasher.py'], 'execution_path_count': 30, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1818, 'parent': 1831, 'tfidf_word': 'fail abspath merge mkdir dirname dicts relpath basename log join ', 'tfidf_method': 'get abspath fail log mkdir merge_dicts dirname basename relpath join ', 'lda_word': ' resolve,get,execute,build,mount,', 'lda_method': ' get,flash,read_config_file,resolve,execute,', 'lsi_word': ' resolve,get,build,symbol,string,', 'lsi_method': ' get,resolve_string,resolve,resolve_symbol,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 54, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '82': 'read_modules(builder.py)', '137': 'join(utils.py)'}}, {'key': 162, 'parent': 1275, 'tfidf_word': 'EP: 162, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 255, 'parent': 1275, 'tfidf_word': 'EP: 255, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 183, 'parent': 1358, 'tfidf_word': 'EP: 183, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 208, 'parent': 1358, 'tfidf_word': 'EP: 208, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1360, 'parent': 1618, 'tfidf_word': 'commit exec fail get info last run coverage script execute ', 'tfidf_method': 'fail exec_builtin execute last_commit_info get run_coverage_script execute execute run ', 'lda_word': ' commit,get,fail,run,builtin,', 'lda_method': ' get,fail,exec_builtin,last_commit_info,execute,', 'lsi_word': ' execute,commit,exec,info,run,', 'lsi_method': ' execute,last_commit_info,get,fail,exec_builtin,', 'spm_method': '  &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the given test.', 'files_count': 6, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1513, 'parent': 1618, 'tfidf_word': 'coverage init reset run script command flash freya genromfs internet ', 'tfidf_method': 'init_freya_config execute_config_command flash reset execute execute reset __init__ config_internet genromfs ', 'lda_word': ' execute,get,exec,builtin,fail,', 'lda_method': ' execute,get,fail,exec_builtin,genromfs,', 'lsi_word': ' execute,get,fail,exec,builtin,', 'lsi_method': ' execute,get,fail,exec_builtin,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Run the command defined in the build.config file. Replace the Internet related symbols to concrete values in the NuttX config file. Reset the device to create clean environment. Execute the built-in command.', 'files_count': 8, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'ssh_device.py', 'flasher.py', 'stm32f4dis.py', 'testrunner.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '229': 'execute(ssh_device.py)', '169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1351, 'parent': 1625, 'tfidf_word': 'execute fail file get module restore finalize init initialize main ', 'tfidf_method': 'fail exec_builtin execute restore_file config_modules get finalize initialize main __init__ ', 'lda_word': ' exec,get,fail,builtin,module,', 'lda_method': ' get,execute,config_modules,fail,exec_builtin,', 'lsi_word': ' execute,config,fail,get,restore,', 'lsi_method': ' config_modules,fail,get,restore_file,exec_builtin,', 'spm_method': '  &#187; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given test. Execute the built-in command.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)'}}, {'key': 1352, 'parent': 1625, 'tfidf_word': 'exec execute fail get module finalize init initialize main patch ', 'tfidf_method': 'fail exec_builtin execute patch patch_modules get finalize initialize main __init__ ', 'lda_word': ' patch,get,exec,execute,module,', 'lda_method': ' patch,fail,exec_builtin,finalize,execute,', 'lsi_word': ' patch,fail,exec,module,get,', 'lsi_method': ' patch,get,fail,patch_modules,execute,', 'spm_method': '  &#187; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given test. Execute the built-in command. Public method to initialize the project.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '80': '__init__(builder.py)', '173': 'initialize(__init__.py)'}}, {'key': 1545, 'parent': 1654, 'tfidf_word': 'command exception exec timeout build execute info iotjs ', 'tfidf_method': 'TimeoutException exec_command iotjs_build_info execute ', 'lda_word': ' timeout,command,exception,exec,info,', 'lda_method': ' exec_command,timeoutexception,iotjs_build_info,execute,', 'lsi_word': ' exception,exec,timeout,command,info,', 'lsi_method': ' exec_command,timeoutexception,execute,iotjs_build_info,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['stm32f4dis.py', 'serialcom.py', 'utils.py', 'device_base.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1605, 'parent': 1654, 'tfidf_word': 'command exception exec execute timeout login ', 'tfidf_method': 'TimeoutException exec_command execute login login execute ', 'lda_word': ' login,exec,execute,exception,command,', 'lda_method': ' execute,exec_command,timeoutexception,login,', 'lsi_word': ' login,exec,command,timeout,exception,', 'lsi_method': ' login,execute,timeoutexception,exec_command,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'serialcom.py', 'utils.py', 'stm32f4dis.py', 'serial_device.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)'}}, {'key': 1449, 'parent': 1675, 'tfidf_word': 'file read environment flash main config result testing testsets upload ', 'tfidf_method': 'read_json_file exec_command open read_config_file flash create_result upload read_testsets create_testing_environment main ', 'lda_word': ' read,file,open,exception,json,', 'lda_method': ' read_json_file,timeoutexception,open,exec_command,read_config_file,', 'lsi_word': ' read,file,exception,json,open,', 'lsi_method': ' open,read_json_file,timeoutexception,exec_command,upload,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information. Read JSON based configuration file.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'serialcom.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 1669, 'parent': 1675, 'tfidf_word': 'upload load map result data create iotjs build login init ', 'tfidf_method': '__init__ execute upload execute run create_result run __init__ iotjs_build_info __init__ ', 'lda_word': ' exception,exec,command,open,timeout,', 'lda_method': ' open,exec_command,timeoutexception,login,main,', 'lsi_word': ' exception,timeout,exec,open,command,', 'lsi_method': ' open,timeoutexception,exec_command,login,init,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data. Execute the given test. Execute the given command.', 'files_count': 14, 'files': ['device_base.py', 'serialcom.py', 'utils.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'testresult.py', 'testrunner.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 1601, 'parent': 1809, 'tfidf_word': 'script execute commit info last config init freya genromfs internet ', 'tfidf_method': 'mkdir run_coverage_script last_commit_info execute execute init_freya_config __init__ run config_internet genromfs ', 'lda_word': ' execute,commit,info,last,copy,', 'lda_method': ' execute,mkdir,exist,copy,run_coverage_script,', 'lsi_word': ' execute,exist,mkdir,copy,run,', 'lsi_method': ' execute,copy,exist,mkdir,run_coverage_script,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Create directory. Execute the given test.', 'files_count': 5, 'files': ['testrunner.py', 'utils.py', 'artik053.py', 'ssh_device.py', 'builtins.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1744, 'parent': 1809, 'tfidf_word': 'exist execute config coverage init run script freya genromfs internet ', 'tfidf_method': 'execute dirname exists run_coverage_script init_freya_config execute execute __init__ config_internet genromfs ', 'lda_word': ' exist,execute,dirname,copy,config,', 'lda_method': ' execute,copy,exist,dirname,run_coverage_script,', 'lsi_word': ' execute,copy,exist,dirname,script,', 'lsi_method': ' execute,copy,dirname,exist,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist. Execute the given test.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'builtins.py', 'testrunner.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)', '100': 'init_freya_config(builtins.py)', '242': '__init__(testrunner.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1769, 'parent': 1846, 'tfidf_word': 'basename build docker execute relpath app info iotjs login run ', 'tfidf_method': 'abspath basename relpath execute login iotjs_build_info execute build_app exec_docker run_docker ', 'lda_word': ' command,exec,print,main,abspath,', 'lda_method': ' exec_command,print_command,exec_docker,main,build_app,', 'lsi_word': ' command,exec,print,main,docker,', 'lsi_method': ' print_command,exec_command,main,relpath,basename,', 'spm_method': ' ', 'text_summary': 'Build jerry or iotjs for the given device, both release and debug. Execute the given command in Docker. Return the base name of pathname path. Execute the given command.', 'files_count': 5, 'files': ['travis_script.py', 'utils.py', 'artik053.py', 'stm32f4dis.py', 'device_base.py'], 'execution_path_count': 18, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '269': 'run_docker(travis_script.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1843, 'parent': 1846, 'tfidf_word': 'read exist testset get send init section environment remove device ', 'tfidf_method': 'parse_arguments main relpath parse_arguments rmtree _listener is_executable close_pseudo_terminal run_jerry JerryBreakpoint ', 'lda_word': ' info,iotjs,open,build,main,', 'lda_method': ' open,run,fail,upload,log,', 'lsi_word': ' init,read,open,file,fail,', 'lsi_method': ' init,fail,open,main,login,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Read JSON file. Test whether a path exists. Read all the tests into dictionary. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Checking resources before testing. Read JSON based configuration file. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['flasher.py', 'utils.py', 'telnetcom.py', 'console.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'device_base.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py', 'sshcom.py', 'skiplist.py', 'serialcom.py', 'reporter.py', 'artik053.py', 'builtins.py', 'stm32f4dis.py', 'serial_device.py', 'tester.py', 'travis_script.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 235, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '99': 'get(builtins.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1494, 'parent': 1670, 'tfidf_word': 'run shell command print abspath basename fail get log relpath ', 'tfidf_method': 'execute last_commit_info run print_command fail log abspath basename relpath get ', 'lda_word': ' basename,print,command,run,execute,', 'lda_method': ' print_command,run,last_commit_info,execute,exec_shell,', 'lsi_word': ' commit,info,run,shell,execute,', 'lsi_method': ' run,last_commit_info,execute,exec_shell,print_command,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Helper function to print commands. Execute the given test. Return the absolute path.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1503, 'parent': 1670, 'tfidf_word': 'commit execute info last run copy dicts dirname exist merge ', 'tfidf_method': 'execute last_commit_info run copy dirname exists merge_dicts ', 'lda_word': ' commit,last,info,execute,run,', 'lda_method': ' run,execute,last_commit_info,exist,copy,', 'lsi_word': ' commit,execute,run,last,info,', 'lsi_method': ' last_commit_info,run,execute,copy,exist,', 'spm_method': ' ', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Execute the given test.', 'files_count': 2, 'files': ['testrunner.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1635, 'parent': 1761, 'tfidf_word': 'info last run script copy execute dicts dirname exist merge ', 'tfidf_method': 'execute last_commit_info run_coverage_script copy execute execute dirname exists merge_dicts ', 'lda_word': ' execute,run,script,copy,info,', 'lda_method': ' execute,run_coverage_script,last_commit_info,merge_dicts,copy,', 'lsi_word': ' execute,commit,last,info,script,', 'lsi_method': ' execute,last_commit_info,run_coverage_script,copy,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1657, 'parent': 1761, 'tfidf_word': 'last command print execute relpath abspath fail basename log get ', 'tfidf_method': 'run_coverage_script print_command execute execute fail log abspath basename relpath get ', 'lda_word': ' execute,print,command,shell,coverage,', 'lda_method': ' execute,run_coverage_script,last_commit_info,exec_shell,print_command,', 'lsi_word': ' execute,coverage,commit,shell,run,', 'lsi_method': ' execute,run_coverage_script,exec_shell,last_commit_info,print_command,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py', 'ssh_device.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1602, 'parent': 1826, 'tfidf_word': 'script execute commit info last config init freya genromfs internet ', 'tfidf_method': 'get run_coverage_script last_commit_info execute execute init_freya_config __init__ run config_internet genromfs ', 'lda_word': ' execute,fail,shell,exec,get,', 'lda_method': ' execute,fail,get,exec_shell,run_coverage_script,', 'lsi_word': ' execute,shell,fail,get,exec,', 'lsi_method': ' execute,get,fail,exec_shell,run_coverage_script,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Execute the given test.', 'files_count': 6, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1804, 'parent': 1826, 'tfidf_word': 'init relpath log abspath get freya fail basename internet genromfs ', 'tfidf_method': 'log abspath basename relpath execute execute __init__ get config_internet genromfs ', 'lda_word': ' execute,shell,exec,fail,config,', 'lda_method': ' execute,print_command,exec_shell,run_coverage_script,basename,', 'lsi_word': ' execute,exec,shell,command,print,', 'lsi_method': ' execute,exec_shell,print_command,run_coverage_script,basename,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py', 'ssh_device.py', 'testrunner.py', 'builtins.py'], 'execution_path_count': 36, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1688, 'parent': 1835, 'tfidf_word': 'get exist dicts fail relpath dirname log mkdir basename abspath ', 'tfidf_method': 'exists fail dirname basename mkdir abspath relpath log get get ', 'lda_word': ' execute,command,config,flash,print,', 'lda_method': ' flash,execute,execute_config_command,exec_shell,copy,', 'lsi_word': ' execute,command,flash,config,exec,', 'lsi_method': ' execute_config_command,flash,execute,exec_shell,print_command,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1833, 'parent': 1835, 'tfidf_word': 'fail exist dicts log merge mkdir basename relpath dirname abspath ', 'tfidf_method': 'exists relpath merge_dicts get dirname basename abspath log mkdir get ', 'lda_word': ' execute,reset,shell,exec,copy,', 'lda_method': ' execute,reset,exec_shell,print_command,copy,', 'lsi_word': ' execute,reset,shell,exec,command,', 'lsi_method': ' execute,reset,exec_shell,print_command,copy,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['stm32f4dis.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'artik053.py'], 'execution_path_count': 22, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '185': 'reset(artik053.py)'}}, {'key': 1581, 'parent': 1682, 'tfidf_word': 'finalize main module fail get patch exist ', 'tfidf_method': 'finalize patch_modules main fail patch exists get get ', 'lda_word': ' finalize,patch,module,main,get,', 'lda_method': ' patch_modules,main,patch,get,finalize,', 'lsi_word': ' patch,finalize,module,main,fail,', 'lsi_method': ' main,finalize,patch_modules,fail,patch,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)'}}, {'key': 1630, 'parent': 1682, 'tfidf_word': 'fail get dicts relpath log merge mkdir basename dirname abspath ', 'tfidf_method': 'exists get relpath merge_dicts dirname basename abspath log mkdir get ', 'lda_word': ' patch,execute,finalize,module,main,', 'lda_method': ' patch_modules,main,execute,patch,finalize,', 'lsi_word': ' patch,module,execute,main,finalize,', 'lsi_method': ' execute,patch,finalize,patch_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1629, 'parent': 1788, 'tfidf_word': 'fail get dirname dicts log merge mkdir basename relpath abspath ', 'tfidf_method': 'exists get relpath merge_dicts dirname basename abspath log mkdir get ', 'lda_word': ' abspath,restore,main,finalize,file,', 'lda_method': ' main,config_modules,finalize,execute,restore_file,', 'lsi_word': ' main,execute,module,file,restore,', 'lsi_method': ' config_modules,execute,finalize,restore_file,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1752, 'parent': 1788, 'tfidf_word': 'exist restore break get rmtree remove file symlink fail relpath ', 'tfidf_method': 'exists restore_file symlink is_broken_symlink remove_file rmtree fail relpath get get ', 'lda_word': ' remove,main,module,finalize,config,', 'lda_method': ' main,config_modules,finalize,symlink,remove,', 'lsi_word': ' finalize,module,config,main,remove,', 'lsi_method': ' config_modules,finalize,main,remove,exist,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; symlink(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Remove the given file. Public method to restore the project files. Checks that the given path is exist.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '134': 'exists(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '150': 'restore_file(utils.py)', '147': 'relpath(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1631, 'parent': 1789, 'tfidf_word': 'fail get dirname dicts log merge mkdir basename relpath abspath ', 'tfidf_method': 'exists get relpath merge_dicts dirname basename abspath log mkdir get ', 'lda_word': ' mkdir,exist,copy,execute,restore,', 'lda_method': ' execute,init,initialize,restore_file,config_modules,', 'lsi_word': ' config,initialize,file,module,restore,', 'lsi_method': ' config_modules,execute,restore_file,initialize,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to initialize the project. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1753, 'parent': 1789, 'tfidf_word': 'exist restore break get rmtree remove file symlink fail relpath ', 'tfidf_method': 'exists restore_file symlink is_broken_symlink remove_file rmtree fail relpath get get ', 'lda_word': ' initialize,module,config,init,symlink,', 'lda_method': ' initialize,init,config_modules,remove,symlink,', 'lsi_word': ' module,config,initialize,init,remove,', 'lsi_method': ' init,config_modules,initialize,remove,exist,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; symlink(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Restore the modified project files. Remove the resource file. Checks that the given path is exist. Remove the given file.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '134': 'exists(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '150': 'restore_file(utils.py)', '147': 'relpath(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1658, 'parent': 1832, 'tfidf_word': 'copy dirname dicts log merge mkdir builtin basename relpath abspath ', 'tfidf_method': 'get dirname merge_dicts mkdir basename relpath abspath log get exec_builtin ', 'lda_word': ' log,module,shell,fetch,init,', 'lda_method': ' execute,fetch_modules,initialize,init,print_command,', 'lsi_word': ' initialize,init,fetch,module,execute,', 'lsi_method': ' fetch_modules,initialize,init,execute,exec_shell,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Execute the given test. Execute the built-in command.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 13, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '140': 'merge_dicts(utils.py)', '64': 'get(coverage_client.py)', '134': 'exists(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1683, 'parent': 1832, 'tfidf_word': 'copy exist relpath dirname dicts log merge mkdir basename abspath ', 'tfidf_method': 'exists get get dirname relpath basename abspath log mkdir merge_dicts ', 'lda_word': ' patch,module,initialize,init,execute,', 'lda_method': ' patch,patch_modules,init,initialize,execute,', 'lsi_word': ' patch,module,init,initialize,execute,', 'lsi_method': ' initialize,patch_modules,init,patch,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to initialize the project. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1261, 'parent': 1484, 'tfidf_word': 'print command execute get fail relpath basename log abspath resolve ', 'tfidf_method': 'build execute_config_command print_command fail get basename abspath log relpath get ', 'lda_word': ' resolve,execute,init,exec,fail,', 'lda_method': ' build,resolve_string,resolve_symbol,init_modules,execute_config_command,', 'lsi_word': ' resolve,execute,command,build,environment,', 'lsi_method': ' build,execute,init_modules,resolve,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Helper function to print commands. Execute the shell command.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1335, 'parent': 1484, 'tfidf_word': 'config command copy dicts merge exist execute mkdir dirname resolve ', 'tfidf_method': 'create_testing_environment main init_modules build execute copy exists merge_dicts dirname mkdir ', 'lda_word': ' resolve,execute,merge,string,dicts,', 'lda_method': ' execute_config_command,main,resolve_symbol,build,create_testing_environment,', 'lsi_word': ' resolve,execute,command,init,environment,', 'lsi_method': ' execute_config_command,create_testing_environment,resolve_symbol,resolve_string,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute all the init commands that the modules define. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1262, 'parent': 1485, 'tfidf_word': 'command config execute get fail relpath basename log abspath resolve ', 'tfidf_method': 'build execute_config_command print_command fail relpath abspath get log basename get ', 'lda_word': ' resolve,config,execute,command,shell,', 'lda_method': ' abspath,build,flash,resolve_symbol,read_config_file,', 'lsi_word': ' resolve,execute,config,command,exec,', 'lsi_method': ' build,execute,resolve_string,read_config_file,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Run the command defined in the build.config file. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1336, 'parent': 1485, 'tfidf_word': 'symbol copy exist dicts merge config execute dirname mkdir resolve ', 'tfidf_method': 'read_config_file flash init_modules build execute copy exists merge_dicts dirname mkdir ', 'lda_word': ' resolve,execute,config,command,copy,', 'lda_method': ' mkdir,execute_config_command,build,flash,copy,', 'lsi_word': ' resolve,config,execute,flash,module,', 'lsi_method': ' build,resolve_symbol,init_modules,read_config_file,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute all the init commands that the modules define. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1435, 'parent': 1613, 'tfidf_word': 'main init testing environment create flash execute config build resolve ', 'tfidf_method': 'execute execute_config_command build get read_config_file flash create_testing_environment main build_modules init_modules ', 'lda_word': ' resolve,execute,build,string,get,', 'lda_method': ' build_modules,resolve_string,build,resolve_symbol,get,', 'lsi_word': ' resolve,execute,config,build,fail,', 'lsi_method': ' execute_config_command,exec_builtin,fail,resolve,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Run the command defined in the build.config file. Execute all the init commands that the modules define.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'flasher.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1464, 'parent': 1613, 'tfidf_word': 'file environment config commit calculate create info build read resolve ', 'tfidf_method': 'build create_build_info get last_commit_info read_config_file flash create_testing_environment main calculate_section_sizes read_objects_from_libs ', 'lda_word': ' resolve,build,create,section,calculate,', 'lda_method': ' get,resolve_string,exec_builtin,execute,resolve_symbol,', 'lsi_word': ' resolve,build,create,info,read,', 'lsi_method': ' resolve_string,exec_builtin,resolve_symbol,resolve,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Read all the names of the object files that are. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'flasher.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '138': 'last_commit_info(utils.py)'}}, {'key': 1574, 'parent': 1782, 'tfidf_word': 'exist merge dicts resolve mkdir dirname relpath basename log abspath ', 'tfidf_method': 'exists merge_dicts get get mkdir relpath basename abspath log dirname ', 'lda_word': ' resolve,build,execute,module,testing,', 'lda_method': ' resolve_string,create_testing_environment,build,resolve_symbol,main,', 'lsi_word': ' resolve,build,execute,command,create,', 'lsi_method': ' build,resolve_symbol,main,build_modules,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1575, 'parent': 1782, 'tfidf_word': 'dicts exist merge resolve relpath log mkdir dirname basename abspath ', 'tfidf_method': 'exists merge_dicts get get mkdir basename relpath abspath log dirname ', 'lda_word': ' build,resolve,config,file,execute,', 'lda_method': ' read_config_file,flash,resolve_string,build,resolve,', 'lsi_word': ' resolve,build,config,execute,command,', 'lsi_method': ' read_config_file,build,resolve,resolve_symbol,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1355, 'parent': 1751, 'tfidf_word': 'build copy create environment main save testing exist dirname mkdir ', 'tfidf_method': 'copy create_testing_environment main save_artifacts build exists dirname mkdir ', 'lda_word': ' artifact,create,testing,environment,save,', 'lda_method': ' build,main,create_testing_environment,save_artifacts,copy,', 'lsi_word': ' artifact,create,main,save,environment,', 'lsi_method': ' build,copy,save_artifacts,main,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1589, 'parent': 1751, 'tfidf_word': 'main file environment create config flash testing mkdir dirname resolve ', 'tfidf_method': 'copy save_artifacts build exists read_config_file flash create_testing_environment main dirname mkdir ', 'lda_word': ' resolve,copy,build,dirname,symbol,', 'lda_method': ' resolve_symbol,save_artifacts,resolve_string,copy,resolve,', 'lsi_word': ' resolve,artifact,build,copy,symbol,', 'lsi_method': ' build,resolve_symbol,resolve,save_artifacts,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'flasher.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1663, 'parent': 1773, 'tfidf_word': 'join build resolve abspath exec exception command timeout file read ', 'tfidf_method': 'get join exists read_until open open abspath TimeoutException open exec_command ', 'lda_word': ' resolve,environment,testing,create,string,', 'lda_method': ' build,resolve_symbol,resolve_string,read_config_file,resolve,', 'lsi_word': ' resolve,read,string,symbol,testing,', 'lsi_method': ' resolve_string,create_testing_environment,main,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 11, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py', 'utils.py', 'builder.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '83': 'should_build(builder.py)'}}, {'key': 1677, 'parent': 1773, 'tfidf_word': 'dirname date hoist get current fill entry append file section ', 'tfidf_method': 'try_match_symbol try_match_section try_match_fill try_match_entry append hoist_section dirname mkdir current_date get_memory_map_lines ', 'lda_word': ' resolve,build,create,section,main,', 'lda_method': ' resolve_symbol,fail,build,resolve,load_map_data,', 'lsi_word': ' resolve,build,create,section,symbol,', 'lsi_method': ' build,resolve_string,resolve,resolve_symbol,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Write a JSON file from the given data. Return the sizes of the main sections.', 'files_count': 12, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'serialcom.py', 'flasher.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'testresult.py'], 'execution_path_count': 21, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1604, 'parent': 1747, 'tfidf_word': 'dirname get hoist mkdir memory line fill entry append section ', 'tfidf_method': 'mkdir get_memory_map_lines hoist_section dirname current_date try_match_entry try_match_fill try_match_section try_match_symbol append ', 'lda_word': ' resolve,section,build,read,symbol,', 'lda_method': ' resolve_symbol,create_build_info,resolve_string,build,flash,', 'lsi_word': ' resolve,build,file,section,read,', 'lsi_method': ' build,create_build_info,flash,read_config_file,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Recursively loop on the given node, and resolve all the. Write binary size and commit information into a file. Write a JSON file from the given data. Resolve the given symbol.', 'files_count': 9, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 17, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '87': 'load_map_data(lumpy.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1651, 'parent': 1747, 'tfidf_word': 'symbol module get read exist fail join resolve build abspath ', 'tfidf_method': 'flash build read_modules should_build fail exists join get get abspath ', 'lda_word': ' resolve,fail,flash,symbol,file,', 'lda_method': ' read_config_file,flash,resolve_string,resolve,resolve_symbol,', 'lsi_word': ' resolve,read,config,symbol,file,', 'lsi_method': ' resolve,resolve_symbol,resolve_string,flash,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Join one or more path components intelligently. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '123': 'abspath(utils.py)'}}, {'key': 1686, 'parent': 1816, 'tfidf_word': 'exist resolve merge log relpath dirname dicts basename mkdir abspath ', 'tfidf_method': 'fail get merge_dicts mkdir dirname basename abspath log relpath get ', 'lda_word': ' resolve,build,create,read,section,', 'lda_method': ' dirname,copy,execute,read_objects_from_libs,calculate_section_sizes,', 'lsi_word': ' resolve,build,read,create,execute,', 'lsi_method': ' calculate_section_sizes,create_build_info,resolve,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 22, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1746, 'parent': 1816, 'tfidf_word': 'log info resolve basename dirname mkdir merge dicts relpath abspath ', 'tfidf_method': 'log merge_dicts dirname relpath basename get abspath info mkdir get ', 'lda_word': ' resolve,info,build,config,flash,', 'lda_method': ' execute,create_build_info,resolve_string,build,resolve_symbol,', 'lsi_word': ' resolve,info,build,create,last,', 'lsi_method': ' build,resolve_symbol,resolve,last_commit_info,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Print a message with the given color.', 'files_count': 9, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py', '__main__.py', '__init__.py'], 'execution_path_count': 24, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '106': 'info(console.py)'}}, {'key': 1248, 'parent': 1591, 'tfidf_word': 'execute last main testing exist build create info dirname mkdir ', 'tfidf_method': 'copy execute last_commit_info create_testing_environment main build create_build_info exists dirname mkdir ', 'lda_word': ' build,create,info,environment,testing,', 'lda_method': ' last_commit_info,create_build_info,build,copy,dirname,', 'lsi_word': ' build,create,info,environment,main,', 'lsi_method': ' build,create_testing_environment,last_commit_info,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Get last commit information about the submodules. Write binary size and commit information into a file. Public method to build the module by the given build_info object.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1434, 'parent': 1591, 'tfidf_word': 'create info fail get log dicts merge basename relpath abspath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' info,build,commit,create,execute,', 'lda_method': ' execute,create_build_info,last_commit_info,create_testing_environment,main,', 'lsi_word': ' info,create,build,testing,environment,', 'lsi_method': ' main,create_build_info,last_commit_info,execute,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given test. Helper function to print commands. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1573, 'parent': 1790, 'tfidf_word': 'fail exist merge mkdir dirname relpath dicts basename log abspath ', 'tfidf_method': 'exists get mkdir merge_dicts dirname basename abspath log relpath get ', 'lda_word': ' build,create,fail,execute,size,', 'lda_method': ' create_testing_environment,calculate_section_sizes,main,build,create_build_info,', 'lsi_word': ' create,build,libs,calculate,environment,', 'lsi_method': ' main,create_testing_environment,read_objects_from_libs,calculate_section_sizes,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1687, 'parent': 1790, 'tfidf_word': 'memory fill entry log line last hoist mkdir append section ', 'tfidf_method': 'try_match_entry info mkdir append get_memory_map_lines current_date dirname last_commit_info log hoist_section ', 'lda_word': ' build,create,environment,section,main,', 'lda_method': ' build,main,create_testing_environment,create_build_info,last_commit_info,', 'lsi_word': ' build,create,info,section,environment,', 'lsi_method': ' build,create_testing_environment,main,create_build_info,calculate_section_sizes,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Write binary size and commit information into a file. Write a JSON file from the given data. Checks that the given path is exist. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'serialcom.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '126': 'current_date(utils.py)'}}, {'key': 1611, 'parent': 1795, 'tfidf_word': 'exist fail get merge log mkdir basename relpath dirname abspath ', 'tfidf_method': 'exists merge_dicts mkdir dirname relpath get basename abspath log get ', 'lda_word': ' execute,build,module,testing,command,', 'lda_method': ' main,build,create_testing_environment,exec_shell,execute,', 'lsi_word': ' build,execute,command,config,create,', 'lsi_method': ' build,build_modules,create_testing_environment,main,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Run the command defined in the build.config file. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1652, 'parent': 1795, 'tfidf_word': 'exist fail relpath basename merge dirname log dicts mkdir abspath ', 'tfidf_method': 'get fail exists basename merge_dicts mkdir relpath abspath log dirname ', 'lda_word': ' build,merge,dicts,abspath,writable,', 'lda_method': ' exec_shell,execute,mount_fs_writable,main,build,', 'lsi_word': ' build,get,create,main,testing,', 'lsi_method': ' get,build,create_testing_environment,main,build_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py', 'utils.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1612, 'parent': 1815, 'tfidf_word': 'exist fail dicts get log dirname mkdir basename relpath abspath ', 'tfidf_method': 'exists merge_dicts mkdir dirname relpath get basename abspath log get ', 'lda_word': ' dirname,execute,copy,testing,main,', 'lda_method': ' fail,get,exec_shell,execute,build,', 'lsi_word': ' execute,command,build,init,config,', 'lsi_method': ' init_modules,execute_config_command,main,create_testing_environment,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1774, 'parent': 1815, 'tfidf_word': 'object objdict namespace timeout exception encode command exec file read ', 'tfidf_method': 'encode_as_objdict open get read_until open open exec_command TimeoutException ObjectDict get ', 'lda_word': ' read,file,build,environment,testing,', 'lda_method': ' create_testing_environment,main,read_modules,build,should_build,', 'lsi_word': ' read,build,main,testing,environment,', 'lsi_method': ' main,create_testing_environment,build,read_modules,open,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Convert NameSpace object to dict. Read JSON file. Convert dictionary to object. Checks that the given path is exist. Join one or more path components intelligently. Public method to build the module by the given build_info object.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builder.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '137': 'join(utils.py)', '69': 'namespace_as_dict(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)'}}, {'key': 1637, 'parent': 1791, 'tfidf_word': 'writable environment exist execute get dirname flash login mkdir upload ', 'tfidf_method': 'execute get exists get_environment dirname mkdir flash upload execute login ', 'lda_word': ' get,execute,writable,mount,copy,', 'lda_method': ' mount_fs_writable,get,execute,copy,exist,', 'lsi_word': ' get,execute,copy,writable,mount,', 'lsi_method': ' execute,get,copy,mount_fs_writable,get_environment,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Login to the device. Execute the given test. Flash the device.', 'files_count': 5, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'testresult.py', 'artik053.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '128': 'dirname(utils.py)'}}, {'key': 1770, 'parent': 1791, 'tfidf_word': 'flash upload log merge fail dicts relpath basename abspath get ', 'tfidf_method': 'upload execute login abspath basename fail get relpath log merge_dicts ', 'lda_word': ' get,execute,merge,dicts,mount,', 'lda_method': ' execute,exec_shell,get,mount_fs_writable,upload,', 'lsi_word': ' get,execute,mount,writable,exec,', 'lsi_method': ' execute,get,mount_fs_writable,exec_shell,get_environment,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'artik053.py', 'testresult.py'], 'execution_path_count': 21, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '179': 'upload(testresult.py)'}}, {'key': 1786, 'parent': 1812, 'tfidf_word': 'exist fail log dirname merge mkdir basename dicts relpath abspath ', 'tfidf_method': 'exists dirname abspath log merge_dicts mkdir relpath fail get basename ', 'lda_word': ' print,execute,shell,command,exec,', 'lda_method': ' get,execute,finalize,main,mount_fs_writable,', 'lsi_word': ' get,execute,main,writable,module,', 'lsi_method': ' get,finalize,main,execute,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '174': 'patch_modules(__init__.py)'}}, {'key': 1787, 'parent': 1812, 'tfidf_word': 'exist log merge mkdir dirname dicts basename relpath fail abspath ', 'tfidf_method': 'exists dirname abspath log merge_dicts mkdir relpath fail get basename ', 'lda_word': ' module,writable,copy,config,dirname,', 'lda_method': ' mount_fs_writable,execute,exist,init,copy,', 'lsi_word': ' get,initialize,mount,execute,module,', 'lsi_method': ' get,initialize,init,mount_fs_writable,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Configure all the required modules. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '174': 'patch_modules(__init__.py)'}}, {'key': 1487, 'parent': 1784, 'tfidf_word': 'exist relpath abspath merge log dirname dicts basename mkdir fail ', 'tfidf_method': 'exists dirname mkdir relpath get basename abspath log fail merge_dicts ', 'lda_word': ' build,module,writable,get,read,', 'lda_method': ' mkdir,exist,build,main,create_testing_environment,', 'lsi_word': ' build,get,mount,writable,read,', 'lsi_method': ' get,build,should_build,mount_fs_writable,read_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1667, 'parent': 1784, 'tfidf_word': 'resolve merge log dicts relpath dirname fail basename mkdir abspath ', 'tfidf_method': 'exists relpath merge_dicts get dirname basename log fail mkdir abspath ', 'lda_word': ' resolve,build,exist,read,create,', 'lda_method': ' get,exec_shell,resolve_string,read_modules,execute,', 'lsi_word': ' resolve,build,read,get,mount,', 'lsi_method': ' get,resolve_string,execute,resolve,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Execute the given test.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1676, 'parent': 1818, 'tfidf_word': 'resolve basename relpath fail merge dicts log dirname mkdir abspath ', 'tfidf_method': 'exists merge_dicts relpath log get dirname basename fail mkdir abspath ', 'lda_word': ' resolve,build,writable,execute,symbol,', 'lda_method': ' get,create_testing_environment,main,mount_fs_writable,resolve_string,', 'lsi_word': ' resolve,build,get,module,string,', 'lsi_method': ' get,build,build_modules,resolve_string,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1798, 'parent': 1818, 'tfidf_word': 'fail abspath merge mkdir dirname relpath dicts basename log join ', 'tfidf_method': 'get abspath fail relpath merge_dicts dirname basename log mkdir join ', 'lda_word': ' resolve,file,main,writable,string,', 'lda_method': ' get,flash,read_config_file,mount_fs_writable,resolve_string,', 'lsi_word': ' resolve,read,get,string,symbol,', 'lsi_method': ' get,resolve_string,resolve_symbol,resolve,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Print a message with the given color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 34, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '169': 'flash(flasher.py)'}}, {'key': 518, 'parent': 1360, 'tfidf_word': 'EP: 518, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1143, 'parent': 1360, 'tfidf_word': 'commit coverage exec fail get info last run script execute ', 'tfidf_method': 'fail exec_builtin execute last_commit_info run_coverage_script get execute execute ', 'lda_word': ' execute,exec,info,script,run,', 'lda_method': ' execute,fail,exec_builtin,run_coverage_script,last_commit_info,', 'lsi_word': ' execute,commit,get,fail,last,', 'lsi_method': ' execute,fail,get,last_commit_info,run_coverage_script,', 'spm_method': '  &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1204, 'parent': 1513, 'tfidf_word': 'builtin coverage exec fail get run script execute ', 'tfidf_method': 'fail exec_builtin execute run_coverage_script get execute execute ', 'lda_word': ' execute,coverage,get,run,builtin,', 'lda_method': ' execute,run_coverage_script,fail,exec_builtin,get,', 'lsi_word': ' execute,coverage,get,run,script,', 'lsi_method': ' execute,exec_builtin,fail,get,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Start the client script. Execute the built-in command.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1448, 'parent': 1513, 'tfidf_word': 'get config execute init reset command flash freya genromfs internet ', 'tfidf_method': 'init_freya_config execute_config_command flash execute reset execute reset __init__ config_internet genromfs ', 'lda_word': ' execute,config,exec,fail,get,', 'lda_method': ' get,exec_builtin,fail,execute,config_internet,', 'lsi_word': ' execute,builtin,fail,get,exec,', 'lsi_method': ' execute,exec_builtin,get,fail,reset,', 'spm_method': ' ', 'text_summary': 'Run the command defined in the build.config file. Reset the device to create clean environment. Execute the built-in command.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'stm32f4dis.py', 'testrunner.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 272, 'parent': 1351, 'tfidf_word': 'EP: 272, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 374, 'parent': 1351, 'tfidf_word': 'EP: 374, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 317, 'parent': 1352, 'tfidf_word': 'EP: 317, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 419, 'parent': 1352, 'tfidf_word': 'EP: 419, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 569, 'parent': 1545, 'tfidf_word': 'EP: 569, Name: execute &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 672, 'parent': 1545, 'tfidf_word': 'EP: 672, Name: iotjs_build_info &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 632, 'parent': 1605, 'tfidf_word': 'EP: 632, Name: execute &rarr; login &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1480, 'parent': 1605, 'tfidf_word': 'command exception exec execute timeout login ', 'tfidf_method': 'TimeoutException exec_command login execute login execute ', 'lda_word': ' login,exec,exception,command,timeout,', 'lda_method': ' execute,timeoutexception,exec_command,login,', 'lsi_word': ' login,command,exception,exec,execute,', 'lsi_method': ' login,execute,timeoutexception,exec_command,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['stm32f4dis.py', 'serial_device.py', 'serialcom.py', 'utils.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 771, 'parent': 1449, 'tfidf_word': 'EP: 771, Name: flash &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1444, 'parent': 1449, 'tfidf_word': 'open timeout create read environment main result testing testsets upload ', 'tfidf_method': 'TimeoutException read_json_file exec_command open create_result upload read_testsets create_testing_environment main ', 'lda_word': ' read,json,exception,file,open,', 'lda_method': ' open,read_json_file,exec_command,timeoutexception,read_testsets,', 'lsi_word': ' read,command,json,file,exec,', 'lsi_method': ' open,timeoutexception,read_json_file,exec_command,upload,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'serialcom.py', 'testresult.py', 'testrunner.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 1437, 'parent': 1669, 'tfidf_word': 'command exception exec login open timeout build info iotjs init ', 'tfidf_method': 'TimeoutException exec_command open login __init__ iotjs_build_info __init__ __init__ ', 'lda_word': ' init,command,timeout,open,login,', 'lda_method': ' login,timeoutexception,exec_command,init,open,', 'lsi_word': ' init,command,exception,exec,open,', 'lsi_method': ' init,timeoutexception,login,open,exec_command,', 'spm_method': ' ', 'text_summary': 'Execute the given command.', 'files_count': 6, 'files': ['device_base.py', 'serialcom.py', 'utils.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)'}}, {'key': 1649, 'parent': 1669, 'tfidf_word': 'execute coverage upload map result data create init load login ', 'tfidf_method': 'main create_result upload execute login load_map_data execute run __init__ run ', 'lda_word': ' exception,open,command,timeout,exec,', 'lda_method': ' exec_command,timeoutexception,open,main,run,', 'lsi_word': ' exception,command,exec,timeout,open,', 'lsi_method': ' exec_command,open,timeoutexception,main,login,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data. Execute the given test. Execute the given command.', 'files_count': 10, 'files': ['testresult.py', 'utils.py', 'serialcom.py', 'testrunner.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '245': 'save(testrunner.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 1362, 'parent': 1601, 'tfidf_word': 'commit copy exist info last mkdir run coverage script execute ', 'tfidf_method': 'copy execute exists last_commit_info mkdir run_coverage_script execute execute run ', 'lda_word': ' execute,copy,script,exist,last,', 'lda_method': ' execute,copy,mkdir,last_commit_info,exist,', 'lsi_word': ' execute,commit,info,run,mkdir,', 'lsi_method': ' execute,last_commit_info,mkdir,copy,exist,', 'spm_method': '  &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Execute the given test.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1492, 'parent': 1601, 'tfidf_word': 'mkdir execute config coverage init run script freya genromfs internet ', 'tfidf_method': 'execute exists mkdir run_coverage_script init_freya_config execute execute __init__ config_internet genromfs ', 'lda_word': ' exist,copy,mkdir,execute,init,', 'lda_method': ' exist,copy,mkdir,execute,run_coverage_script,', 'lsi_word': ' execute,copy,exist,mkdir,coverage,', 'lsi_method': ' execute,copy,mkdir,exist,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Create directory. Create a romfs_img from the source directory that is. Execute the given test.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'testrunner.py', 'builtins.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1572, 'parent': 1744, 'tfidf_word': 'copy coverage run script dirname exist execute ', 'tfidf_method': 'copy execute run_coverage_script dirname exists execute execute ', 'lda_word': ' execute,copy,script,run,coverage,', 'lda_method': ' execute,copy,run_coverage_script,exist,dirname,', 'lsi_word': ' execute,copy,script,run,coverage,', 'lsi_method': ' execute,copy,run_coverage_script,dirname,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1646, 'parent': 1744, 'tfidf_word': 'copy execute config dirname exist init freya genromfs internet ', 'tfidf_method': 'copy execute dirname exists init_freya_config __init__ config_internet genromfs ', 'lda_word': ' copy,execute,config,init,dirname,', 'lda_method': ' execute,copy,dirname,exist,init_freya_config,', 'lsi_word': ' copy,execute,config,init,exist,', 'lsi_method': ' copy,execute,exist,dirname,genromfs,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Execute the given test. Checks that the given path is exist.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'testrunner.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '242': '__init__(testrunner.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1237, 'parent': 1769, 'tfidf_word': 'app build docker main print command exec abspath basename relpath ', 'tfidf_method': 'build_app exec_command exec_docker main print_command abspath basename relpath ', 'lda_word': ' exec,command,basename,docker,print,', 'lda_method': ' exec_command,build_app,exec_docker,main,relpath,', 'lsi_word': ' exec,command,print,docker,build,', 'lsi_method': ' print_command,exec_docker,exec_command,build_app,main,', 'spm_method': ' ', 'text_summary': 'Execute the given command in Docker. Execute the given command.', 'files_count': 2, 'files': ['travis_script.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1755, 'parent': 1769, 'tfidf_word': 'command abspath basename relpath build docker info iotjs login run ', 'tfidf_method': 'print_command main abspath basename relpath execute login iotjs_build_info execute run_docker ', 'lda_word': ' command,docker,run,main,abspath,', 'lda_method': ' main,exec_command,print_command,basename,run_docker,', 'lsi_word': ' command,print,exec,main,execute,', 'lsi_method': ' exec_command,print_command,execute,main,abspath,', 'spm_method': ' ', 'text_summary': 'Return the base name of pathname path. Execute the given test. Execute the given command.', 'files_count': 5, 'files': ['travis_script.py', 'utils.py', 'artik053.py', 'stm32f4dis.py', 'device_base.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '269': 'run_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1758, 'parent': 1843, 'tfidf_word': 'iotjs flash environment data config map load file read init ', 'tfidf_method': 'load_map_data __init__ run read_testsets run read_config_file main create_testing_environment main __init__ ', 'lda_word': ' init,fail,open,login,main,', 'lda_method': ' open,fail,main,init,run,', 'lsi_word': ' fail,open,file,read,json,', 'lsi_method': ' open,fail,init,read_json_file,main,', 'spm_method': ' ', 'text_summary': 'Flash the device. Read JSON based configuration file. Parse and create coverage information. Read JSON file. Read all the tests into dictionary. Create a final JSON result file from the build and test information. Login to the device. Write a JSON file from the given data. Main method to run IoT.js or JerryScript tests.', 'files_count': 15, 'files': ['flasher.py', 'utils.py', 'telnetcom.py', 'console.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'device_base.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 1842, 'parent': 1843, 'tfidf_word': 'testset get exist read send init section remove environment device ', 'tfidf_method': 'main run_jerry is_broken_symlink parse_arguments read_config_file relpath is_executable rmtree parse_arguments DebuggerPrompt ', 'lda_word': ' init,read,open,run,test,', 'lda_method': ' main,close,execute,read_until,open,', 'lsi_word': ' init,read,open,run,file,', 'lsi_method': ' init,fail,open,main,check_args,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Test whether a path exists. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Checking resources before testing. Read JSON based configuration file. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['flasher.py', 'utils.py', 'sshcom.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'device_base.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py', 'skiplist.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'reporter.py', 'artik053.py', 'builtins.py', 'stm32f4dis.py', 'serial_device.py', 'tester.py', 'travis_script.py', 'check_pylint.py', 'simpletester.py', 'pseudo_terminal.py'], 'execution_path_count': 220, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '99': 'get(builtins.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '235': '__init__(skiplist.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1207, 'parent': 1494, 'tfidf_word': 'execute info last print run shell abspath basename log relpath ', 'tfidf_method': 'exec_shell execute last_commit_info print_command run log abspath basename relpath ', 'lda_word': ' shell,print,exec,last,commit,', 'lda_method': ' run,execute,print_command,exec_shell,last_commit_info,', 'lsi_word': ' exec,last,execute,commit,run,', 'lsi_method': ' run,exec_shell,last_commit_info,execute,print_command,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1302, 'parent': 1494, 'tfidf_word': 'commit exec execute info last run shell fail get ', 'tfidf_method': 'exec_shell execute last_commit_info run fail get ', 'lda_word': ' exec,commit,last,run,info,', 'lda_method': ' execute,run,last_commit_info,exec_shell,get,', 'lsi_word': ' last,info,shell,run,commit,', 'lsi_method': ' last_commit_info,run,exec_shell,execute,get,', 'spm_method': ' ', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Execute the given test.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 529, 'parent': 1503, 'tfidf_word': 'EP: 529, Name: run &rarr; last_commit_info &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1303, 'parent': 1503, 'tfidf_word': 'commit copy execute info last run dirname exist ', 'tfidf_method': 'copy execute last_commit_info run dirname exists ', 'lda_word': ' copy,run,last,execute,info,', 'lda_method': ' last_commit_info,execute,run,copy,dirname,', 'lsi_word': ' copy,last,execute,run,commit,', 'lsi_method': ' run,execute,last_commit_info,copy,dirname,', 'spm_method': ' ', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Execute the given test.', 'files_count': 2, 'files': ['testrunner.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1304, 'parent': 1635, 'tfidf_word': 'commit coverage dicts info last merge run script execute ', 'tfidf_method': 'execute last_commit_info merge_dicts run_coverage_script execute execute ', 'lda_word': ' execute,dicts,coverage,merge,script,', 'lda_method': ' execute,run_coverage_script,merge_dicts,last_commit_info,', 'lsi_word': ' execute,merge,info,run,commit,', 'lsi_method': ' execute,merge_dicts,run_coverage_script,last_commit_info,', 'spm_method': ' ', 'text_summary': 'Get last commit information about the submodules. Start the client script.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1455, 'parent': 1635, 'tfidf_word': 'commit copy coverage info last run script dirname exist execute ', 'tfidf_method': 'copy execute last_commit_info run_coverage_script dirname exists execute execute ', 'lda_word': ' execute,commit,script,copy,run,', 'lda_method': ' execute,last_commit_info,copy,exist,run_coverage_script,', 'lsi_word': ' execute,copy,coverage,script,run,', 'lsi_method': ' execute,copy,last_commit_info,run_coverage_script,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1445, 'parent': 1657, 'tfidf_word': 'last command print execute relpath abspath fail basename log get ', 'tfidf_method': 'last_commit_info execute run_coverage_script print_command fail log abspath basename relpath get ', 'lda_word': ' execute,shell,commit,last,info,', 'lda_method': ' execute,last_commit_info,run_coverage_script,exec_shell,get,', 'lsi_word': ' execute,script,last,commit,coverage,', 'lsi_method': ' execute,exec_shell,run_coverage_script,last_commit_info,print_command,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1446, 'parent': 1657, 'tfidf_word': 'last command print execute relpath abspath fail basename log get ', 'tfidf_method': 'last_commit_info execute run_coverage_script print_command fail log abspath basename relpath get ', 'lda_word': ' execute,exec,info,shell,last,', 'lda_method': ' run_coverage_script,execute,exec_shell,last_commit_info,print_command,', 'lsi_word': ' execute,commit,info,script,run,', 'lsi_method': ' execute,last_commit_info,run_coverage_script,exec_shell,print_command,', 'spm_method': '  &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 4, 'files': ['ssh_device.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1361, 'parent': 1602, 'tfidf_word': 'exec fail get info last run shell coverage script execute ', 'tfidf_method': 'fail exec_shell execute last_commit_info get run_coverage_script execute execute run ', 'lda_word': ' fail,execute,get,info,exec,', 'lda_method': ' last_commit_info,exec_shell,get,fail,execute,', 'lsi_word': ' execute,commit,get,run,shell,', 'lsi_method': ' execute,last_commit_info,fail,get,exec_shell,', 'spm_method': '  &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the given test.', 'files_count': 6, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1493, 'parent': 1602, 'tfidf_word': 'shell execute config coverage init run script freya genromfs internet ', 'tfidf_method': 'exec_shell execute get run_coverage_script init_freya_config execute execute __init__ config_internet genromfs ', 'lda_word': ' config,exec,shell,fail,get,', 'lda_method': ' execute,exec_shell,get,fail,run_coverage_script,', 'lsi_word': ' execute,get,exec,shell,fail,', 'lsi_method': ' execute,get,fail,exec_shell,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Execute the shell command.', 'files_count': 6, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'ssh_device.py', 'testrunner.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1679, 'parent': 1804, 'tfidf_word': 'shell command print execute abspath basename fail get log relpath ', 'tfidf_method': 'run_coverage_script print_command execute execute fail log abspath basename relpath get ', 'lda_word': ' execute,shell,coverage,run,script,', 'lda_method': ' execute,run_coverage_script,exec_shell,fail,get,', 'lsi_word': ' execute,shell,script,run,exec,', 'lsi_method': ' execute,run_coverage_script,exec_shell,print_command,basename,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the given test.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py', 'ssh_device.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1765, 'parent': 1804, 'tfidf_word': 'init freya genromfs internet abspath basename fail get log relpath ', 'tfidf_method': 'init_freya_config __init__ config_internet genromfs fail log abspath basename relpath get ', 'lda_word': ' execute,shell,exec,init,config,', 'lda_method': ' execute,exec_shell,print_command,init,get,', 'lsi_word': ' shell,execute,exec,print,command,', 'lsi_method': ' execute,exec_shell,print_command,init,init_freya_config,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Helper function to print commands. Return the absolute path. Print a message with the given color.', 'files_count': 5, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py', 'builtins.py'], 'execution_path_count': 24, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1594, 'parent': 1688, 'tfidf_word': 'command execute fail get abspath basename dicts log merge relpath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' execute,command,exec,shell,flash,', 'lda_method': ' execute,flash,execute_config_command,exec_shell,get,', 'lsi_word': ' execute,command,config,flash,shell,', 'lsi_method': ' flash,execute_config_command,execute,exec_shell,print_command,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1665, 'parent': 1688, 'tfidf_word': 'command config flash copy exist execute dicts dirname merge mkdir ', 'tfidf_method': 'execute_config_command flash copy execute exists dirname merge_dicts mkdir ', 'lda_word': ' execute,command,flash,config,copy,', 'lda_method': ' flash,execute_config_command,execute,copy,exist,', 'lsi_word': ' execute,command,config,flash,copy,', 'lsi_method': ' execute_config_command,flash,execute,copy,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['flasher.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '140': 'merge_dicts(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1684, 'parent': 1833, 'tfidf_word': 'fail exist dicts log merge mkdir basename relpath dirname abspath ', 'tfidf_method': 'exists get merge_dicts mkdir basename relpath abspath log dirname get ', 'lda_word': ' execute,reset,exec,shell,command,', 'lda_method': ' execute,reset,exec_shell,print_command,exist,', 'lsi_word': ' execute,reset,shell,exec,print,', 'lsi_method': ' execute,reset,exec_shell,print_command,copy,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['stm32f4dis.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1685, 'parent': 1833, 'tfidf_word': 'fail exist dicts log merge mkdir basename relpath dirname abspath ', 'tfidf_method': 'exists get merge_dicts mkdir basename relpath abspath log dirname get ', 'lda_word': ' execute,reset,exec,shell,print,', 'lda_method': ' execute,exec_shell,reset,print_command,fail,', 'lsi_word': ' execute,reset,shell,exec,print,', 'lsi_method': ' execute,reset,exec_shell,print_command,copy,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1278, 'parent': 1581, 'tfidf_word': 'finalize main module exist fail patch ', 'tfidf_method': 'patch finalize patch_modules main fail exists ', 'lda_word': ' patch,module,finalize,main,fail,', 'lda_method': ' main,patch,fail,patch_modules,finalize,', 'lsi_word': ' patch,finalize,main,module,exist,', 'lsi_method': ' finalize,main,patch_modules,patch,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)'}}, {'key': 1477, 'parent': 1581, 'tfidf_word': 'finalize get main module patch fail ', 'tfidf_method': 'finalize patch_modules main fail get get ', 'lda_word': ' get,finalize,module,patch,main,', 'lda_method': ' main,get,patch_modules,finalize,fail,', 'lsi_word': ' finalize,patch,get,main,module,', 'lsi_method': ' finalize,get,main,patch_modules,fail,', 'spm_method': ' ', 'text_summary': 'Public method to restore the project files.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1269, 'parent': 1630, 'tfidf_word': 'copy execute finalize main module exist patch dirname mkdir ', 'tfidf_method': 'copy execute patch finalize patch_modules main exists dirname mkdir ', 'lda_word': ' patch,main,module,copy,finalize,', 'lda_method': ' patch_modules,finalize,copy,main,execute,', 'lsi_word': ' patch,main,module,finalize,execute,', 'lsi_method': ' execute,copy,patch_modules,patch,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Execute the given test. Apply the given patch to the given project.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1466, 'parent': 1630, 'tfidf_word': 'command patch get fail relpath merge dicts basename log abspath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' patch,exec,finalize,main,module,', 'lda_method': ' finalize,main,patch,patch_modules,exec_shell,', 'lsi_word': ' patch,module,main,finalize,execute,', 'lsi_method': ' main,patch_modules,patch,finalize,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1267, 'parent': 1629, 'tfidf_word': 'copy execute file finalize main module restore exist dirname mkdir ', 'tfidf_method': 'copy execute restore_file config_modules finalize main exists dirname mkdir ', 'lda_word': ' mkdir,exist,finalize,module,file,', 'lda_method': ' config_modules,copy,finalize,execute,restore_file,', 'lsi_word': ' copy,file,restore,module,main,', 'lsi_method': ' config_modules,copy,finalize,execute,restore_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Public method to restore the project files. Execute the given test.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1465, 'parent': 1629, 'tfidf_word': 'command print get fail dicts log merge basename relpath abspath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' finalize,main,execute,module,exec,', 'lda_method': ' finalize,config_modules,restore_file,execute,main,', 'lsi_word': ' config,finalize,main,module,file,', 'lsi_method': ' main,restore_file,finalize,execute,config_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1457, 'parent': 1752, 'tfidf_word': 'config finalize main module exist symlink remove break file rmtree ', 'tfidf_method': 'symlink config_modules finalize main remove exists is_broken_symlink remove_file rmtree ', 'lda_word': ' remove,module,config,finalize,main,', 'lda_method': ' symlink,config_modules,main,finalize,remove,', 'lsi_word': ' symlink,remove,finalize,module,config,', 'lsi_method': ' config_modules,symlink,main,finalize,remove,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; symlink(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Test whether a path exists. Remove the given file. Remove the resource file. Checks that the given path is exist.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '134': 'exists(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1655, 'parent': 1752, 'tfidf_word': 'restore exist get file break fail relpath rmtree symlink remove ', 'tfidf_method': 'restore_file remove exists fail is_broken_symlink relpath remove_file rmtree get get ', 'lda_word': ' module,finalize,main,restore,config,', 'lda_method': ' finalize,remove,restore_file,config_modules,main,', 'lsi_word': ' file,module,finalize,main,config,', 'lsi_method': ' finalize,main,config_modules,restore_file,remove,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Restore the modified project files. Checks that the given path is exist. Remove the given file.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '147': 'relpath(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1271, 'parent': 1631, 'tfidf_word': 'copy execute file init initialize module restore exist dirname mkdir ', 'tfidf_method': 'copy execute restore_file config_modules initialize __init__ exists dirname mkdir ', 'lda_word': ' initialize,module,restore,config,dirname,', 'lda_method': ' execute,config_modules,restore_file,init,initialize,', 'lsi_word': ' copy,file,restore,module,execute,', 'lsi_method': ' execute,copy,initialize,init,restore_file,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Execute the given test. Public method to initialize the project.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1467, 'parent': 1631, 'tfidf_word': 'print command get fail log merge dicts basename relpath abspath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' file,init,module,config,execute,', 'lda_method': ' exec_shell,initialize,execute,restore_file,init,', 'lsi_word': ' file,execute,config,module,restore,', 'lsi_method': ' config_modules,initialize,execute,init,restore_file,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1459, 'parent': 1753, 'tfidf_word': 'config init initialize module exist symlink remove break file rmtree ', 'tfidf_method': 'symlink config_modules initialize __init__ remove exists is_broken_symlink remove_file rmtree ', 'lda_word': ' initialize,symlink,module,init,remove,', 'lda_method': ' exist,symlink,config_modules,init,initialize,', 'lsi_word': ' symlink,remove,module,init,initialize,', 'lsi_method': ' initialize,symlink,init,config_modules,remove,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; symlink(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Test whether a path exists. Remove the given file. Remove the resource file. Checks that the given path is exist.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '134': 'exists(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1656, 'parent': 1753, 'tfidf_word': 'restore exist get file break fail relpath rmtree symlink remove ', 'tfidf_method': 'restore_file remove exists fail is_broken_symlink relpath remove_file rmtree get get ', 'lda_word': ' get,initialize,module,config,init,', 'lda_method': ' initialize,init,config_modules,restore_file,remove,', 'lsi_word': ' file,initialize,init,module,config,', 'lsi_method': ' init,config_modules,initialize,restore_file,remove,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Restore the modified project files. Remove the resource file. Checks that the given path is exist. Remove the given file. Remove directory.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '147': 'relpath(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1588, 'parent': 1658, 'tfidf_word': 'print fail get relpath builtin log merge basename dicts abspath ', 'tfidf_method': 'print_command fail get log abspath basename exec_builtin merge_dicts relpath get ', 'lda_word': ' execute,initialize,init,fetch,module,', 'lda_method': ' fetch_modules,execute,initialize,init,exec_shell,', 'lsi_word': ' init,initialize,module,fetch,execute,', 'lsi_method': ' execute,fetch_modules,init,initialize,exec_shell,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Execute the built-in command.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '140': 'merge_dicts(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 1610, 'parent': 1658, 'tfidf_word': 'fetch init initialize module copy execute exist dirname mkdir ', 'tfidf_method': 'fetch_modules initialize __init__ copy execute exists dirname mkdir ', 'lda_word': ' init,initialize,module,fetch,copy,', 'lda_method': ' init,initialize,exist,execute,fetch_modules,', 'lsi_word': ' module,initialize,fetch,init,execute,', 'lsi_method': ' fetch_modules,initialize,init,execute,copy,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': '', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '134': 'exists(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1582, 'parent': 1683, 'tfidf_word': 'init initialize module fail get patch exist ', 'tfidf_method': 'initialize patch_modules __init__ fail patch exists get get ', 'lda_word': ' patch,initialize,init,module,get,', 'lda_method': ' initialize,init,patch_modules,patch,fail,', 'lsi_word': ' patch,module,init,initialize,fail,', 'lsi_method': ' initialize,init,patch_modules,fail,patch,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)'}}, {'key': 1632, 'parent': 1683, 'tfidf_word': 'fail exist log merge mkdir dirname dicts basename relpath abspath ', 'tfidf_method': 'exists get relpath merge_dicts dirname basename abspath log mkdir get ', 'lda_word': ' patch,init,execute,initialize,module,', 'lda_method': ' patch,initialize,execute,init,patch_modules,', 'lsi_word': ' patch,module,initialize,execute,init,', 'lsi_method': ' patch,execute,patch_modules,init,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to initialize the project. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 968, 'parent': 1261, 'tfidf_word': 'config build exec execute command log relpath basename abspath resolve ', 'tfidf_method': 'execute_config_command print_command create_testing_environment main init_modules build log abspath basename relpath ', 'lda_word': ' resolve,command,execute,init,testing,', 'lda_method': ' exec_shell,main,resolve_symbol,print_command,resolve_string,', 'lsi_word': ' resolve,command,execute,create,testing,', 'lsi_method': ' print_command,exec_shell,resolve,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Return the absolute path. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1114, 'parent': 1261, 'tfidf_word': 'testing exec environment create config command fail get execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command create_testing_environment main init_modules build fail get get ', 'lda_word': ' resolve,execute,command,symbol,config,', 'lda_method': ' resolve_string,main,exec_shell,init_modules,resolve_symbol,', 'lsi_word': ' resolve,execute,config,environment,module,', 'lsi_method': ' main,create_testing_environment,init_modules,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Execute the shell command. Execute all the init commands that the modules define.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1115, 'parent': 1335, 'tfidf_word': 'create copy config command environment exist execute dirname mkdir resolve ', 'tfidf_method': 'copy execute execute_config_command create_testing_environment main init_modules build exists dirname mkdir ', 'lda_word': ' resolve,execute,module,build,symbol,', 'lda_method': ' resolve_string,init_modules,resolve_symbol,create_testing_environment,execute,', 'lsi_word': ' resolve,execute,main,string,module,', 'lsi_method': ' build,create_testing_environment,resolve,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Load the resource infromation that all modules define. Execute all the init commands that the modules define.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1162, 'parent': 1335, 'tfidf_word': 'environment init main merge module string symbol testing execute resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol execute_config_command merge_dicts create_testing_environment main init_modules build execute ', 'lda_word': ' resolve,execute,config,string,symbol,', 'lda_method': ' main,build,resolve_symbol,init_modules,merge_dicts,', 'lsi_word': ' resolve,execute,dicts,module,config,', 'lsi_method': ' build,merge_dicts,create_testing_environment,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 981, 'parent': 1262, 'tfidf_word': 'build file execute config command log relpath basename abspath resolve ', 'tfidf_method': 'execute_config_command print_command read_config_file flash init_modules build log abspath basename relpath ', 'lda_word': ' resolve,config,command,execute,module,', 'lda_method': ' resolve_string,flash,build,resolve_symbol,print_command,', 'lsi_word': ' resolve,execute,config,command,exec,', 'lsi_method': ' init_modules,resolve_symbol,resolve_string,resolve,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Run the command defined in the build.config file. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1118, 'parent': 1262, 'tfidf_word': 'module read shell string symbol fail get config execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command read_config_file flash init_modules build fail get get ', 'lda_word': ' resolve,config,module,build,execute,', 'lda_method': ' resolve,execute_config_command,init_modules,flash,build,', 'lsi_word': ' resolve,execute,config,file,read,', 'lsi_method': ' init_modules,flash,resolve_string,resolve,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Execute the shell command. Run the command defined in the build.config file.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1119, 'parent': 1336, 'tfidf_word': 'module read string symbol exist config execute dirname mkdir resolve ', 'tfidf_method': 'copy execute execute_config_command read_config_file flash init_modules build exists dirname mkdir ', 'lda_word': ' resolve,config,execute,file,command,', 'lda_method': ' execute_config_command,execute,copy,resolve_string,build,', 'lsi_word': ' resolve,execute,config,build,command,', 'lsi_method': ' build,copy,execute,resolve,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Run the command defined in the build.config file. Execute all the init commands that the modules define.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1164, 'parent': 1336, 'tfidf_word': 'flash init merge module read string symbol config execute resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol execute_config_command merge_dicts read_config_file flash init_modules build execute ', 'lda_word': ' resolve,config,flash,file,command,', 'lda_method': ' merge_dicts,read_config_file,init_modules,resolve,execute_config_command,', 'lsi_word': ' resolve,config,execute,build,dicts,', 'lsi_method': ' init_modules,flash,read_config_file,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Run the command defined in the build.config file.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1166, 'parent': 1435, 'tfidf_word': 'environment create config command builtin exec init execute build resolve ', 'tfidf_method': 'resolve_symbol exec_builtin execute execute_config_command create_testing_environment main build get build_modules init_modules ', 'lda_word': ' resolve,execute,testing,module,config,', 'lda_method': ' create_testing_environment,main,resolve_string,resolve,get,', 'lsi_word': ' resolve,execute,build,builtin,get,', 'lsi_method': ' resolve_symbol,resolve,main,resolve_string,fail,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Execute the built-in command. Run the command defined in the build.config file.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)'}}, {'key': 1169, 'parent': 1435, 'tfidf_word': 'get module read string symbol init build config execute resolve ', 'tfidf_method': 'resolve_symbol exec_builtin execute execute_config_command read_config_file flash build get build_modules init_modules ', 'lda_word': ' resolve,config,execute,build,symbol,', 'lda_method': ' init_modules,resolve,execute_config_command,build,flash,', 'lsi_word': ' resolve,config,execute,build,flash,', 'lsi_method': ' resolve_symbol,execute_config_command,read_config_file,get,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Run the command defined in the build.config file. Execute all the init commands that the modules define.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '78': 'init_modules(builder.py)'}}, {'key': 1126, 'parent': 1464, 'tfidf_word': 'main testing file environment config flash read create build resolve ', 'tfidf_method': 'execute build calculate_section_sizes create_build_info read_objects_from_libs get read_config_file flash create_testing_environment main ', 'lda_word': ' resolve,build,create,read,object,', 'lda_method': ' get,exec_builtin,calculate_section_sizes,read_objects_from_libs,execute,', 'lsi_word': ' resolve,build,create,read,builtin,', 'lsi_method': ' fail,exec_builtin,resolve_string,calculate_section_sizes,read_objects_from_libs,', 'spm_method': '  &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Read all the names of the object files that are.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'flasher.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1167, 'parent': 1464, 'tfidf_word': 'read main testing flash environment config create info build resolve ', 'tfidf_method': 'exec_builtin execute last_commit_info build create_build_info get read_config_file flash create_testing_environment main ', 'lda_word': ' resolve,build,info,exec,create,', 'lda_method': ' create_build_info,resolve_string,execute,resolve_symbol,build,', 'lsi_word': ' resolve,build,info,create,symbol,', 'lsi_method': ' fail,execute,last_commit_info,create_build_info,resolve,', 'spm_method': '  &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_builtin(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'flasher.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1259, 'parent': 1574, 'tfidf_word': 'build command execute get fail relpath basename log abspath resolve ', 'tfidf_method': 'build execute_config_command print_command fail get basename abspath log relpath get ', 'lda_word': ' resolve,execute,build,command,environment,', 'lda_method': ' resolve,resolve_symbol,main,build,build_modules,', 'lsi_word': ' resolve,execute,build,command,module,', 'lsi_method': ' build,execute_config_command,build_modules,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Helper function to print commands. Run the command defined in the build.config file.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1482, 'parent': 1574, 'tfidf_word': 'build get merge dicts exist execute mkdir dirname fail resolve ', 'tfidf_method': 'execute_config_command execute copy exists merge_dicts fail mkdir dirname get get ', 'lda_word': ' build,resolve,testing,execute,module,', 'lda_method': ' main,create_testing_environment,build,resolve,build_modules,', 'lsi_word': ' resolve,build,execute,string,module,', 'lsi_method': ' main,resolve_symbol,resolve,resolve_string,build_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py', 'utils.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1260, 'parent': 1575, 'tfidf_word': 'command build execute fail get log relpath basename abspath resolve ', 'tfidf_method': 'build execute_config_command print_command fail relpath abspath get log basename get ', 'lda_word': ' resolve,command,execute,build,config,', 'lda_method': ' build,read_config_file,flash,resolve,execute,', 'lsi_word': ' resolve,build,config,execute,command,', 'lsi_method': ' read_config_file,resolve_string,resolve,resolve_symbol,exec_shell,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Run the command defined in the build.config file. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1483, 'parent': 1575, 'tfidf_word': 'build exist dicts get merge execute fail mkdir dirname resolve ', 'tfidf_method': 'execute_config_command execute copy exists merge_dicts get fail dirname mkdir get ', 'lda_word': ' build,resolve,config,execute,mkdir,', 'lda_method': ' copy,flash,exist,execute,build_modules,', 'lsi_word': ' resolve,build,config,execute,file,', 'lsi_method': ' build,read_config_file,resolve_symbol,resolve_string,build_modules,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Run the command defined in the build.config file. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 253, 'parent': 1355, 'tfidf_word': 'EP: 253, Name: main &rarr; create_testing_environment &rarr; build &rarr; save_artifacts &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1201, 'parent': 1355, 'tfidf_word': 'artifact build copy create environment main save testing dirname exist ', 'tfidf_method': 'copy create_testing_environment main save_artifacts build dirname exists ', 'lda_word': ' artifact,save,build,testing,create,', 'lda_method': ' build,copy,main,save_artifacts,create_testing_environment,', 'lsi_word': ' artifact,environment,create,main,testing,', 'lsi_method': ' build,copy,main,save_artifacts,create_testing_environment,', 'spm_method': ' ', 'text_summary': 'Public method to build the module by the given build_info object. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1171, 'parent': 1589, 'tfidf_word': 'environment main save string symbol testing exist dirname mkdir resolve ', 'tfidf_method': 'resolve_string resolve_symbol copy create_testing_environment main save_artifacts build exists dirname mkdir ', 'lda_word': ' resolve,environment,main,string,artifact,', 'lda_method': ' resolve,build,save_artifacts,resolve_string,copy,', 'lsi_word': ' resolve,testing,create,save,string,', 'lsi_method': ' resolve_string,resolve,main,save_artifacts,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Load the resource infromation that all modules define. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1176, 'parent': 1589, 'tfidf_word': 'file flash read save string symbol exist dirname mkdir resolve ', 'tfidf_method': 'resolve_string resolve_symbol copy read_config_file flash save_artifacts build exists dirname mkdir ', 'lda_word': ' resolve,save,flash,build,exist,', 'lda_method': ' build,flash,save_artifacts,resolve_symbol,copy,', 'lsi_word': ' resolve,artifact,build,read,string,', 'lsi_method': ' build,resolve_string,save_artifacts,resolve_symbol,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1368, 'parent': 1663, 'tfidf_word': 'environment main string symbol testing get abspath fail join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main fail abspath join get get ', 'lda_word': ' resolve,testing,string,create,main,', 'lda_method': ' create_testing_environment,resolve_symbol,resolve_string,main,resolve,', 'lsi_word': ' resolve,main,environment,string,symbol,', 'lsi_method': ' resolve_string,resolve_symbol,resolve,create_testing_environment,main,', 'spm_method': ' ', 'text_summary': 'Resolve the given symbol. Join one or more path components intelligently. Return the absolute path.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1579, 'parent': 1663, 'tfidf_word': 'fail exist resolve exec exception command join timeout file read ', 'tfidf_method': 'exists get open read_until open exec_command join TimeoutException open get ', 'lda_word': ' resolve,read,build,symbol,environment,', 'lda_method': ' join,create_testing_environment,resolve_string,read_modules,resolve_symbol,', 'lsi_word': ' resolve,read,build,main,string,', 'lsi_method': ' resolve_string,read_modules,resolve,main,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 11, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)'}}, {'key': 1491, 'parent': 1677, 'tfidf_word': 'flash environment data config calculate main create build file resolve ', 'tfidf_method': 'open build create_build_info read_config_file write_json_file flash create_testing_environment main load_map_data calculate_section_sizes ', 'lda_word': ' resolve,build,create,string,open,', 'lda_method': ' load_map_data,calculate_section_sizes,resolve,build,resolve_string,', 'lsi_word': ' resolve,build,create,timeout,symbol,', 'lsi_method': ' open,timeoutexception,resolve_symbol,resolve,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Load the resource infromation that all modules define. Write binary size and commit information into a file. Write a JSON file from the given data. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'serialcom.py', 'flasher.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '155': 'write_json_file(utils.py)'}}, {'key': 1603, 'parent': 1677, 'tfidf_word': 'dirname get hoist mkdir memory line fill entry append section ', 'tfidf_method': 'append mkdir get_memory_map_lines hoist_section dirname current_date try_match_entry try_match_fill try_match_section try_match_symbol ', 'lda_word': ' resolve,build,create,symbol,testing,', 'lda_method': ' resolve_string,build,resolve,resolve_symbol,calculate_section_sizes,', 'lsi_word': ' resolve,build,create,section,symbol,', 'lsi_method': ' main,create_testing_environment,create_build_info,resolve_string,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(telnetcom.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write a JSON file from the given data. Return the sizes of the main sections.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 17, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '87': 'load_map_data(lumpy.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1244, 'parent': 1604, 'tfidf_word': 'config open file read build exist dirname mkdir fail resolve ', 'tfidf_method': 'flash build create_build_info fail dirname exists mkdir open read_until open ', 'lda_word': ' resolve,file,build,config,symbol,', 'lda_method': ' resolve_symbol,resolve,flash,create_build_info,read_config_file,', 'lsi_word': ' resolve,build,file,read,create,', 'lsi_method': ' build,create_build_info,write_json_file,resolve_symbol,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write a JSON file from the given data. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1461, 'parent': 1604, 'tfidf_word': 'append get fill fail exist entry date current line hoist ', 'tfidf_method': 'try_match_entry fail get_memory_map_lines open open append exists current_date hoist_section read_until ', 'lda_word': ' resolve,section,flash,build,read,', 'lda_method': ' create_build_info,resolve_string,build,resolve,flash,', 'lsi_word': ' resolve,build,section,symbol,read,', 'lsi_method': ' build,resolve,read_config_file,resolve_string,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 9, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 13, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1348, 'parent': 1651, 'tfidf_word': 'module string symbol exist get build read fail join resolve ', 'tfidf_method': 'read_config_file flash build read_modules should_build exists fail join get get ', 'lda_word': ' resolve,read,build,symbol,config,', 'lda_method': ' build,read_config_file,resolve,read_modules,resolve_string,', 'lsi_word': ' resolve,read,build,module,config,', 'lsi_method': ' build,resolve_symbol,resolve_string,resolve,read_modules,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Join one or more path components intelligently. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1369, 'parent': 1651, 'tfidf_word': 'file flash read string symbol get abspath fail join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash fail abspath join get get ', 'lda_word': ' resolve,string,file,symbol,read,', 'lda_method': ' get,read_config_file,resolve_string,flash,resolve,', 'lsi_word': ' resolve,flash,symbol,file,read,', 'lsi_method': ' flash,resolve_string,resolve_symbol,resolve,read_config_file,', 'spm_method': ' ', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Join one or more path components intelligently. Return the absolute path.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1441, 'parent': 1686, 'tfidf_word': 'exist resolve mkdir log dicts dirname relpath basename merge abspath ', 'tfidf_method': 'exists relpath get merge_dicts dirname basename abspath log mkdir get ', 'lda_word': ' resolve,create,build,read,size,', 'lda_method': ' resolve_symbol,execute,create_build_info,resolve,resolve_string,', 'lsi_word': ' resolve,create,build,execute,info,', 'lsi_method': ' resolve_symbol,build,calculate_section_sizes,create_build_info,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1442, 'parent': 1686, 'tfidf_word': 'get resolve basename merge mkdir dirname log dicts relpath abspath ', 'tfidf_method': 'exists merge_dicts relpath dirname get basename abspath log mkdir get ', 'lda_word': ' resolve,build,symbol,read,info,', 'lda_method': ' execute,build,flash,read_objects_from_libs,resolve_symbol,', 'lsi_word': ' resolve,read,build,file,symbol,', 'lsi_method': ' build,calculate_section_sizes,resolve_symbol,read_config_file,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1462, 'parent': 1746, 'tfidf_word': 'get resolve relpath basename dicts merge log dirname mkdir abspath ', 'tfidf_method': 'exists mkdir dirname basename relpath abspath get log merge_dicts get ', 'lda_word': ' resolve,info,build,file,last,', 'lda_method': ' create_build_info,read_config_file,build,resolve,flash,', 'lsi_word': ' resolve,info,build,commit,read,', 'lsi_method': ' flash,execute,last_commit_info,read_config_file,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Print a message with the given color.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1627, 'parent': 1746, 'tfidf_word': 'read abspath merge flash dirname dicts config basename mkdir file ', 'tfidf_method': 'mkdir dirname read_config_file relpath flash get basename abspath merge_dicts get ', 'lda_word': ' resolve,build,info,create,execute,', 'lda_method': ' create_testing_environment,main,resolve,resolve_string,build,', 'lsi_word': ' resolve,info,build,create,last,', 'lsi_method': ' last_commit_info,resolve_symbol,resolve_string,create_build_info,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Print a message with the given color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'flasher.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 13, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 192, 'parent': 1248, 'tfidf_word': 'EP: 192, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1085, 'parent': 1248, 'tfidf_word': 'environment execute last main testing dirname exist build create info ', 'tfidf_method': 'copy execute last_commit_info create_testing_environment main build create_build_info dirname exists ', 'lda_word': ' create,build,environment,info,copy,', 'lda_method': ' execute,create_testing_environment,create_build_info,last_commit_info,copy,', 'lsi_word': ' build,create,info,execute,testing,', 'lsi_method': ' build,create_testing_environment,execute,main,last_commit_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Get last commit information about the submodules. Public method to build the module by the given build_info object.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1039, 'parent': 1434, 'tfidf_word': 'commit command environment create info build log basename relpath abspath ', 'tfidf_method': 'last_commit_info print_command create_testing_environment main build create_build_info log abspath basename relpath ', 'lda_word': ' info,build,testing,main,last,', 'lda_method': ' create_build_info,create_testing_environment,execute,abspath,main,', 'lsi_word': ' build,create,info,command,execute,', 'lsi_method': ' create_testing_environment,last_commit_info,exec_shell,main,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1346, 'parent': 1434, 'tfidf_word': 'testing exec shell fail get build create info dicts merge ', 'tfidf_method': 'last_commit_info create_testing_environment main build create_build_info exec_shell fail merge_dicts get get ', 'lda_word': ' info,build,create,main,commit,', 'lda_method': ' main,create_testing_environment,execute,last_commit_info,create_build_info,', 'lsi_word': ' create,info,build,testing,last,', 'lsi_method': ' main,build,create_testing_environment,execute,last_commit_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Get last commit information about the submodules. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1174, 'parent': 1573, 'tfidf_word': 'testing execute environment copy calculate exist create build dirname mkdir ', 'tfidf_method': 'execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs exists dirname mkdir ', 'lda_word': ' build,create,dirname,libs,object,', 'lda_method': ' read_objects_from_libs,execute,create_build_info,exist,create_testing_environment,', 'lsi_word': ' build,create,calculate,copy,environment,', 'lsi_method': ' build,calculate_section_sizes,read_objects_from_libs,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Public method to build the module by the given build_info object. Read all the names of the object files that are.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1371, 'parent': 1573, 'tfidf_word': 'create build fail get dicts log merge relpath basename abspath ', 'tfidf_method': 'exec_shell print_command fail relpath merge_dicts basename abspath log get get ', 'lda_word': ' build,create,testing,object,execute,', 'lda_method': ' build,create_testing_environment,calculate_section_sizes,main,create_build_info,', 'lsi_word': ' create,build,testing,info,size,', 'lsi_method': ' execute,create_testing_environment,main,read_objects_from_libs,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Helper function to print commands. Public method to build the module by the given build_info object. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1583, 'parent': 1687, 'tfidf_word': 'read append hoist get fill fail exist entry line join ', 'tfidf_method': 'join exists get_memory_map_lines hoist_section try_match_entry try_match_fill try_match_section try_match_symbol open fail ', 'lda_word': ' create,build,section,environment,map,', 'lda_method': ' calculate_section_sizes,build,create_build_info,main,create_testing_environment,', 'lsi_word': ' create,build,section,testing,calculate,', 'lsi_method': ' create_build_info,create_testing_environment,main,calculate_section_sizes,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Checks that the given path is exist. Public method to build the module by the given build_info object.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1648, 'parent': 1687, 'tfidf_word': 'dirname date last join current fail exist data log load ', 'tfidf_method': 'open read_until open calculate_section_sizes mkdir last_commit_info join exists current_date fail ', 'lda_word': ' build,create,info,environment,testing,', 'lda_method': ' build,exec_command,create_build_info,timeoutexception,create_testing_environment,', 'lsi_word': ' build,create,info,environment,testing,', 'lsi_method': ' build,main,create_build_info,create_testing_environment,write_json_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Write binary size and commit information into a file. Write a JSON file from the given data. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'serialcom.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1372, 'parent': 1611, 'tfidf_word': 'print execute command build get fail log basename relpath abspath ', 'tfidf_method': 'build_modules build print_command fail log abspath basename relpath get get ', 'lda_word': ' command,build,execute,exec,environment,', 'lda_method': ' build_modules,exec_shell,build,create_testing_environment,execute,', 'lsi_word': ' build,execute,command,config,testing,', 'lsi_method': ' build,execute,create_testing_environment,main,exec_shell,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Run the command defined in the build.config file. Helper function to print commands. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1450, 'parent': 1611, 'tfidf_word': 'module testing copy dicts exist merge build execute dirname mkdir ', 'tfidf_method': 'create_testing_environment main build_modules build execute copy exists merge_dicts dirname mkdir ', 'lda_word': ' build,execute,testing,main,command,', 'lda_method': ' exist,build_modules,create_testing_environment,main,execute,', 'lsi_word': ' build,execute,main,environment,command,', 'lsi_method': ' execute_config_command,build_modules,main,create_testing_environment,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Load the resource infromation that all modules define. Public method to build the module by the given build_info object. Build all the modules and save the artifacts.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1381, 'parent': 1652, 'tfidf_word': 'create environment get main module testing fail build ', 'tfidf_method': 'create_testing_environment main build_modules build fail get get ', 'lda_word': ' build,main,testing,create,environment,', 'lda_method': ' build_modules,get,main,build,create_testing_environment,', 'lsi_word': ' build,main,environment,module,get,', 'lsi_method': ' build_modules,create_testing_environment,main,get,build,', 'spm_method': ' ', 'text_summary': 'Build all the modules and save the artifacts.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1514, 'parent': 1652, 'tfidf_word': 'exist relpath basename dicts merge dirname log fail mkdir abspath ', 'tfidf_method': 'exists basename merge_dicts mkdir relpath get abspath log fail dirname ', 'lda_word': ' build,get,environment,main,mount,', 'lda_method': ' main,execute,mount_fs_writable,create_testing_environment,get,', 'lsi_word': ' build,get,execute,environment,mount,', 'lsi_method': ' get,build,build_modules,create_testing_environment,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1373, 'parent': 1612, 'tfidf_word': 'main print command execute fail get basename relpath log abspath ', 'tfidf_method': 'init_modules build print_command fail log abspath basename relpath get get ', 'lda_word': ' execute,command,testing,build,shell,', 'lda_method': ' exec_shell,execute,create_testing_environment,execute_config_command,main,', 'lsi_word': ' execute,command,testing,environment,module,', 'lsi_method': ' execute_config_command,main,exec_shell,init_modules,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1451, 'parent': 1612, 'tfidf_word': 'main module testing copy dicts exist merge execute dirname mkdir ', 'tfidf_method': 'create_testing_environment main init_modules build execute copy exists merge_dicts dirname mkdir ', 'lda_word': ' execute,build,module,config,merge,', 'lda_method': ' merge_dicts,execute_config_command,main,init_modules,build,', 'lsi_word': ' execute,environment,main,init,command,', 'lsi_method': ' init_modules,create_testing_environment,main,execute_config_command,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Execute the given test. Public method to build the module by the given build_info object.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1614, 'parent': 1774, 'tfidf_word': 'create environment main testing dict encode join namespace objdict object ', 'tfidf_method': 'create_testing_environment main join ObjectDict encode_as_objdict namespace_as_dict ', 'lda_word': ' create,main,environment,testing,join,', 'lda_method': ' main,create_testing_environment,objectdict,namespace_as_dict,join,', 'lsi_word': ' environment,main,testing,create,dict,', 'lsi_method': ' create_testing_environment,main,encode_as_objdict,objectdict,namespace_as_dict,', 'spm_method': ' ', 'text_summary': 'Convert dictionary to object. Load the resource infromation that all modules define.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '68': 'encode_as_objdict(__init__.py)', '66': 'ObjectDict(__init__.py)', '137': 'join(utils.py)', '69': 'namespace_as_dict(__init__.py)'}}, {'key': 1666, 'parent': 1774, 'tfidf_word': 'exist fail get timeout exec exception command join file read ', 'tfidf_method': 'exists get open read_until open exec_command join TimeoutException open get ', 'lda_word': ' read,build,testing,main,create,', 'lda_method': ' create_testing_environment,main,read_modules,build,should_build,', 'lsi_word': ' read,build,file,testing,module,', 'lsi_method': ' main,read_modules,create_testing_environment,build,read_json_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Read JSON based configuration file. Read JSON file. Checks that the given path is exist. Join one or more path components intelligently. Public method to build the module by the given build_info object.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '64': 'get(coverage_client.py)'}}, {'key': 1345, 'parent': 1637, 'tfidf_word': 'f mkdir mount writable environment execute get flash login upload ', 'tfidf_method': 'copy execute exists mkdir get get_environment flash upload execute login ', 'lda_word': ' execute,get,environment,mount,exist,', 'lda_method': ' execute,copy,mount_fs_writable,exist,mkdir,', 'lsi_word': ' get,execute,copy,writable,mount,', 'lsi_method': ' execute,get,mkdir,exist,mount_fs_writable,', 'spm_method': '  &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Login to the device. Execute the given test. Flash the device.', 'files_count': 5, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'testresult.py', 'artik053.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 1590, 'parent': 1637, 'tfidf_word': 'mount writable environment dirname exist execute get flash login upload ', 'tfidf_method': 'copy execute get get_environment dirname exists flash upload execute login ', 'lda_word': ' execute,get,writable,mount,copy,', 'lda_method': ' execute,get,copy,get_environment,mount_fs_writable,', 'lsi_word': ' get,execute,mount,writable,copy,', 'lsi_method': ' execute,mount_fs_writable,get,copy,get_environment,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; dirname(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Execute the given test. Flash the device.', 'files_count': 5, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'artik053.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '179': 'upload(testresult.py)'}}, {'key': 1498, 'parent': 1770, 'tfidf_word': 'command print get dicts fail log merge basename relpath abspath ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' get,mount,writable,execute,flash,', 'lda_method': ' get,mount_fs_writable,execute,flash,exec_shell,', 'lsi_word': ' get,flash,writable,execute,mount,', 'lsi_method': ' get,flash,mount_fs_writable,execute,exec_shell,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1681, 'parent': 1770, 'tfidf_word': 'login execute relpath abspath log fail dicts basename merge get ', 'tfidf_method': 'upload execute login fail log abspath basename merge_dicts relpath get ', 'lda_word': ' get,execute,mount,environment,writable,', 'lda_method': ' mount_fs_writable,get,execute,get_environment,upload,', 'lsi_word': ' get,execute,mount,environment,writable,', 'lsi_method': ' execute,get,mount_fs_writable,get_environment,exec_shell,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) &rarr; relpath(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py', 'testresult.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '179': 'upload(testresult.py)'}}, {'key': 1584, 'parent': 1786, 'tfidf_word': 'exist relpath mkdir abspath log dirname dicts basename merge fail ', 'tfidf_method': 'exists dirname basename abspath merge_dicts mkdir relpath log fail get ', 'lda_word': ' command,print,exec,shell,main,', 'lda_method': ' get,finalize,mount_fs_writable,execute,config_modules,', 'lsi_word': ' get,finalize,writable,module,mount,', 'lsi_method': ' get,mount_fs_writable,finalize,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Remount the file system as writable. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1585, 'parent': 1786, 'tfidf_word': 'exist dirname fail log dicts merge mkdir basename relpath abspath ', 'tfidf_method': 'exists dirname basename abspath merge_dicts mkdir relpath log fail get ', 'lda_word': ' writable,command,print,execute,patch,', 'lda_method': ' get,patch_modules,mount_fs_writable,main,execute,', 'lsi_word': ' get,execute,mount,module,patch,', 'lsi_method': ' get,execute,mount_fs_writable,finalize,patch_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1586, 'parent': 1787, 'tfidf_word': 'exist relpath mkdir abspath log dirname dicts basename merge fail ', 'tfidf_method': 'exists dirname basename abspath merge_dicts mkdir relpath log fail get ', 'lda_word': ' get,config,execute,initialize,module,', 'lda_method': ' init,config_modules,get,mount_fs_writable,execute,', 'lsi_word': ' get,mount,execute,initialize,init,', 'lsi_method': ' get,initialize,init,execute,mount_fs_writable,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1587, 'parent': 1787, 'tfidf_word': 'exist log merge mkdir dirname dicts basename relpath fail abspath ', 'tfidf_method': 'exists dirname basename abspath merge_dicts mkdir relpath log fail get ', 'lda_word': ' get,initialize,patch,mount,writable,', 'lda_method': ' patch_modules,mount_fs_writable,execute,init,initialize,', 'lsi_word': ' get,init,execute,module,mount,', 'lsi_method': ' get,init,execute,mount_fs_writable,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1156, 'parent': 1487, 'tfidf_word': 'main module mount read testing writable exist build dirname mkdir ', 'tfidf_method': 'execute create_testing_environment main build read_modules should_build get exists dirname mkdir ', 'lda_word': ' build,exist,mount,environment,main,', 'lda_method': ' copy,should_build,main,create_testing_environment,read_modules,', 'lsi_word': ' build,copy,mount,testing,read,', 'lsi_method': ' build,main,should_build,read_modules,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1339, 'parent': 1487, 'tfidf_word': 'print get build log fail dicts relpath basename merge abspath ', 'tfidf_method': 'execute exec_shell print_command merge_dicts relpath get basename abspath log fail ', 'lda_word': ' fail,build,shell,exec,read,', 'lda_method': ' relpath,print_command,exec_shell,should_build,mount_fs_writable,', 'lsi_word': ' build,get,read,testing,main,', 'lsi_method': ' get,build,create_testing_environment,execute,should_build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Helper function to print commands. Public method to build the module by the given build_info object. Execute the given test. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1417, 'parent': 1667, 'tfidf_word': 'resolve merge mkdir fail dirname dicts relpath basename log abspath ', 'tfidf_method': 'exists merge_dicts mkdir abspath relpath get dirname log fail basename ', 'lda_word': ' resolve,build,testing,writable,symbol,', 'lda_method': ' log,resolve,mount_fs_writable,read_modules,resolve_symbol,', 'lsi_word': ' resolve,build,get,read,module,', 'lsi_method': ' get,build,execute,mount_fs_writable,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Recursively loop on the given node, and resolve all the. Helper function to print commands. Return the absolute path. Resolve the given symbol. Execute the given test.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1418, 'parent': 1667, 'tfidf_word': 'resolve dirname basename relpath mkdir log fail dicts merge abspath ', 'tfidf_method': 'exists merge_dicts mkdir abspath dirname relpath get log fail basename ', 'lda_word': ' resolve,read,build,module,execute,', 'lda_method': ' get,resolve_symbol,flash,build,should_build,', 'lsi_word': ' resolve,build,read,get,symbol,', 'lsi_method': ' get,build,execute,should_build,read_modules,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Execute the given test.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1439, 'parent': 1676, 'tfidf_word': 'resolve fail merge mkdir dirname dicts relpath basename log abspath ', 'tfidf_method': 'exists fail log get abspath merge_dicts dirname basename relpath mkdir ', 'lda_word': ' build,resolve,get,execute,symbol,', 'lda_method': ' exist,mkdir,main,get,build,', 'lsi_word': ' resolve,build,get,writable,testing,', 'lsi_method': ' get,build_modules,mount_fs_writable,main,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1440, 'parent': 1676, 'tfidf_word': 'resolve merge log dicts fail relpath dirname basename mkdir abspath ', 'tfidf_method': 'exists fail get log abspath merge_dicts dirname basename relpath mkdir ', 'lda_word': ' resolve,build,flash,mount,module,', 'lda_method': ' execute,build_modules,flash,mount_fs_writable,read_config_file,', 'lsi_word': ' resolve,build,get,read,string,', 'lsi_method': ' get,build_modules,flash,resolve_string,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1617, 'parent': 1798, 'tfidf_word': 'abspath resolve merge mkdir join dirname relpath dicts basename log ', 'tfidf_method': 'abspath fail exists dirname join merge_dicts mkdir basename relpath log ', 'lda_word': ' resolve,read,symbol,module,build,', 'lda_method': ' resolve,resolve_string,execute,main,read_modules,', 'lsi_word': ' resolve,read,create,module,main,', 'lsi_method': ' create_testing_environment,read_modules,main,build,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol. Print a message with the given color.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 1757, 'parent': 1798, 'tfidf_word': 'resolve basename relpath fail merge dicts log dirname mkdir abspath ', 'tfidf_method': 'exists get relpath log dirname basename abspath fail mkdir merge_dicts ', 'lda_word': ' resolve,config,file,string,flash,', 'lda_method': ' print_command,relpath,exec_shell,execute,resolve,', 'lsi_word': ' resolve,get,writable,string,mount,', 'lsi_method': ' get,resolve_symbol,resolve_string,resolve,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py', 'flasher.py'], 'execution_path_count': 20, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 617, 'parent': 1143, 'tfidf_word': 'EP: 617, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 700, 'parent': 1143, 'tfidf_word': 'EP: 700, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 604, 'parent': 1204, 'tfidf_word': 'EP: 604, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 687, 'parent': 1204, 'tfidf_word': 'EP: 687, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 758, 'parent': 1448, 'tfidf_word': 'EP: 758, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1447, 'parent': 1448, 'tfidf_word': 'exec fail get execute config init reset freya genromfs internet ', 'tfidf_method': 'execute get init_freya_config execute reset execute reset __init__ config_internet genromfs ', 'lda_word': ' get,builtin,fail,exec,init,', 'lda_method': ' get,exec_builtin,fail,execute,init,', 'lsi_word': ' execute,fail,get,exec,builtin,', 'lsi_method': ' execute,fail,get,exec_builtin,reset,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Create a romfs_img from the source directory that is. Execute the built-in command.', 'files_count': 6, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'stm32f4dis.py', 'testrunner.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 571, 'parent': 1480, 'tfidf_word': 'EP: 571, Name: execute &rarr; login &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 634, 'parent': 1480, 'tfidf_word': 'EP: 634, Name: execute &rarr; login &rarr; login &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 268, 'parent': 1444, 'tfidf_word': 'EP: 268, Name: main &rarr; create_testing_environment &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1380, 'parent': 1444, 'tfidf_word': 'exec file json open timeout create result testsets upload read ', 'tfidf_method': 'TimeoutException read_json_file exec_command open create_result upload read_testsets ', 'lda_word': ' read,open,file,json,command,', 'lda_method': ' exec_command,read_json_file,open,timeoutexception,read_testsets,', 'lsi_word': ' read,command,json,exception,file,', 'lsi_method': ' timeoutexception,read_json_file,open,exec_command,create_result,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'serialcom.py', 'testrunner.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 665, 'parent': 1437, 'tfidf_word': 'EP: 665, Name: iotjs_build_info &rarr; login &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1221, 'parent': 1437, 'tfidf_word': 'command exception exec login open timeout init ', 'tfidf_method': 'TimeoutException exec_command open login __init__ __init__ __init__ ', 'lda_word': ' init,exec,login,exception,command,', 'lda_method': ' init,exec_command,timeoutexception,open,login,', 'lsi_word': ' init,command,login,exec,exception,', 'lsi_method': ' init,login,open,timeoutexception,exec_command,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 6, 'files': ['rpi2.py', 'ssh_device.py', 'device_base.py', 'serialcom.py', 'utils.py', 'rpi3.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '213': 'login(device_base.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '218': '__init__(rpi3.py)'}}, {'key': 1379, 'parent': 1649, 'tfidf_word': 'exec file json open timeout write create result save upload ', 'tfidf_method': 'TimeoutException write_json_file exec_command open create_result upload save ', 'lda_word': ' exception,command,write,json,open,', 'lda_method': ' write_json_file,timeoutexception,exec_command,open,save,', 'lsi_word': ' file,exec,write,timeout,open,', 'lsi_method': ' timeoutexception,open,exec_command,write_json_file,upload,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'serialcom.py', 'testrunner.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '245': 'save(testrunner.py)'}}, {'key': 1647, 'parent': 1649, 'tfidf_word': 'info coverage parse run data init save map load login ', 'tfidf_method': 'main main run execute login execute run save __init__ load_map_data ', 'lda_word': ' open,main,exception,exec,command,', 'lda_method': ' open,exec_command,main,load_map_data,timeoutexception,', 'lsi_word': ' open,timeout,exception,exec,command,', 'lsi_method': ' timeoutexception,open,exec_command,main,login,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the given command.', 'files_count': 9, 'files': ['stm32f4dis.py', 'serial_device.py', 'serialcom.py', 'utils.py', 'artik053.py', 'testrunner.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '245': 'save(testrunner.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 527, 'parent': 1362, 'tfidf_word': 'EP: 527, Name: run &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1145, 'parent': 1362, 'tfidf_word': 'commit copy coverage exist info last mkdir run script execute ', 'tfidf_method': 'copy execute exists last_commit_info mkdir run_coverage_script execute execute ', 'lda_word': ' execute,exist,mkdir,last,commit,', 'lda_method': ' execute,copy,mkdir,last_commit_info,run_coverage_script,', 'lsi_word': ' execute,info,last,run,copy,', 'lsi_method': ' execute,exist,last_commit_info,mkdir,run_coverage_script,', 'spm_method': '  &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1218, 'parent': 1492, 'tfidf_word': 'copy coverage exist mkdir run script execute ', 'tfidf_method': 'copy execute exists mkdir run_coverage_script execute execute ', 'lda_word': ' execute,coverage,copy,run,script,', 'lda_method': ' execute,run_coverage_script,copy,mkdir,exist,', 'lsi_word': ' execute,coverage,copy,exist,run,', 'lsi_method': ' execute,exist,mkdir,run_coverage_script,copy,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1300, 'parent': 1492, 'tfidf_word': 'copy execute exist mkdir config init freya genromfs internet ', 'tfidf_method': 'copy execute exists mkdir init_freya_config __init__ config_internet genromfs ', 'lda_word': ' mkdir,exist,copy,execute,genromfs,', 'lda_method': ' exist,execute,copy,mkdir,config_internet,', 'lsi_word': ' execute,copy,mkdir,exist,config,', 'lsi_method': ' execute,mkdir,exist,copy,init_freya_config,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist. Execute the given test.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'builtins.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1313, 'parent': 1572, 'tfidf_word': 'copy coverage run script dirname exist execute ', 'tfidf_method': 'copy execute execute run_coverage_script dirname exists ', 'lda_word': ' execute,run,script,coverage,dirname,', 'lda_method': ' execute,copy,run_coverage_script,exist,dirname,', 'lsi_word': ' execute,copy,script,run,coverage,', 'lsi_method': ' execute,run_coverage_script,copy,dirname,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['artik053.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1319, 'parent': 1572, 'tfidf_word': 'copy coverage run script dirname exist execute ', 'tfidf_method': 'copy execute execute run_coverage_script dirname exists ', 'lda_word': ' execute,coverage,run,script,copy,', 'lda_method': ' execute,copy,run_coverage_script,dirname,exist,', 'lsi_word': ' execute,copy,coverage,script,run,', 'lsi_method': ' execute,copy,run_coverage_script,dirname,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['ssh_device.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1640, 'parent': 1646, 'tfidf_word': 'copy execute init config dirname exist freya ', 'tfidf_method': 'copy execute init_freya_config dirname exists __init__ ', 'lda_word': ' dirname,execute,init,copy,freya,', 'lda_method': ' copy,execute,init,dirname,exist,', 'lsi_word': ' init,copy,execute,config,freya,', 'lsi_method': ' copy,execute,exist,dirname,init,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'testrunner.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '242': '__init__(testrunner.py)'}}, {'key': 1645, 'parent': 1646, 'tfidf_word': 'copy execute config dirname exist genromfs internet ', 'tfidf_method': 'copy execute dirname exists config_internet genromfs ', 'lda_word': ' execute,copy,internet,genromfs,dirname,', 'lda_method': ' execute,copy,exist,config_internet,genromfs,', 'lsi_word': ' execute,copy,config,internet,dirname,', 'lsi_method': ' copy,execute,genromfs,exist,config_internet,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '97': 'config_internet(builtins.py)'}}, {'key': 921, 'parent': 1237, 'tfidf_word': 'EP: 921, Name: main &rarr; build_app &rarr; exec_docker &rarr; exec_command &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1236, 'parent': 1237, 'tfidf_word': 'app build docker main print basename relpath command exec ', 'tfidf_method': 'build_app exec_command exec_docker main print_command basename relpath ', 'lda_word': ' command,exec,app,print,docker,', 'lda_method': ' main,exec_command,build_app,basename,exec_docker,', 'lsi_word': ' command,exec,build,print,docker,', 'lsi_method': ' exec_command,print_command,main,exec_docker,build_app,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the given command in Docker. Return the base name of pathname path.', 'files_count': 2, 'files': ['travis_script.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '263': 'build_app(travis_script.py)', '265': 'exec_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1325, 'parent': 1755, 'tfidf_word': 'docker exec main print run command abspath basename relpath ', 'tfidf_method': 'exec_command main print_command run_docker abspath basename relpath ', 'lda_word': ' run,command,main,exec,print,', 'lda_method': ' run_docker,exec_command,main,print_command,basename,', 'lsi_word': ' command,docker,exec,print,run,', 'lsi_method': ' run_docker,print_command,main,exec_command,relpath,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['travis_script.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '269': 'run_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1754, 'parent': 1755, 'tfidf_word': 'execute command abspath basename relpath build info iotjs login main ', 'tfidf_method': 'exec_command print_command abspath basename relpath execute login iotjs_build_info execute main ', 'lda_word': ' command,exec,print,execute,basename,', 'lda_method': ' exec_command,print_command,abspath,iotjs_build_info,basename,', 'lsi_word': ' command,print,exec,execute,abspath,', 'lsi_method': ' print_command,exec_command,execute,relpath,basename,', 'spm_method': ' ', 'text_summary': 'Return the base name of pathname path. Execute the given command.', 'files_count': 5, 'files': ['artik053.py', 'travis_script.py', 'utils.py', 'stm32f4dis.py', 'device_base.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '266': 'main(travis_script.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1511, 'parent': 1758, 'tfidf_word': 'file read config environment flash main result testing testsets upload ', 'tfidf_method': 'fail read_json_file open read_config_file flash create_result upload read_testsets create_testing_environment main ', 'lda_word': ' read,file,fail,open,json,', 'lda_method': ' fail,read_json_file,open,flash,read_testsets,', 'lsi_word': ' read,file,open,json,fail,', 'lsi_method': ' open,read_json_file,fail,upload,create_result,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information. Read JSON based configuration file.', 'files_count': 8, 'files': ['flasher.py', 'utils.py', 'telnetcom.py', 'console.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 1749, 'parent': 1758, 'tfidf_word': 'json result build upload iotjs data create map load init ', 'tfidf_method': 'write_json_file upload load_map_data __init__ create_result run run main iotjs_build_info __init__ ', 'lda_word': ' fail,open,init,main,info,', 'lda_method': ' open,fail,run,parse_coverage_info,login,', 'lsi_word': ' open,fail,init,login,info,', 'lsi_method': ' fail,open,init,login,main,', 'spm_method': ' ', 'text_summary': 'Parse and create coverage information. Create a final JSON result file from the build and test information. Save the current testresults into JSON format. Write a JSON file from the given data. Main method to run IoT.js or JerryScript tests. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 12, 'files': ['device_base.py', 'telnetcom.py', 'console.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'testresult.py', 'utils.py', 'testrunner.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 1759, 'parent': 1842, 'tfidf_word': 'build iotjs flash environment data config map load file init ', 'tfidf_method': 'main run read_config_file __init__ load_map_data iotjs_build_info flash run read_testsets __init__ ', 'lda_word': ' read,open,main,init,info,', 'lda_method': ' read_until,open,upload,create_result,write_json_file,', 'lsi_word': ' read,open,file,json,create,', 'lsi_method': ' read_until,open,init,read_json_file,main,', 'spm_method': ' ', 'text_summary': 'Flash the device. Read JSON based configuration file. Parse and create coverage information. Read JSON file. Read all the tests into dictionary. Create a final JSON result file from the build and test information. Login to the device. Save the current testresults into JSON format. Write a JSON file from the given data.', 'files_count': 14, 'files': ['flasher.py', 'utils.py', 'sshcom.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py', 'device_base.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 1840, 'parent': 1842, 'tfidf_word': 'testset exist get send init section remove read environment device ', 'tfidf_method': 'read_until parse_arguments RPi2Device putc is_executable RPi3Device basename parse_arguments JerryFunction report_timeout ', 'lda_word': ' execute,run,coverage,log,close,', 'lda_method': ' main,init,parse_to_sections,process_messages,append,', 'lsi_word': ' init,read,run,fail,test,', 'lsi_method': ' init,fail,main,check_args,open,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Test whether a path exists. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['coverage_client.py', 'testresult.py', 'testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'reporter.py', 'artik053.py', 'flasher.py', 'builtins.py', 'stm32f4dis.py', 'serial_device.py', 'ssh_device.py', 'device_base.py', 'lumpy.py', 'tester.py', 'rpi2.py', 'rpi3.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'simpletester.py', 'twisted_server.py', 'pseudo_terminal.py'], 'execution_path_count': 205, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '169': 'flash(flasher.py)', '99': 'get(builtins.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 524, 'parent': 1207, 'tfidf_word': 'EP: 524, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1206, 'parent': 1207, 'tfidf_word': 'exec execute info last print run shell abspath basename log ', 'tfidf_method': 'exec_shell execute last_commit_info print_command run log abspath basename ', 'lda_word': ' commit,exec,execute,command,last,', 'lda_method': ' exec_shell,last_commit_info,log,print_command,run,', 'lsi_word': ' commit,execute,info,last,print,', 'lsi_method': ' run,last_commit_info,execute,print_command,exec_shell,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 520, 'parent': 1302, 'tfidf_word': 'EP: 520, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 525, 'parent': 1302, 'tfidf_word': 'EP: 525, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 526, 'parent': 1303, 'tfidf_word': 'EP: 526, Name: run &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 528, 'parent': 1303, 'tfidf_word': 'EP: 528, Name: run &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 628, 'parent': 1304, 'tfidf_word': 'EP: 628, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 711, 'parent': 1304, 'tfidf_word': 'EP: 711, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1220, 'parent': 1455, 'tfidf_word': 'commit copy coverage info last run script dirname exist execute ', 'tfidf_method': 'copy execute last_commit_info execute run_coverage_script dirname exists ', 'lda_word': ' execute,coverage,last,copy,run,', 'lda_method': ' execute,copy,run_coverage_script,last_commit_info,exist,', 'lsi_word': ' execute,commit,coverage,last,script,', 'lsi_method': ' execute,last_commit_info,run_coverage_script,copy,dirname,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['artik053.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1226, 'parent': 1455, 'tfidf_word': 'commit copy coverage info last run script dirname exist execute ', 'tfidf_method': 'copy execute last_commit_info execute run_coverage_script dirname exists ', 'lda_word': ' execute,info,script,coverage,commit,', 'lda_method': ' execute,copy,run_coverage_script,last_commit_info,dirname,', 'lsi_word': ' execute,script,info,run,last,', 'lsi_method': ' execute,last_commit_info,run_coverage_script,copy,dirname,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['ssh_device.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1148, 'parent': 1445, 'tfidf_word': 'last print run script shell execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute last_commit_info print_command execute run_coverage_script log abspath basename relpath ', 'lda_word': ' execute,shell,script,coverage,run,', 'lda_method': ' execute,run_coverage_script,last_commit_info,exec_shell,print_command,', 'lsi_word': ' execute,coverage,exec,last,shell,', 'lsi_method': ' execute,exec_shell,run_coverage_script,print_command,last_commit_info,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1219, 'parent': 1445, 'tfidf_word': 'coverage exec info last run script shell fail get execute ', 'tfidf_method': 'exec_shell execute last_commit_info execute run_coverage_script fail get ', 'lda_word': ' execute,script,coverage,run,info,', 'lda_method': ' execute,exec_shell,run_coverage_script,last_commit_info,get,', 'lsi_word': ' execute,coverage,last,script,shell,', 'lsi_method': ' execute,exec_shell,last_commit_info,run_coverage_script,get,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1151, 'parent': 1446, 'tfidf_word': 'last print run script shell execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute last_commit_info print_command execute run_coverage_script log abspath basename relpath ', 'lda_word': ' execute,script,coverage,exec,info,', 'lda_method': ' execute,print_command,run_coverage_script,exec_shell,last_commit_info,', 'lsi_word': ' execute,last,shell,commit,script,', 'lsi_method': ' execute,exec_shell,run_coverage_script,last_commit_info,print_command,', 'spm_method': '  &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1225, 'parent': 1446, 'tfidf_word': 'coverage exec info last run script shell fail get execute ', 'tfidf_method': 'exec_shell execute last_commit_info execute run_coverage_script fail get ', 'lda_word': ' execute,last,coverage,run,info,', 'lda_method': ' execute,run_coverage_script,last_commit_info,exec_shell,get,', 'lsi_word': ' execute,run,info,shell,script,', 'lsi_method': ' execute,exec_shell,last_commit_info,run_coverage_script,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['ssh_device.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 519, 'parent': 1361, 'tfidf_word': 'EP: 519, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1144, 'parent': 1361, 'tfidf_word': 'coverage exec fail get info last run script shell execute ', 'tfidf_method': 'fail exec_shell execute last_commit_info run_coverage_script get execute execute ', 'lda_word': ' execute,run,coverage,script,get,', 'lda_method': ' execute,get,last_commit_info,fail,run_coverage_script,', 'lsi_word': ' execute,fail,script,last,get,', 'lsi_method': ' execute,fail,get,last_commit_info,run_coverage_script,', 'spm_method': '  &#187; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1214, 'parent': 1493, 'tfidf_word': 'coverage exec fail get run script shell execute ', 'tfidf_method': 'fail exec_shell execute run_coverage_script get execute execute ', 'lda_word': ' execute,script,coverage,exec,shell,', 'lda_method': ' execute,run_coverage_script,exec_shell,get,fail,', 'lsi_word': ' execute,run,fail,script,shell,', 'lsi_method': ' execute,fail,get,run_coverage_script,exec_shell,', 'spm_method': ' ', 'text_summary': 'Start the client script. Execute the given test.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1296, 'parent': 1493, 'tfidf_word': 'exec execute fail get shell config init freya genromfs internet ', 'tfidf_method': 'fail exec_shell execute get init_freya_config __init__ config_internet genromfs ', 'lda_word': ' get,execute,shell,exec,fail,', 'lda_method': ' exec_shell,fail,execute,get,genromfs,', 'lsi_word': ' exec,fail,shell,get,execute,', 'lsi_method': ' get,exec_shell,fail,execute,init,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1495, 'parent': 1679, 'tfidf_word': 'shell command print execute abspath basename fail get log relpath ', 'tfidf_method': 'execute execute run_coverage_script print_command fail log abspath basename relpath get ', 'lda_word': ' execute,coverage,run,print,script,', 'lda_method': ' execute,run_coverage_script,exec_shell,print_command,get,', 'lsi_word': ' execute,exec,shell,script,run,', 'lsi_method': ' execute,exec_shell,run_coverage_script,print_command,abspath,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1496, 'parent': 1679, 'tfidf_word': 'shell command print execute abspath basename fail get log relpath ', 'tfidf_method': 'execute execute run_coverage_script print_command fail log abspath basename relpath get ', 'lda_word': ' abspath,execute,script,exec,coverage,', 'lda_method': ' execute,run_coverage_script,exec_shell,print_command,abspath,', 'lsi_word': ' execute,shell,script,coverage,run,', 'lsi_method': ' execute,exec_shell,run_coverage_script,print_command,relpath,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the given test.', 'files_count': 4, 'files': ['ssh_device.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1600, 'parent': 1765, 'tfidf_word': 'init shell command print abspath basename fail get log relpath ', 'tfidf_method': 'exec_shell execute __init__ print_command fail log abspath basename relpath get ', 'lda_word': ' init,shell,execute,exec,print,', 'lda_method': ' init,exec_shell,execute,print_command,basename,', 'lsi_word': ' execute,exec,init,shell,print,', 'lsi_method': ' execute,init,exec_shell,print_command,relpath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1764, 'parent': 1765, 'tfidf_word': 'freya genromfs init internet abspath basename fail get log relpath ', 'tfidf_method': 'print_command init_freya_config config_internet genromfs fail log abspath basename relpath get ', 'lda_word': ' print,command,execute,shell,exec,', 'lda_method': ' config_internet,execute,exec_shell,print_command,abspath,', 'lsi_word': ' exec,execute,shell,print,command,', 'lsi_method': ' execute,exec_shell,print_command,genromfs,init_freya_config,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Helper function to print commands. Return the absolute path. Print a message with the given color.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 18, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1231, 'parent': 1594, 'tfidf_word': 'exec flash print shell command execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute execute_config_command print_command flash log abspath basename relpath ', 'lda_word': ' execute,command,shell,exec,flash,', 'lda_method': ' flash,execute,exec_shell,print_command,execute_config_command,', 'lsi_word': ' command,execute,config,exec,shell,', 'lsi_method': ' exec_shell,flash,execute,print_command,execute_config_command,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Helper function to print commands.', 'files_count': 3, 'files': ['flasher.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1578, 'parent': 1594, 'tfidf_word': 'command config flash exec shell fail get execute dicts merge ', 'tfidf_method': 'execute execute_config_command flash exec_shell fail merge_dicts get get ', 'lda_word': ' execute,flash,command,config,exec,', 'lda_method': ' fail,exec_shell,execute_config_command,flash,execute,', 'lsi_word': ' execute,command,config,flash,exec,', 'lsi_method': ' execute_config_command,flash,execute,exec_shell,get,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Run the command defined in the build.config file.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 770, 'parent': 1665, 'tfidf_word': 'EP: 770, Name: flash &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1433, 'parent': 1665, 'tfidf_word': 'command config copy flash exist execute dirname mkdir ', 'tfidf_method': 'copy execute execute_config_command flash exists dirname mkdir ', 'lda_word': ' execute,config,command,copy,flash,', 'lda_method': ' execute_config_command,copy,execute,flash,exist,', 'lsi_word': ' execute,command,config,copy,flash,', 'lsi_method': ' execute_config_command,flash,execute,copy,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['flasher.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1429, 'parent': 1684, 'tfidf_word': 'copy reset exist execute dirname mkdir ', 'tfidf_method': 'copy execute execute reset exists dirname mkdir ', 'lda_word': ' reset,execute,copy,exist,mkdir,', 'lda_method': ' execute,copy,reset,exist,mkdir,', 'lsi_word': ' execute,copy,reset,exist,mkdir,', 'lsi_method': ' execute,reset,copy,exist,mkdir,', 'spm_method': ' ', 'text_summary': 'Reset the device to create clean environment. Create directory. Execute the given test.', 'files_count': 2, 'files': ['stm32f4dis.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1595, 'parent': 1684, 'tfidf_word': 'print execute fail get abspath basename dicts log merge relpath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' execute,get,exec,shell,reset,', 'lda_method': ' execute,reset,exec_shell,print_command,abspath,', 'lsi_word': ' execute,reset,shell,exec,print,', 'lsi_method': ' execute,reset,exec_shell,print_command,get,', 'spm_method': ' ', 'text_summary': 'Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['stm32f4dis.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1431, 'parent': 1685, 'tfidf_word': 'copy reset exist execute dirname mkdir ', 'tfidf_method': 'copy execute execute reset exists dirname mkdir ', 'lda_word': ' execute,reset,copy,dirname,exist,', 'lda_method': ' execute,copy,reset,dirname,exist,', 'lsi_word': ' execute,copy,reset,exist,mkdir,', 'lsi_method': ' execute,copy,reset,exist,mkdir,', 'spm_method': ' ', 'text_summary': 'Reset the device to create clean environment. Create directory. Execute the given test.', 'files_count': 2, 'files': ['artik053.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1596, 'parent': 1685, 'tfidf_word': 'print execute fail get abspath basename dicts log merge relpath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' execute,command,shell,print,exec,', 'lda_method': ' execute,reset,exec_shell,log,print_command,', 'lsi_word': ' execute,reset,shell,exec,print,', 'lsi_method': ' execute,reset,exec_shell,print_command,fail,', 'spm_method': ' ', 'text_summary': 'Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 329, 'parent': 1278, 'tfidf_word': 'EP: 329, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 330, 'parent': 1278, 'tfidf_word': 'EP: 330, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 305, 'parent': 1477, 'tfidf_word': 'EP: 305, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 316, 'parent': 1477, 'tfidf_word': 'EP: 316, Name: main &rarr; finalize &rarr; patch_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 326, 'parent': 1269, 'tfidf_word': 'EP: 326, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1135, 'parent': 1269, 'tfidf_word': 'copy execute finalize main module dirname exist patch ', 'tfidf_method': 'copy execute patch finalize patch_modules main dirname exists ', 'lda_word': ' patch,main,copy,finalize,module,', 'lda_method': ' patch_modules,execute,main,copy,exist,', 'lsi_word': ' patch,module,main,finalize,execute,', 'lsi_method': ' patch,copy,execute,patch_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Public method to restore the project files. Execute the given test.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1097, 'parent': 1466, 'tfidf_word': 'finalize main module print shell patch abspath basename log relpath ', 'tfidf_method': 'execute patch print_command finalize patch_modules main log abspath basename relpath ', 'lda_word': ' basename,patch,shell,print,finalize,', 'lda_method': ' exec_shell,print_command,patch_modules,main,finalize,', 'lsi_word': ' patch,exec,main,finalize,shell,', 'lsi_method': ' main,execute,patch,print_command,patch_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1376, 'parent': 1466, 'tfidf_word': 'finalize main module exec shell fail get patch dicts merge ', 'tfidf_method': 'execute patch finalize patch_modules main exec_shell fail merge_dicts get get ', 'lda_word': ' patch,main,execute,module,finalize,', 'lda_method': ' finalize,main,patch_modules,patch,execute,', 'lsi_word': ' patch,finalize,execute,module,main,', 'lsi_method': ' finalize,patch,patch_modules,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 281, 'parent': 1267, 'tfidf_word': 'EP: 281, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1133, 'parent': 1267, 'tfidf_word': 'config copy execute file finalize main module restore dirname exist ', 'tfidf_method': 'copy execute restore_file config_modules finalize main dirname exists ', 'lda_word': ' execute,copy,config,restore,module,', 'lda_method': ' copy,restore_file,config_modules,finalize,exist,', 'lsi_word': ' execute,copy,finalize,module,restore,', 'lsi_method': ' config_modules,finalize,restore_file,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Restore the modified project files. Execute the given test.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1090, 'parent': 1465, 'tfidf_word': 'finalize main module print restore shell abspath basename log relpath ', 'tfidf_method': 'execute print_command restore_file config_modules finalize main log abspath basename relpath ', 'lda_word': ' restore,execute,config,shell,finalize,', 'lda_method': ' print_command,execute,finalize,config_modules,restore_file,', 'lsi_word': ' exec,finalize,file,print,restore,', 'lsi_method': ' config_modules,finalize,restore_file,print_command,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1375, 'parent': 1465, 'tfidf_word': 'finalize main module restore exec shell fail get dicts merge ', 'tfidf_method': 'execute restore_file config_modules finalize main exec_shell fail merge_dicts get get ', 'lda_word': ' restore,finalize,main,config,execute,', 'lda_method': ' finalize,restore_file,main,config_modules,exec_shell,', 'lsi_word': ' finalize,module,main,restore,file,', 'lsi_method': ' finalize,execute,restore_file,main,config_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Restore the modified project files. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 299, 'parent': 1457, 'tfidf_word': 'EP: 299, Name: main &rarr; finalize &rarr; config_modules &rarr; symlink &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1365, 'parent': 1457, 'tfidf_word': 'config finalize main module exist remove symlink break file rmtree ', 'tfidf_method': 'remove symlink config_modules finalize main exists is_broken_symlink remove_file rmtree ', 'lda_word': ' remove,module,main,finalize,config,', 'lda_method': ' config_modules,remove,main,symlink,exist,', 'lsi_word': ' symlink,remove,finalize,main,module,', 'lsi_method': ' main,symlink,remove,finalize,config_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; symlink(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1456, 'parent': 1655, 'tfidf_word': 'main module restore exist file remove break relpath rmtree symlink ', 'tfidf_method': 'restore_file config_modules finalize main remove exists is_broken_symlink relpath remove_file rmtree ', 'lda_word': ' file,main,remove,restore,module,', 'lda_method': ' finalize,main,config_modules,remove,restore_file,', 'lsi_word': ' file,remove,config,restore,module,', 'lsi_method': ' restore_file,config_modules,main,finalize,remove,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Remove the given file. Public method to restore the project files. Checks that the given path is exist.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '147': 'relpath(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1476, 'parent': 1655, 'tfidf_word': 'config finalize get main module fail ', 'tfidf_method': 'config_modules finalize main fail get get ', 'lda_word': ' main,get,config,finalize,module,', 'lda_method': ' main,finalize,get,config_modules,fail,', 'lsi_word': ' config,finalize,module,get,main,', 'lsi_method': ' config_modules,finalize,get,main,fail,', 'spm_method': ' ', 'text_summary': 'Public method to restore the project files.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 383, 'parent': 1271, 'tfidf_word': 'EP: 383, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1137, 'parent': 1271, 'tfidf_word': 'config copy execute file init initialize module restore dirname exist ', 'tfidf_method': 'copy execute restore_file config_modules initialize __init__ dirname exists ', 'lda_word': ' execute,config,init,initialize,restore,', 'lda_method': ' init,execute,restore_file,copy,initialize,', 'lsi_word': ' config,copy,restore,file,init,', 'lsi_method': ' execute,initialize,restore_file,init,copy,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Execute the given test. Public method to initialize the project.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1100, 'parent': 1467, 'tfidf_word': 'init initialize module print restore shell abspath basename log relpath ', 'tfidf_method': 'execute print_command restore_file config_modules initialize __init__ log abspath basename relpath ', 'lda_word': ' module,print,exec,execute,restore,', 'lda_method': ' config_modules,print_command,init,exec_shell,restore_file,', 'lsi_word': ' file,execute,initialize,print,config,', 'lsi_method': ' initialize,execute,restore_file,init,print_command,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1377, 'parent': 1467, 'tfidf_word': 'init initialize module restore exec shell fail get dicts merge ', 'tfidf_method': 'execute restore_file config_modules initialize __init__ exec_shell fail merge_dicts get get ', 'lda_word': ' exec,initialize,init,shell,file,', 'lda_method': ' restore_file,init,execute,config_modules,initialize,', 'lsi_word': ' file,init,initialize,restore,execute,', 'lsi_method': ' restore_file,initialize,init,config_modules,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Restore the modified project files. Execute the given test. Public method to initialize the project.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 401, 'parent': 1459, 'tfidf_word': 'EP: 401, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; symlink &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1367, 'parent': 1459, 'tfidf_word': 'config init initialize module exist remove symlink break file rmtree ', 'tfidf_method': 'remove symlink config_modules initialize __init__ exists is_broken_symlink remove_file rmtree ', 'lda_word': ' symlink,remove,initialize,exist,module,', 'lda_method': ' symlink,init,remove,initialize,config_modules,', 'lsi_word': ' remove,symlink,config,init,module,', 'lsi_method': ' config_modules,initialize,symlink,remove,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; symlink(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1458, 'parent': 1656, 'tfidf_word': 'initialize module restore exist file remove break relpath rmtree symlink ', 'tfidf_method': 'restore_file config_modules initialize __init__ remove exists is_broken_symlink relpath remove_file rmtree ', 'lda_word': ' initialize,init,file,restore,remove,', 'lda_method': ' initialize,config_modules,init,remove,restore_file,', 'lsi_word': ' file,remove,module,init,initialize,', 'lsi_method': ' restore_file,init,config_modules,initialize,remove,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Remove the resource file. Checks that the given path is exist. Remove the given file. Remove directory.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '147': 'relpath(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1478, 'parent': 1656, 'tfidf_word': 'config get init initialize module fail ', 'tfidf_method': 'config_modules initialize __init__ fail get get ', 'lda_word': ' init,get,initialize,module,config,', 'lda_method': ' init,fail,initialize,get,config_modules,', 'lsi_word': ' config,module,get,init,initialize,', 'lsi_method': ' config_modules,get,init,initialize,fail,', 'spm_method': ' ', 'text_summary': 'Configure all the required modules.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1142, 'parent': 1588, 'tfidf_word': 'fetch init initialize module print shell abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command fetch_modules initialize __init__ log abspath basename relpath ', 'lda_word': ' command,execute,print,fetch,initialize,', 'lda_method': ' exec_shell,print_command,fetch_modules,initialize,init,', 'lsi_word': ' print,initialize,exec,shell,init,', 'lsi_method': ' exec_shell,execute,print_command,initialize,fetch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1497, 'parent': 1588, 'tfidf_word': 'init initialize module exec fail get shell builtin dicts merge ', 'tfidf_method': 'execute fetch_modules initialize __init__ fail exec_shell get exec_builtin merge_dicts get ', 'lda_word': ' fetch,initialize,exec,execute,fail,', 'lda_method': ' init,initialize,fetch_modules,get,exec_shell,', 'lsi_word': ' fetch,initialize,init,module,execute,', 'lsi_method': ' execute,init,initialize,fetch_modules,get,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; get(builtins.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Execute the built-in command.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 445, 'parent': 1610, 'tfidf_word': 'EP: 445, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1357, 'parent': 1610, 'tfidf_word': 'copy execute fetch init initialize module exist dirname mkdir ', 'tfidf_method': 'copy execute fetch_modules initialize __init__ exists dirname mkdir ', 'lda_word': ' copy,fetch,execute,module,init,', 'lda_method': ' copy,initialize,init,execute,fetch_modules,', 'lsi_word': ' copy,initialize,init,fetch,execute,', 'lsi_method': ' copy,fetch_modules,initialize,init,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': '', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1294, 'parent': 1582, 'tfidf_word': 'init initialize module exist fail patch ', 'tfidf_method': 'patch initialize patch_modules __init__ fail exists ', 'lda_word': ' patch,module,exist,init,initialize,', 'lda_method': ' init,patch_modules,patch,initialize,exist,', 'lsi_word': ' patch,init,initialize,module,fail,', 'lsi_method': ' init,initialize,patch,patch_modules,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '134': 'exists(utils.py)', '105': 'fail(console.py)'}}, {'key': 1479, 'parent': 1582, 'tfidf_word': 'get init initialize module patch fail ', 'tfidf_method': 'initialize patch_modules __init__ fail get get ', 'lda_word': ' module,initialize,patch,init,get,', 'lda_method': ' init,get,initialize,patch_modules,fail,', 'lsi_word': ' get,patch,init,initialize,module,', 'lsi_method': ' get,init,patch_modules,initialize,fail,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1273, 'parent': 1632, 'tfidf_word': 'copy execute init initialize module exist patch dirname mkdir ', 'tfidf_method': 'copy execute patch initialize patch_modules __init__ exists dirname mkdir ', 'lda_word': ' patch,init,initialize,execute,copy,', 'lda_method': ' patch_modules,execute,patch,init,exist,', 'lsi_word': ' patch,module,initialize,init,execute,', 'lsi_method': ' execute,patch,initialize,patch_modules,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute the given test. Apply the given patch to the given project.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1468, 'parent': 1632, 'tfidf_word': 'print patch fail get dicts relpath log merge basename abspath ', 'tfidf_method': 'exec_shell print_command fail log abspath basename merge_dicts relpath get get ', 'lda_word': ' patch,init,exec,initialize,execute,', 'lda_method': ' patch,init,execute,initialize,patch_modules,', 'lsi_word': ' patch,init,initialize,module,execute,', 'lsi_method': ' patch,execute,init,initialize,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 132, 'parent': 968, 'tfidf_word': 'EP: 132, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 967, 'parent': 968, 'tfidf_word': 'create config build exec execute command log basename abspath resolve ', 'tfidf_method': 'execute execute_config_command print_command create_testing_environment main init_modules build log abspath basename ', 'lda_word': ' resolve,execute,command,init,print,', 'lda_method': ' print_command,init_modules,main,execute,resolve_string,', 'lsi_word': ' resolve,execute,command,module,print,', 'lsi_method': ' exec_shell,create_testing_environment,resolve,main,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Return the absolute path. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 127, 'parent': 1114, 'tfidf_word': 'EP: 127, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 986, 'parent': 1114, 'tfidf_word': 'testing exec environment create config command fail get execute resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute execute_config_command create_testing_environment main init_modules build fail get ', 'lda_word': ' resolve,execute,module,string,create,', 'lda_method': ' resolve_string,build,resolve,exec_shell,create_testing_environment,', 'lsi_word': ' resolve,execute,build,main,shell,', 'lsi_method': ' execute_config_command,init_modules,main,resolve_symbol,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Execute the shell command.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 135, 'parent': 1115, 'tfidf_word': 'EP: 135, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 987, 'parent': 1115, 'tfidf_word': 'init main module string symbol testing dirname exist execute resolve ', 'tfidf_method': 'resolve_symbol copy execute execute_config_command create_testing_environment main init_modules build dirname exists ', 'lda_word': ' execute,resolve,testing,main,create,', 'lda_method': ' init_modules,copy,create_testing_environment,resolve_symbol,exist,', 'lsi_word': ' resolve,execute,build,command,main,', 'lsi_method': ' main,execute_config_command,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute all the init commands that the modules define. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 137, 'parent': 1162, 'tfidf_word': 'EP: 137, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 138, 'parent': 1162, 'tfidf_word': 'EP: 138, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 870, 'parent': 981, 'tfidf_word': 'EP: 870, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 980, 'parent': 981, 'tfidf_word': 'exec build file execute config command log basename abspath resolve ', 'tfidf_method': 'execute execute_config_command print_command read_config_file flash init_modules build log abspath basename ', 'lda_word': ' resolve,config,command,print,execute,', 'lda_method': ' init_modules,execute_config_command,print_command,read_config_file,resolve_string,', 'lsi_word': ' resolve,execute,config,command,print,', 'lsi_method': ' print_command,flash,resolve_string,resolve,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Run the command defined in the build.config file. Resolve the given symbol. Execute all the init commands that the modules define.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 865, 'parent': 1118, 'tfidf_word': 'EP: 865, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 996, 'parent': 1118, 'tfidf_word': 'module read shell string symbol fail get config execute resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute execute_config_command read_config_file flash init_modules build fail get ', 'lda_word': ' resolve,config,execute,string,flash,', 'lda_method': ' execute,resolve_string,flash,resolve,read_config_file,', 'lsi_word': ' resolve,execute,config,exec,module,', 'lsi_method': ' build,flash,execute_config_command,exec_shell,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Execute the shell command. Run the command defined in the build.config file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 873, 'parent': 1119, 'tfidf_word': 'EP: 873, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 997, 'parent': 1119, 'tfidf_word': 'init module read string symbol dirname exist config execute resolve ', 'tfidf_method': 'resolve_symbol copy execute execute_config_command read_config_file flash init_modules build dirname exists ', 'lda_word': ' resolve,execute,config,build,module,', 'lda_method': ' copy,execute,resolve_string,dirname,read_config_file,', 'lsi_word': ' resolve,config,execute,symbol,module,', 'lsi_method': ' resolve_string,execute,copy,resolve,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Run the command defined in the build.config file. Execute all the init commands that the modules define.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 875, 'parent': 1164, 'tfidf_word': 'EP: 875, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 876, 'parent': 1164, 'tfidf_word': 'EP: 876, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 47, 'parent': 1166, 'tfidf_word': 'EP: 47, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 126, 'parent': 1166, 'tfidf_word': 'EP: 126, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 788, 'parent': 1169, 'tfidf_word': 'EP: 788, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 864, 'parent': 1169, 'tfidf_word': 'EP: 864, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 93, 'parent': 1126, 'tfidf_word': 'EP: 93, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 834, 'parent': 1126, 'tfidf_word': 'EP: 834, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 68, 'parent': 1167, 'tfidf_word': 'EP: 68, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 809, 'parent': 1167, 'tfidf_word': 'EP: 809, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 960, 'parent': 1259, 'tfidf_word': 'print shell build command execute abspath relpath basename log resolve ', 'tfidf_method': 'execute_config_command print_command create_testing_environment main build_modules build log abspath basename relpath ', 'lda_word': ' resolve,execute,main,command,build,', 'lda_method': ' print_command,exec_shell,execute_config_command,build,resolve_string,', 'lsi_word': ' resolve,execute,command,build,module,', 'lsi_method': ' build,execute_config_command,build_modules,print_command,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Run the command defined in the build.config file. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1110, 'parent': 1259, 'tfidf_word': 'module shell string symbol testing fail get build execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command create_testing_environment main build_modules build fail get get ', 'lda_word': ' resolve,build,environment,execute,symbol,', 'lda_method': ' resolve_symbol,create_testing_environment,get,build_modules,resolve,', 'lsi_word': ' resolve,build,execute,environment,config,', 'lsi_method': ' build,execute,create_testing_environment,main,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Run the command defined in the build.config file. Execute the shell command. Build all the modules and save the artifacts.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1194, 'parent': 1482, 'tfidf_word': 'environment get main module string symbol testing fail build resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main build_modules build fail get get ', 'lda_word': ' resolve,build,module,environment,symbol,', 'lda_method': ' resolve,build_modules,resolve_string,main,resolve_symbol,', 'lsi_word': ' resolve,build,create,environment,module,', 'lsi_method': ' build,main,resolve_string,resolve,get,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1333, 'parent': 1482, 'tfidf_word': 'module copy dicts exist merge build execute dirname mkdir resolve ', 'tfidf_method': 'create_testing_environment main build_modules build execute copy exists merge_dicts dirname mkdir ', 'lda_word': ' resolve,build,execute,symbol,module,', 'lda_method': ' create_testing_environment,main,exist,execute_config_command,execute,', 'lsi_word': ' resolve,build,execute,config,symbol,', 'lsi_method': ' build_modules,resolve,resolve_symbol,main,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Build all the modules and save the artifacts. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 973, 'parent': 1260, 'tfidf_word': 'exec config command build execute log relpath basename abspath resolve ', 'tfidf_method': 'execute_config_command print_command read_config_file flash build_modules build log abspath basename relpath ', 'lda_word': ' config,resolve,build,execute,command,', 'lda_method': ' resolve_string,build_modules,build,resolve,print_command,', 'lsi_word': ' resolve,build,command,config,execute,', 'lsi_method': ' build,exec_shell,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Run the command defined in the build.config file. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1116, 'parent': 1260, 'tfidf_word': 'read shell string symbol fail get build config execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command read_config_file flash build_modules build fail get get ', 'lda_word': ' resolve,execute,config,build,exec,', 'lda_method': ' exec_shell,read_config_file,execute,execute_config_command,flash,', 'lsi_word': ' resolve,config,execute,build,flash,', 'lsi_method': ' flash,execute_config_command,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Execute the shell command. Run the command defined in the build.config file.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1234, 'parent': 1483, 'tfidf_word': 'file flash get module read string symbol fail build resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash build_modules build fail get get ', 'lda_word': ' resolve,build,read,flash,symbol,', 'lda_method': ' read_config_file,resolve_string,flash,get,build_modules,', 'lsi_word': ' resolve,build,module,string,get,', 'lsi_method': ' build,read_config_file,resolve_string,get,build_modules,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) . <br>', 'text_summary': 'Resolve the given symbol. Public method to build the module by the given build_info object. Build all the modules and save the artifacts.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1334, 'parent': 1483, 'tfidf_word': 'copy exist dicts merge execute config build mkdir dirname resolve ', 'tfidf_method': 'read_config_file flash build_modules build execute copy exists merge_dicts dirname mkdir ', 'lda_word': ' resolve,execute,build,config,module,', 'lda_method': ' exist,copy,execute,build,resolve,', 'lsi_word': ' resolve,config,build,execute,string,', 'lsi_method': ' build,flash,read_config_file,resolve_string,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Build all the modules and save the artifacts. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 252, 'parent': 1201, 'tfidf_word': 'EP: 252, Name: main &rarr; create_testing_environment &rarr; build &rarr; save_artifacts &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 254, 'parent': 1201, 'tfidf_word': 'EP: 254, Name: main &rarr; create_testing_environment &rarr; build &rarr; save_artifacts &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 124, 'parent': 1171, 'tfidf_word': 'EP: 124, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; save_artifacts &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1031, 'parent': 1171, 'tfidf_word': 'create environment main save string symbol testing dirname exist resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol copy create_testing_environment main save_artifacts build dirname exists ', 'lda_word': ' resolve,string,save,exist,copy,', 'lda_method': ' create_testing_environment,save_artifacts,main,build,resolve_symbol,', 'lsi_word': ' resolve,build,create,string,save,', 'lsi_method': ' copy,save_artifacts,resolve,resolve_symbol,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 862, 'parent': 1176, 'tfidf_word': 'EP: 862, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; save_artifacts &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1062, 'parent': 1176, 'tfidf_word': 'copy file flash read save string symbol dirname exist resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol copy read_config_file flash save_artifacts build dirname exists ', 'lda_word': ' resolve,flash,config,symbol,read,', 'lda_method': ' build,resolve,read_config_file,resolve_symbol,copy,', 'lsi_word': ' resolve,build,file,string,flash,', 'lsi_method': ' build,copy,save_artifacts,resolve_string,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; save_artifacts(builder.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Copy the created files (libs, linker.map, ...) into the build folder.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '79': 'save_artifacts(builder.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 139, 'parent': 1368, 'tfidf_word': 'EP: 139, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1193, 'parent': 1368, 'tfidf_word': 'create environment main string symbol testing abspath get join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main abspath join get ', 'lda_word': ' resolve,testing,symbol,string,create,', 'lda_method': ' create_testing_environment,resolve_string,resolve,resolve_symbol,main,', 'lsi_word': ' resolve,environment,testing,symbol,main,', 'lsi_method': ' resolve,main,resolve_string,resolve_symbol,create_testing_environment,', 'spm_method': ' ', 'text_summary': 'Resolve the given symbol. Join one or more path components intelligently.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'coverage_client.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1274, 'parent': 1579, 'tfidf_word': 'create config file exec exception command fail timeout resolve read ', 'tfidf_method': 'main build read_modules fail TimeoutException exec_command open open read_until open ', 'lda_word': ' resolve,read,file,symbol,module,', 'lda_method': ' open,read_config_file,resolve_symbol,create_testing_environment,resolve,', 'lsi_word': ' read,resolve,file,config,open,', 'lsi_method': ' build,create_testing_environment,read_modules,read_json_file,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1347, 'parent': 1579, 'tfidf_word': 'read string symbol testing exist get build fail join resolve ', 'tfidf_method': 'create_testing_environment main build read_modules should_build exists fail join get get ', 'lda_word': ' fail,resolve,build,get,testing,', 'lda_method': ' read_modules,main,build,resolve_symbol,resolve,', 'lsi_word': ' resolve,build,testing,string,read,', 'lsi_method': ' build,resolve_string,create_testing_environment,resolve_symbol,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Join one or more path components intelligently. Public method to build the module by the given build_info object. Collect buildable modules and their build instructions.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1168, 'parent': 1491, 'tfidf_word': 'file flash testing main environment read config create build resolve ', 'tfidf_method': 'exec_command open build load_map_data calculate_section_sizes create_build_info read_config_file flash create_testing_environment main ', 'lda_word': ' resolve,build,create,calculate,exec,', 'lda_method': ' build,resolve_symbol,flash,create_build_info,calculate_section_sizes,', 'lsi_word': ' resolve,build,create,calculate,data,', 'lsi_method': ' calculate_section_sizes,build,exec_command,resolve,open,', 'spm_method': '  &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write binary size and commit information into a file.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'serialcom.py', 'flasher.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1195, 'parent': 1491, 'tfidf_word': 'flash environment main read config testing file create build resolve ', 'tfidf_method': 'TimeoutException write_json_file exec_command open build create_build_info read_config_file flash create_testing_environment main ', 'lda_word': ' resolve,build,symbol,file,read,', 'lda_method': ' build,create_build_info,open,exec_command,resolve,', 'lsi_word': ' resolve,build,file,create,write,', 'lsi_method': ' build,create_build_info,resolve_symbol,write_json_file,timeoutexception,', 'spm_method': '  &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write a JSON file from the given data.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'serialcom.py', 'flasher.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1243, 'parent': 1603, 'tfidf_word': 'file open create build fail exist mkdir read dirname resolve ', 'tfidf_method': 'main build create_build_info fail dirname exists mkdir open read_until open ', 'lda_word': ' build,create,environment,resolve,dirname,', 'lda_method': ' resolve,create_build_info,write_json_file,build,main,', 'lsi_word': ' resolve,build,create,environment,file,', 'lsi_method': ' resolve_string,resolve,build,main,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write a JSON file from the given data. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1460, 'parent': 1603, 'tfidf_word': 'fill fail memory exist entry read date current line append ', 'tfidf_method': 'try_match_entry current_date get_memory_map_lines open read_until open append exists hoist_section fail ', 'lda_word': ' append,resolve,section,create,build,', 'lda_method': ' calculate_section_sizes,create_testing_environment,resolve_symbol,main,resolve,', 'lsi_word': ' resolve,build,create,section,symbol,', 'lsi_method': ' build,create_build_info,create_testing_environment,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Return the sizes of the main sections.', 'files_count': 10, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 13, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 807, 'parent': 1244, 'tfidf_word': 'EP: 807, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1242, 'parent': 1244, 'tfidf_word': 'symbol write build file read dirname exist mkdir open resolve ', 'tfidf_method': 'read_config_file write_json_file flash build create_build_info dirname exists mkdir open read_until ', 'lda_word': ' resolve,file,build,read,info,', 'lda_method': ' create_build_info,flash,resolve_string,resolve_symbol,build,', 'lsi_word': ' resolve,file,build,read,config,', 'lsi_method': ' read_config_file,flash,resolve_string,write_json_file,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write a JSON file from the given data. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1022, 'parent': 1461, 'tfidf_word': 'symbol append map get fill entry memory line resolve section ', 'tfidf_method': 'build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_fill try_match_section try_match_symbol ', 'lda_word': ' resolve,build,section,read,info,', 'lda_method': ' try_match_fill,parse_to_sections,calculate_section_sizes,resolve_string,resolve,', 'lsi_word': ' resolve,section,build,symbol,config,', 'lsi_method': ' resolve_symbol,resolve,flash,resolve_string,create_build_info,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write binary size and commit information into a file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1425, 'parent': 1461, 'tfidf_word': 'map open data section exist date current fail hoist resolve ', 'tfidf_method': 'calculate_section_sizes join load_map_data current_date exists open read_until open hoist_section fail ', 'lda_word': ' resolve,build,string,info,flash,', 'lda_method': ' create_build_info,read_config_file,build,resolve_string,resolve_symbol,', 'lsi_word': ' resolve,build,read,config,flash,', 'lsi_method': ' resolve,build,flash,resolve_symbol,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 8, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1109, 'parent': 1348, 'tfidf_word': 'config file flash module string symbol exist join read resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash build read_modules exists join ', 'lda_word': ' resolve,read,file,module,config,', 'lda_method': ' flash,exist,read_modules,read_config_file,resolve_string,', 'lsi_word': ' resolve,read,symbol,file,module,', 'lsi_method': ' resolve,resolve_string,read_config_file,read_modules,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)'}}, {'key': 1175, 'parent': 1348, 'tfidf_word': 'flash module string symbol get build read exist fail resolve ', 'tfidf_method': 'resolve_symbol read_config_file flash build read_modules should_build fail exists get get ', 'lda_word': ' resolve,build,read,fail,get,', 'lda_method': ' build,read_modules,resolve_string,resolve_symbol,should_build,', 'lsi_word': ' resolve,read,build,flash,symbol,', 'lsi_method': ' read_modules,build,resolve,resolve_string,should_build,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br>', 'text_summary': 'Resolve the given symbol. Collect buildable modules and their build instructions. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '134': 'exists(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 877, 'parent': 1369, 'tfidf_word': 'EP: 877, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1233, 'parent': 1369, 'tfidf_word': 'config file flash read string symbol abspath get join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash abspath join get ', 'lda_word': ' resolve,file,symbol,read,flash,', 'lda_method': ' resolve_string,resolve,resolve_symbol,flash,read_config_file,', 'lsi_word': ' resolve,symbol,string,flash,read,', 'lsi_method': ' read_config_file,resolve_symbol,resolve_string,resolve,flash,', 'spm_method': ' ', 'text_summary': 'Resolve the given symbol. Join one or more path components intelligently. Return the absolute path.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1068, 'parent': 1441, 'tfidf_word': 'environment copy calculate info exist create build mkdir dirname resolve ', 'tfidf_method': 'execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs exists dirname mkdir ', 'lda_word': ' resolve,create,size,build,calculate,', 'lda_method': ' copy,read_objects_from_libs,execute,resolve,resolve_string,', 'lsi_word': ' resolve,create,build,calculate,copy,', 'lsi_method': ' main,create_testing_environment,execute,read_objects_from_libs,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1263, 'parent': 1441, 'tfidf_word': 'create fail get resolve relpath dicts log basename merge abspath ', 'tfidf_method': 'exec_shell print_command fail merge_dicts relpath basename abspath log get get ', 'lda_word': ' resolve,build,create,section,execute,', 'lda_method': ' build,calculate_section_sizes,resolve_string,exec_shell,main,', 'lsi_word': ' resolve,build,create,main,object,', 'lsi_method': ' read_objects_from_libs,main,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Helper function to print commands. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1071, 'parent': 1442, 'tfidf_word': 'create copy config calculate exist read build dirname mkdir resolve ', 'tfidf_method': 'execute read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs exists dirname mkdir ', 'lda_word': ' read,build,resolve,calculate,string,', 'lda_method': ' exist,copy,read_config_file,create_build_info,resolve_string,', 'lsi_word': ' resolve,read,build,config,flash,', 'lsi_method': ' build,create_build_info,resolve_symbol,resolve,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read all the names of the object files that are. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1264, 'parent': 1442, 'tfidf_word': 'read get fail resolve log relpath dicts basename merge abspath ', 'tfidf_method': 'exec_shell print_command fail get merge_dicts basename abspath log relpath get ', 'lda_word': ' resolve,build,read,symbol,size,', 'lda_method': ' resolve_symbol,read_objects_from_libs,resolve_string,flash,calculate_section_sizes,', 'lsi_word': ' resolve,read,build,create,file,', 'lsi_method': ' execute,calculate_section_sizes,build,read_objects_from_libs,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Read all the names of the object files that are. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1121, 'parent': 1462, 'tfidf_word': 'create copy config commit exist info build mkdir dirname resolve ', 'tfidf_method': 'copy execute last_commit_info read_config_file flash build create_build_info exists dirname mkdir ', 'lda_word': ' resolve,info,build,last,symbol,', 'lda_method': ' dirname,resolve,resolve_symbol,read_config_file,resolve_string,', 'lsi_word': ' resolve,build,info,config,file,', 'lsi_method': ' create_build_info,build,resolve,resolve_symbol,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1331, 'parent': 1462, 'tfidf_word': 'info fail get resolve relpath dicts merge log basename abspath ', 'tfidf_method': 'exec_shell print_command fail basename relpath abspath get log merge_dicts get ', 'lda_word': ' resolve,build,info,create,read,', 'lda_method': ' resolve_symbol,resolve,flash,last_commit_info,build,', 'lsi_word': ' resolve,info,build,last,create,', 'lsi_method': ' resolve_string,build,flash,resolve_symbol,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Return the base name of pathname path. Helper function to print commands. Resolve the given symbol. Print a message with the given color.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1258, 'parent': 1627, 'tfidf_word': 'environment file flash main read testing build create info resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol last_commit_info build create_build_info read_config_file flash create_testing_environment main ', 'lda_word': ' resolve,info,create,build,main,', 'lda_method': ' info,create_build_info,log,resolve,last_commit_info,', 'lsi_word': ' info,resolve,build,create,commit,', 'lsi_method': ' create_build_info,log,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; info(console.py) &rarr; log(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; info(console.py) &rarr; log(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; info(console.py) &rarr; log(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'flasher.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)'}}, {'key': 1463, 'parent': 1627, 'tfidf_word': 'get resolve log merge mkdir dirname relpath dicts basename abspath ', 'tfidf_method': 'exists mkdir dirname relpath get basename abspath log merge_dicts get ', 'lda_word': ' info,resolve,create,build,last,', 'lda_method': ' last_commit_info,create_build_info,resolve,build,resolve_symbol,', 'lsi_word': ' resolve,build,info,create,commit,', 'lsi_method': ' build,resolve_string,resolve_symbol,last_commit_info,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Recursively loop on the given node, and resolve all the. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 191, 'parent': 1085, 'tfidf_word': 'EP: 191, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 193, 'parent': 1085, 'tfidf_word': 'EP: 193, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 189, 'parent': 1039, 'tfidf_word': 'EP: 189, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1038, 'parent': 1039, 'tfidf_word': 'main print shell testing build create info abspath basename log ', 'tfidf_method': 'execute last_commit_info print_command create_testing_environment main build create_build_info log abspath basename ', 'lda_word': ' info,create,build,print,testing,', 'lda_method': ' build,last_commit_info,execute,main,create_testing_environment,', 'lsi_word': ' create,info,build,execute,shell,', 'lsi_method': ' create_testing_environment,exec_shell,print_command,main,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 194, 'parent': 1346, 'tfidf_word': 'EP: 194, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1247, 'parent': 1346, 'tfidf_word': 'execute last main shell testing fail get build create info ', 'tfidf_method': 'exec_shell execute last_commit_info create_testing_environment main build create_build_info fail get get ', 'lda_word': ' build,create,info,commit,exec,', 'lda_method': ' get,exec_shell,create_testing_environment,create_build_info,execute,', 'lsi_word': ' create,info,build,execute,shell,', 'lsi_method': ' build,execute,exec_shell,main,last_commit_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 217, 'parent': 1174, 'tfidf_word': 'EP: 217, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1041, 'parent': 1174, 'tfidf_word': 'main object read section size testing dirname exist build create ', 'tfidf_method': 'copy execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs dirname exists ', 'lda_word': ' dirname,build,create,calculate,info,', 'lda_method': ' read_objects_from_libs,copy,create_build_info,calculate_section_sizes,execute,', 'lsi_word': ' create,build,environment,section,info,', 'lsi_method': ' build,copy,read_objects_from_libs,execute,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Public method to build the module by the given build_info object. Read all the names of the object files that are.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1015, 'parent': 1371, 'tfidf_word': 'environment command calculate execute create build log relpath basename abspath ', 'tfidf_method': 'create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs log abspath basename relpath ', 'lda_word': ' build,create,object,exec,read,', 'lda_method': ' calculate_section_sizes,execute,print_command,read_objects_from_libs,create_testing_environment,', 'lsi_word': ' build,create,calculate,size,shell,', 'lsi_method': ' main,create_testing_environment,create_build_info,read_objects_from_libs,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Return the base name of pathname path. Public method to build the module by the given build_info object. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1265, 'parent': 1371, 'tfidf_word': 'environment calculate exec shell get fail create build merge dicts ', 'tfidf_method': 'main build calculate_section_sizes create_build_info read_objects_from_libs exec_shell fail merge_dicts get get ', 'lda_word': ' create,build,exec,shell,calculate,', 'lda_method': ' build,read_objects_from_libs,create_testing_environment,main,create_build_info,', 'lsi_word': ' build,create,environment,execute,libs,', 'lsi_method': ' build,calculate_section_sizes,create_testing_environment,read_objects_from_libs,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1131, 'parent': 1583, 'tfidf_word': 'create symbol memory append get fill entry map line section ', 'tfidf_method': 'build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_fill try_match_section try_match_symbol ', 'lda_word': ' build,section,create,testing,size,', 'lda_method': ' parse_to_sections,calculate_section_sizes,main,build,create_testing_environment,', 'lsi_word': ' section,build,create,parse,size,', 'lsi_method': ' build,main,create_build_info,calculate_section_sizes,parse_to_sections,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Load the resource infromation that all modules define.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1481, 'parent': 1583, 'tfidf_word': 'open data create section build exist fail hoist join read ', 'tfidf_method': 'calculate_section_sizes create_build_info load_map_data fail exists join open read_until open hoist_section ', 'lda_word': ' create,build,main,environment,info,', 'lda_method': ' calculate_section_sizes,build,create_build_info,create_testing_environment,main,', 'lsi_word': ' create,build,section,environment,main,', 'lsi_method': ' calculate_section_sizes,build,create_build_info,create_testing_environment,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Checks that the given path is exist. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1382, 'parent': 1648, 'tfidf_word': 'section map write json file data calculate load create build ', 'tfidf_method': 'TimeoutException exec_command open create_testing_environment main build create_build_info write_json_file load_map_data calculate_section_sizes ', 'lda_word': ' build,map,calculate,data,size,', 'lda_method': ' main,timeoutexception,exec_command,build,create_build_info,', 'lsi_word': ' build,create,info,main,environment,', 'lsi_method': ' create_build_info,create_testing_environment,timeoutexception,main,exec_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; open(serialcom.py) &rarr; exec_command(serialcom.py) &rarr; TimeoutException(utils.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Write a JSON file from the given data. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'serialcom.py', 'lumpy.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)'}}, {'key': 1593, 'parent': 1648, 'tfidf_word': 'date current join last log commit mkdir read dirname info ', 'tfidf_method': 'open fail join exists dirname current_date log info last_commit_info mkdir ', 'lda_word': ' create,build,environment,testing,main,', 'lda_method': ' create_build_info,build,create_testing_environment,main,open,', 'lsi_word': ' create,build,info,main,testing,', 'lsi_method': ' build,main,create_testing_environment,create_build_info,write_json_file,', 'spm_method': ' ', 'text_summary': 'Write binary size and commit information into a file. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 1036, 'parent': 1372, 'tfidf_word': 'print shell testing build command execute abspath basename log relpath ', 'tfidf_method': 'execute_config_command print_command create_testing_environment main build_modules build log abspath basename relpath ', 'lda_word': ' command,execute,build,exec,main,', 'lda_method': ' relpath,create_testing_environment,build_modules,main,build,', 'lsi_word': ' build,command,execute,shell,module,', 'lsi_method': ' main,create_testing_environment,print_command,execute,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Run the command defined in the build.config file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1245, 'parent': 1372, 'tfidf_word': 'environment exec main module shell testing fail get build execute ', 'tfidf_method': 'exec_shell execute execute_config_command create_testing_environment main build_modules build fail get get ', 'lda_word': ' execute,build,shell,module,testing,', 'lda_method': ' create_testing_environment,execute,build_modules,build,main,', 'lsi_word': ' build,execute,environment,exec,module,', 'lsi_method': ' build,build_modules,execute_config_command,execute,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Run the command defined in the build.config file. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1246, 'parent': 1450, 'tfidf_word': 'create environment main module testing exist build execute dirname mkdir ', 'tfidf_method': 'copy execute execute_config_command create_testing_environment main build_modules build exists dirname mkdir ', 'lda_word': ' execute,build,create,copy,environment,', 'lda_method': ' build_modules,execute_config_command,main,build,copy,', 'lsi_word': ' execute,build,main,environment,create,', 'lsi_method': ' build,main,copy,create_testing_environment,build_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Load the resource infromation that all modules define. Public method to build the module by the given build_info object. Build all the modules and save the artifacts.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1342, 'parent': 1450, 'tfidf_word': 'config create dicts environment main merge module testing build execute ', 'tfidf_method': 'execute_config_command merge_dicts create_testing_environment main build_modules build execute ', 'lda_word': ' build,environment,create,dicts,module,', 'lda_method': ' create_testing_environment,merge_dicts,execute_config_command,build,build_modules,', 'lsi_word': ' build,execute,create,module,merge,', 'lsi_method': ' build,build_modules,main,merge_dicts,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br>', 'text_summary': 'Run the command defined in the build.config file. Public method to build the module by the given build_info object.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 151, 'parent': 1381, 'tfidf_word': 'EP: 151, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 175, 'parent': 1381, 'tfidf_word': 'EP: 175, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1172, 'parent': 1514, 'tfidf_word': 'get main module mount testing writable exist build dirname mkdir ', 'tfidf_method': 'copy execute create_testing_environment main build_modules build get exists dirname mkdir ', 'lda_word': ' build,execute,environment,create,copy,', 'lda_method': ' build,mount_fs_writable,copy,main,create_testing_environment,', 'lsi_word': ' build,environment,create,testing,module,', 'lsi_method': ' build_modules,copy,create_testing_environment,get,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Execute the given test. Build all the modules and save the artifacts.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1363, 'parent': 1514, 'tfidf_word': 'print build get relpath abspath log dicts basename merge fail ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' build,get,mount,writable,exec,', 'lda_method': ' create_testing_environment,build_modules,main,build,execute,', 'lsi_word': ' build,get,environment,writable,module,', 'lsi_method': ' get,build,execute,main,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given test. Helper function to print commands. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1046, 'parent': 1373, 'tfidf_word': 'exec shell init main execute command basename relpath log abspath ', 'tfidf_method': 'execute_config_command print_command create_testing_environment main init_modules build log abspath basename relpath ', 'lda_word': ' command,execute,testing,exec,init,', 'lda_method': ' main,execute,init_modules,exec_shell,build,', 'lsi_word': ' execute,command,build,environment,module,', 'lsi_method': ' build,exec_shell,main,print_command,init_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Return the absolute path. Execute all the init commands that the modules define. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1249, 'parent': 1373, 'tfidf_word': 'environment exec init main module shell testing fail get execute ', 'tfidf_method': 'exec_shell execute execute_config_command create_testing_environment main init_modules build fail get get ', 'lda_word': ' execute,main,module,command,environment,', 'lda_method': ' execute,exec_shell,execute_config_command,create_testing_environment,fail,', 'lsi_word': ' execute,create,shell,init,module,', 'lsi_method': ' execute,build,init_modules,main,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1250, 'parent': 1451, 'tfidf_word': 'create environment init main module testing exist execute dirname mkdir ', 'tfidf_method': 'copy execute execute_config_command create_testing_environment main init_modules build exists dirname mkdir ', 'lda_word': ' execute,module,testing,build,config,', 'lda_method': ' execute,create_testing_environment,copy,execute_config_command,main,', 'lsi_word': ' execute,copy,command,module,testing,', 'lsi_method': ' create_testing_environment,copy,init_modules,execute,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1344, 'parent': 1451, 'tfidf_word': 'config create dicts environment init main merge module testing execute ', 'tfidf_method': 'execute_config_command merge_dicts create_testing_environment main init_modules build execute ', 'lda_word': ' testing,dicts,merge,module,config,', 'lda_method': ' init_modules,execute_config_command,main,build,merge_dicts,', 'lsi_word': ' execute,build,main,module,merge,', 'lsi_method': ' execute_config_command,init_modules,main,merge_dicts,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 150, 'parent': 1614, 'tfidf_word': 'EP: 150, Name: main &rarr; create_testing_environment &rarr; encode_as_objdict &rarr; ObjectDict', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1521, 'parent': 1614, 'tfidf_word': 'create environment main testing dict join namespace ', 'tfidf_method': 'create_testing_environment main join namespace_as_dict ', 'lda_word': ' create,environment,testing,main,join,', 'lda_method': ' main,create_testing_environment,join,namespace_as_dict,', 'lsi_word': ' create,testing,main,environment,namespace,', 'lsi_method': ' main,create_testing_environment,join,namespace_as_dict,', 'spm_method': ' ', 'text_summary': 'Load the resource infromation that all modules define.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '137': 'join(utils.py)', '69': 'namespace_as_dict(__init__.py)'}}, {'key': 1426, 'parent': 1666, 'tfidf_word': 'module open testing file command exception exec fail timeout read ', 'tfidf_method': 'main build read_modules fail TimeoutException exec_command open open read_until open ', 'lda_word': ' read,file,open,module,main,', 'lda_method': ' create_testing_environment,read_config_file,main,read_modules,open,', 'lsi_word': ' read,file,environment,open,module,', 'lsi_method': ' build,create_testing_environment,read_modules,read_json_file,read_config_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Read JSON file. Public method to build the module by the given build_info object. Read JSON based configuration file.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1499, 'parent': 1666, 'tfidf_word': 'environment main module read testing exist get build fail join ', 'tfidf_method': 'create_testing_environment main build read_modules should_build exists fail join get get ', 'lda_word': ' build,environment,main,create,testing,', 'lda_method': ' main,build,read_modules,create_testing_environment,should_build,', 'lsi_word': ' build,create,testing,read,module,', 'lsi_method': ' read_modules,create_testing_environment,main,build,should_build,', 'spm_method': ' ', 'text_summary': 'Join one or more path components intelligently. Checks that the given path is exist. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 755, 'parent': 1345, 'tfidf_word': 'EP: 755, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1191, 'parent': 1345, 'tfidf_word': 'environment exist f mkdir mount writable login upload execute get ', 'tfidf_method': 'mount_fs_writable copy execute exists get_environment mkdir get upload execute login ', 'lda_word': ' get,writable,mkdir,environment,execute,', 'lda_method': ' execute,copy,mkdir,mount_fs_writable,get_environment,', 'lsi_word': ' get,execute,mkdir,mount,writable,', 'lsi_method': ' execute,copy,mount_fs_writable,mkdir,get_environment,', 'spm_method': '  &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br> &#187; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; mkdir(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': '', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 1228, 'parent': 1590, 'tfidf_word': 'copy execute f flash get mount writable dirname exist ', 'tfidf_method': 'mount_fs_writable copy execute flash get dirname exists ', 'lda_word': ' mount,flash,copy,dirname,writable,', 'lda_method': ' mount_fs_writable,copy,execute,flash,get,', 'lsi_word': ' flash,copy,execute,mount,writable,', 'lsi_method': ' copy,execute,get,mount_fs_writable,flash,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['flasher.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1469, 'parent': 1590, 'tfidf_word': 'environment f mount writable dirname exist login upload execute get ', 'tfidf_method': 'mount_fs_writable copy execute get_environment get dirname exists upload execute login ', 'lda_word': ' get,execute,mount,environment,upload,', 'lda_method': ' get_environment,execute,copy,get,mount_fs_writable,', 'lsi_word': ' get,execute,environment,mount,writable,', 'lsi_method': ' execute,copy,mount_fs_writable,get_environment,get,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; dirname(utils.py) . <br> &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': '', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)'}}, {'key': 1154, 'parent': 1498, 'tfidf_word': 'flash get mount print shell writable abspath basename log relpath ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command flash get log abspath basename relpath ', 'lda_word': ' execute,writable,mount,shell,print,', 'lda_method': ' exec_shell,print_command,execute,mount_fs_writable,get,', 'lsi_word': ' mount,flash,exec,shell,print,', 'lsi_method': ' print_command,mount_fs_writable,get,execute,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1438, 'parent': 1498, 'tfidf_word': 'f flash mount writable exec shell get dicts fail merge ', 'tfidf_method': 'mount_fs_writable execute flash get exec_shell fail merge_dicts get ', 'lda_word': ' get,writable,exec,mount,shell,', 'lda_method': ' get,execute,mount_fs_writable,flash,merge_dicts,', 'lsi_word': ' get,mount,flash,writable,execute,', 'lsi_method': ' get,execute,flash,mount_fs_writable,exec_shell,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1419, 'parent': 1681, 'tfidf_word': 'print execute relpath merge abspath dicts basename log fail get ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' get,execute,shell,exec,mount,', 'lda_method': ' execute,get,mount_fs_writable,login,get_environment,', 'lsi_word': ' get,execute,mount,writable,login,', 'lsi_method': ' execute,get,mount_fs_writable,login,get_environment,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1452, 'parent': 1681, 'tfidf_word': 'command print relpath abspath log dicts basename merge fail get ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' get,merge,upload,writable,dicts,', 'lda_method': ' get,get_environment,mount_fs_writable,execute,upload,', 'lsi_word': ' get,environment,writable,mount,upload,', 'lsi_method': ' get,mount_fs_writable,execute,upload,get_environment,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1251, 'parent': 1584, 'tfidf_word': 'f finalize get main module mount writable exist dirname mkdir ', 'tfidf_method': 'mount_fs_writable copy execute config_modules finalize main get exists dirname mkdir ', 'lda_word': ' writable,get,module,execute,finalize,', 'lda_method': ' finalize,config_modules,copy,main,execute,', 'lsi_word': ' config,execute,module,writable,mount,', 'lsi_method': ' config_modules,get,finalize,main,copy,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1420, 'parent': 1584, 'tfidf_word': 'command print get dicts fail log merge basename relpath abspath ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' get,module,exec,finalize,mount,', 'lda_method': ' finalize,config_modules,execute,mount_fs_writable,main,', 'lsi_word': ' get,main,mount,module,writable,', 'lsi_method': ' get,mount_fs_writable,finalize,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1252, 'parent': 1585, 'tfidf_word': 'finalize get main module mount patch writable exist dirname mkdir ', 'tfidf_method': 'mount_fs_writable copy execute finalize patch_modules main get exists dirname mkdir ', 'lda_word': ' dirname,module,finalize,writable,mount,', 'lda_method': ' get,copy,main,mount_fs_writable,finalize,', 'lsi_word': ' execute,get,finalize,patch,module,', 'lsi_method': ' mount_fs_writable,main,get,copy,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Remount the file system as writable. Public method to restore the project files.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1422, 'parent': 1585, 'tfidf_word': 'print command get log fail dicts basename relpath merge abspath ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' execute,mount,module,patch,finalize,', 'lda_method': ' log,execute,finalize,exec_shell,mount_fs_writable,', 'lsi_word': ' get,module,main,patch,mount,', 'lsi_method': ' get,finalize,main,execute,patch_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1253, 'parent': 1586, 'tfidf_word': 'f get init initialize module mount writable exist dirname mkdir ', 'tfidf_method': 'mount_fs_writable copy execute config_modules initialize __init__ get exists dirname mkdir ', 'lda_word': ' execute,module,get,exist,init,', 'lda_method': ' execute,copy,initialize,get,config_modules,', 'lsi_word': ' copy,module,execute,initialize,writable,', 'lsi_method': ' copy,execute,initialize,mount_fs_writable,get,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': '', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1421, 'parent': 1586, 'tfidf_word': 'print command get merge fail dicts basename relpath log abspath ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' writable,config,mount,init,shell,', 'lda_method': ' mount_fs_writable,initialize,get,exec_shell,init,', 'lsi_word': ' get,module,init,mount,writable,', 'lsi_method': ' get,execute,initialize,init,mount_fs_writable,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1254, 'parent': 1587, 'tfidf_word': 'get init initialize module mount patch writable exist dirname mkdir ', 'tfidf_method': 'mount_fs_writable copy execute initialize patch_modules __init__ get exists dirname mkdir ', 'lda_word': ' get,patch,mount,initialize,copy,', 'lda_method': ' execute,initialize,copy,mount_fs_writable,patch_modules,', 'lsi_word': ' initialize,copy,module,execute,mount,', 'lsi_method': ' execute,patch_modules,mount_fs_writable,get,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': '', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1423, 'parent': 1587, 'tfidf_word': 'command print get fail log merge dicts basename relpath abspath ', 'tfidf_method': 'get exec_shell print_command fail log abspath basename merge_dicts relpath get ', 'lda_word': ' merge,dicts,writable,patch,initialize,', 'lda_method': ' mount_fs_writable,get,init,initialize,patch_modules,', 'lsi_word': ' get,writable,patch,initialize,init,', 'lsi_method': ' get,initialize,patch_modules,execute,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 228, 'parent': 1156, 'tfidf_word': 'EP: 228, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1017, 'parent': 1156, 'tfidf_word': 'get main module mount read testing writable dirname exist build ', 'tfidf_method': 'copy execute create_testing_environment main build read_modules should_build get dirname exists ', 'lda_word': ' build,get,testing,environment,create,', 'lda_method': ' create_testing_environment,copy,should_build,mount_fs_writable,execute,', 'lsi_word': ' build,read,writable,module,testing,', 'lsi_method': ' execute,read_modules,copy,mount_fs_writable,should_build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 993, 'parent': 1339, 'tfidf_word': 'exec environment create command f build log relpath basename abspath ', 'tfidf_method': 'create_testing_environment main build read_modules should_build get log abspath basename relpath ', 'lda_word': ' build,main,log,execute,writable,', 'lda_method': ' execute,get,read_modules,exec_shell,main,', 'lsi_word': ' build,exec,module,main,shell,', 'lsi_method': ' mount_fs_writable,print_command,create_testing_environment,get,should_build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Public method to build the module by the given build_info object. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1180, 'parent': 1339, 'tfidf_word': 'main mount module shell exec build get fail dicts merge ', 'tfidf_method': 'create_testing_environment main build read_modules should_build get exec_shell fail merge_dicts get ', 'lda_word': ' build,module,mount,execute,environment,', 'lda_method': ' mount_fs_writable,should_build,execute,build,merge_dicts,', 'lsi_word': ' build,get,create,writable,mount,', 'lsi_method': ' get,build,execute,read_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Collect buildable modules and their build instructions. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1063, 'parent': 1417, 'tfidf_word': 'execute environment create copy f exist build mkdir dirname resolve ', 'tfidf_method': 'execute create_testing_environment main build read_modules should_build get exists dirname mkdir ', 'lda_word': ' resolve,build,environment,module,read,', 'lda_method': ' mount_fs_writable,resolve,main,get,resolve_symbol,', 'lsi_word': ' resolve,build,get,execute,testing,', 'lsi_method': ' copy,create_testing_environment,read_modules,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1238, 'parent': 1417, 'tfidf_word': 'get build relpath abspath fail dicts basename merge log resolve ', 'tfidf_method': 'get exec_shell print_command basename merge_dicts relpath get log fail abspath ', 'lda_word': ' resolve,abspath,build,execute,symbol,', 'lda_method': ' get,read_modules,should_build,resolve_string,resolve,', 'lsi_word': ' resolve,build,get,execute,testing,', 'lsi_method': ' get,main,should_build,execute,read_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Helper function to print commands. Resolve the given symbol. Execute the given test.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1065, 'parent': 1418, 'tfidf_word': 'execute copy config f exist read build mkdir dirname resolve ', 'tfidf_method': 'execute read_config_file flash build read_modules should_build get exists dirname mkdir ', 'lda_word': ' read,build,resolve,config,file,', 'lda_method': ' dirname,execute,read_modules,mount_fs_writable,flash,', 'lsi_word': ' resolve,build,read,flash,mount,', 'lsi_method': ' copy,flash,get,read_modules,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1240, 'parent': 1418, 'tfidf_word': 'get build log fail dicts relpath basename merge abspath resolve ', 'tfidf_method': 'get exec_shell print_command basename merge_dicts relpath get log fail abspath ', 'lda_word': ' build,read,resolve,module,get,', 'lda_method': ' log,read_config_file,flash,build,should_build,', 'lsi_word': ' resolve,build,read,get,mount,', 'lsi_method': ' get,execute,read_modules,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Resolve the given symbol. Execute the given test.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1066, 'parent': 1439, 'tfidf_word': 'execute environment create copy f exist build mkdir dirname resolve ', 'tfidf_method': 'copy execute create_testing_environment main build_modules build get exists dirname mkdir ', 'lda_word': ' resolve,build,execute,string,module,', 'lda_method': ' build,exist,main,execute,resolve_string,', 'lsi_word': ' resolve,build,module,testing,mount,', 'lsi_method': ' mount_fs_writable,copy,build_modules,resolve_string,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Build all the modules and save the artifacts. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1256, 'parent': 1439, 'tfidf_word': 'get build relpath abspath fail dicts basename merge log resolve ', 'tfidf_method': 'get exec_shell print_command abspath basename merge_dicts relpath get log fail ', 'lda_word': ' resolve,get,build,module,mount,', 'lda_method': ' fail,build_modules,main,exec_shell,get,', 'lsi_word': ' resolve,build,get,environment,testing,', 'lsi_method': ' get,execute,main,resolve_symbol,build_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Helper function to print commands. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1069, 'parent': 1440, 'tfidf_word': 'f execute copy config file exist build mkdir dirname resolve ', 'tfidf_method': 'copy execute read_config_file flash build_modules build get exists dirname mkdir ', 'lda_word': ' resolve,build,exist,config,symbol,', 'lda_method': ' flash,build,resolve_symbol,read_config_file,copy,', 'lsi_word': ' resolve,build,copy,mount,module,', 'lsi_method': ' copy,execute,mount_fs_writable,resolve_string,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1257, 'parent': 1440, 'tfidf_word': 'get build log fail dicts relpath basename merge abspath resolve ', 'tfidf_method': 'get exec_shell print_command abspath basename merge_dicts relpath log get fail ', 'lda_word': ' resolve,build,execute,string,exec,', 'lda_method': ' resolve_string,mount_fs_writable,build,get,flash,', 'lsi_word': ' resolve,build,get,execute,string,', 'lsi_method': ' get,resolve,build_modules,resolve_string,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Resolve the given symbol. Print a message with the given color.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1182, 'parent': 1617, 'tfidf_word': 'module string symbol testing get read abspath fail join resolve ', 'tfidf_method': 'read_config_file create_testing_environment main build read_modules fail abspath join get get ', 'lda_word': ' read,resolve,file,string,create,', 'lda_method': ' read_modules,create_testing_environment,resolve_string,read_config_file,resolve_symbol,', 'lsi_word': ' resolve,read,build,create,environment,', 'lsi_method': ' create_testing_environment,main,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1416, 'parent': 1617, 'tfidf_word': 'resolve basename relpath mkdir log fail dicts dirname merge abspath ', 'tfidf_method': 'exists merge_dicts mkdir abspath dirname relpath get log fail basename ', 'lda_word': ' resolve,read,merge,dicts,build,', 'lda_method': ' read_config_file,resolve_symbol,build,read_modules,get,', 'lsi_word': ' resolve,read,get,build,file,', 'lsi_method': ' get,build,resolve_symbol,resolve_string,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Checks that the given path is exist. Return the absolute path. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1488, 'parent': 1757, 'tfidf_word': 'resolve fail merge mkdir dirname relpath dicts basename log abspath ', 'tfidf_method': 'exists abspath basename dirname log merge_dicts mkdir relpath get fail ', 'lda_word': ' resolve,main,mount,string,writable,', 'lda_method': ' get,mount_fs_writable,resolve,resolve_string,execute,', 'lsi_word': ' resolve,get,mount,create,string,', 'lsi_method': ' get,create_testing_environment,main,mount_fs_writable,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1489, 'parent': 1757, 'tfidf_word': 'resolve basename relpath mkdir log dicts fail dirname merge abspath ', 'tfidf_method': 'exists abspath basename dirname get merge_dicts mkdir log relpath fail ', 'lda_word': ' resolve,writable,read,config,file,', 'lda_method': ' read_config_file,resolve_string,execute,get,flash,', 'lsi_word': ' resolve,get,config,execute,string,', 'lsi_method': ' get,execute,mount_fs_writable,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Return the absolute path. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 585, 'parent': 1447, 'tfidf_word': 'EP: 585, Name: execute &rarr; reset &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1443, 'parent': 1447, 'tfidf_word': 'exec fail get config init execute freya genromfs internet reset ', 'tfidf_method': 'fail exec_builtin execute get init_freya_config execute reset __init__ config_internet genromfs ', 'lda_word': ' exec,execute,builtin,fail,get,', 'lda_method': ' execute,fail,exec_builtin,get,reset,', 'lsi_word': ' execute,fail,builtin,exec,get,', 'lsi_method': ' execute,fail,get,exec_builtin,reset,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the built-in command.', 'files_count': 5, 'files': ['stm32f4dis.py', 'utils.py', 'builtins.py', 'console.py', 'testrunner.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 14, 'parent': 1380, 'tfidf_word': 'EP: 14, Name: upload &rarr; create_result &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 476, 'parent': 1380, 'tfidf_word': 'EP: 476, Name: read_testsets &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 721, 'parent': 1221, 'tfidf_word': 'EP: 721, Name: __init__ &rarr; __init__ &rarr; login &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 728, 'parent': 1221, 'tfidf_word': 'EP: 728, Name: __init__ &rarr; __init__ &rarr; login &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 8, 'parent': 1379, 'tfidf_word': 'EP: 8, Name: upload &rarr; create_result &rarr; write_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 533, 'parent': 1379, 'tfidf_word': 'EP: 533, Name: save &rarr; write_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1397, 'parent': 1647, 'tfidf_word': 'command exception exec execute open timeout login ', 'tfidf_method': 'TimeoutException exec_command open login execute login execute ', 'lda_word': ' execute,timeout,login,exec,exception,', 'lda_method': ' login,timeoutexception,exec_command,open,execute,', 'lsi_word': ' login,execute,open,timeout,exec,', 'lsi_method': ' login,execute,exec_command,open,timeoutexception,', 'spm_method': ' ', 'text_summary': 'Open the ssh port. Execute the given test. Execute the given command.', 'files_count': 5, 'files': ['stm32f4dis.py', 'serial_device.py', 'serialcom.py', 'utils.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 1609, 'parent': 1647, 'tfidf_word': 'main coverage info parse run data init load map save ', 'tfidf_method': 'exec_command open parse_coverage_info main main run run save __init__ load_map_data ', 'lda_word': ' exec,timeout,exception,open,command,', 'lda_method': ' exec_command,main,open,timeoutexception,load_map_data,', 'lsi_word': ' open,timeout,exception,exec,command,', 'lsi_method': ' exec_command,open,timeoutexception,main,parse_coverage_info,', 'spm_method': ' ', 'text_summary': 'Open the ssh port. Main method to run IoT.js or JerryScript tests. Save the current testresults into JSON format. Parse and create coverage information.', 'files_count': 6, 'files': ['testrunner.py', 'utils.py', 'serialcom.py', 'coverage_client.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '245': 'save(testrunner.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 626, 'parent': 1145, 'tfidf_word': 'EP: 626, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 709, 'parent': 1145, 'tfidf_word': 'EP: 709, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 613, 'parent': 1218, 'tfidf_word': 'EP: 613, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 696, 'parent': 1218, 'tfidf_word': 'EP: 696, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 492, 'parent': 1300, 'tfidf_word': 'EP: 492, Name: __init__ &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1293, 'parent': 1300, 'tfidf_word': 'copy execute exist mkdir config freya genromfs init internet ', 'tfidf_method': 'copy execute exists mkdir init_freya_config config_internet genromfs ', 'lda_word': ' copy,mkdir,exist,execute,config,', 'lda_method': ' execute,copy,mkdir,exist,genromfs,', 'lsi_word': ' copy,mkdir,execute,exist,config,', 'lsi_method': ' exist,mkdir,execute,copy,genromfs,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist. Execute the given test.', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 612, 'parent': 1313, 'tfidf_word': 'EP: 612, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 614, 'parent': 1313, 'tfidf_word': 'EP: 614, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 695, 'parent': 1319, 'tfidf_word': 'EP: 695, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 697, 'parent': 1319, 'tfidf_word': 'EP: 697, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1388, 'parent': 1640, 'tfidf_word': 'config copy execute freya init dirname exist ', 'tfidf_method': 'init_freya_config copy execute dirname exists ', 'lda_word': ' config,copy,freya,execute,init,', 'lda_method': ' init_freya_config,execute,copy,dirname,exist,', 'lsi_word': ' freya,execute,init,config,copy,', 'lsi_method': ' copy,execute,init_freya_config,exist,dirname,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1392, 'parent': 1640, 'tfidf_word': 'copy execute init dirname exist ', 'tfidf_method': 'copy execute __init__ dirname exists ', 'lda_word': ' copy,execute,exist,init,dirname,', 'lda_method': ' init,execute,copy,dirname,exist,', 'lsi_word': ' copy,execute,init,exist,dirname,', 'lsi_method': ' copy,execute,init,dirname,exist,', 'spm_method': ' ', 'text_summary': 'Copy src to dst. Return the folder name.', 'files_count': 2, 'files': ['testrunner.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1384, 'parent': 1645, 'tfidf_word': 'copy execute genromfs dirname exist ', 'tfidf_method': 'copy execute genromfs dirname exists ', 'lda_word': ' genromfs,copy,execute,dirname,exist,', 'lda_method': ' genromfs,execute,copy,exist,dirname,', 'lsi_word': ' copy,execute,genromfs,exist,dirname,', 'lsi_method': ' copy,execute,genromfs,dirname,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1386, 'parent': 1645, 'tfidf_word': 'config copy execute internet dirname exist ', 'tfidf_method': 'copy execute config_internet dirname exists ', 'lda_word': ' internet,config,execute,copy,dirname,', 'lda_method': ' config_internet,execute,copy,dirname,exist,', 'lsi_word': ' copy,execute,internet,config,exist,', 'lsi_method': ' copy,execute,config_internet,exist,dirname,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'97': 'config_internet(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 919, 'parent': 1236, 'tfidf_word': 'EP: 919, Name: main &rarr; build_app &rarr; exec_docker &rarr; exec_command &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 920, 'parent': 1236, 'tfidf_word': 'EP: 920, Name: main &rarr; build_app &rarr; exec_docker &rarr; exec_command &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 924, 'parent': 1325, 'tfidf_word': 'EP: 924, Name: main &rarr; run_docker &rarr; exec_command &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1324, 'parent': 1325, 'tfidf_word': 'docker exec main print run basename relpath command ', 'tfidf_method': 'exec_command main print_command run_docker basename relpath ', 'lda_word': ' command,exec,docker,print,run,', 'lda_method': ' run_docker,print_command,exec_command,basename,relpath,', 'lsi_word': ' command,docker,run,main,print,', 'lsi_method': ' exec_command,main,print_command,run_docker,relpath,', 'spm_method': ' ', 'text_summary': 'Helper function to print commands.', 'files_count': 2, 'files': ['travis_script.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '269': 'run_docker(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1315, 'parent': 1754, 'tfidf_word': 'exec execute login print command abspath basename relpath ', 'tfidf_method': 'execute login exec_command print_command abspath basename relpath ', 'lda_word': ' command,login,exec,print,relpath,', 'lda_method': ' exec_command,login,print_command,execute,basename,', 'lsi_word': ' command,print,execute,exec,login,', 'lsi_method': ' login,execute,exec_command,print_command,relpath,', 'spm_method': ' ', 'text_summary': 'Return the base name of pathname path. Execute the given test. Execute the given command.', 'files_count': 3, 'files': ['artik053.py', 'travis_script.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1674, 'parent': 1754, 'tfidf_word': 'print command abspath basename build execute info iotjs main relpath ', 'tfidf_method': 'exec_command print_command abspath basename relpath iotjs_build_info execute main ', 'lda_word': ' build,iotjs,command,info,relpath,', 'lda_method': ' exec_command,print_command,execute,basename,abspath,', 'lsi_word': ' command,print,exec,iotjs,info,', 'lsi_method': ' exec_command,print_command,abspath,iotjs_build_info,main,', 'spm_method': ' ', 'text_summary': 'Return the base name of pathname path. Execute the given command.', 'files_count': 4, 'files': ['travis_script.py', 'utils.py', 'stm32f4dis.py', 'device_base.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 772, 'parent': 1511, 'tfidf_word': 'EP: 772, Name: flash &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1507, 'parent': 1511, 'tfidf_word': 'json open create read environment main result testing testsets upload ', 'tfidf_method': 'fail read_json_file open create_result upload read_testsets create_testing_environment main ', 'lda_word': ' json,create,fail,result,open,', 'lda_method': ' open,fail,read_json_file,create_testing_environment,main,', 'lsi_word': ' read,open,file,fail,json,', 'lsi_method': ' fail,read_json_file,open,create_result,main,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'utils.py', 'telnetcom.py', 'console.py', 'testresult.py', 'testrunner.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 1505, 'parent': 1749, 'tfidf_word': 'fail login open build info iotjs init ', 'tfidf_method': 'fail open login __init__ iotjs_build_info __init__ __init__ ', 'lda_word': ' fail,init,open,login,info,', 'lda_method': ' login,fail,open,init,iotjs_build_info,', 'lsi_word': ' init,login,open,fail,iotjs,', 'lsi_method': ' init,fail,login,open,iotjs_build_info,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 6, 'files': ['device_base.py', 'telnetcom.py', 'console.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)'}}, {'key': 1672, 'parent': 1749, 'tfidf_word': 'info file json write load upload map result data create ', 'tfidf_method': 'write_json_file save parse_coverage_info main run create_result upload run main load_map_data ', 'lda_word': ' open,fail,result,create,upload,', 'lda_method': ' fail,open,save,write_json_file,main,', 'lsi_word': ' fail,open,main,json,file,', 'lsi_method': ' fail,open,main,write_json_file,save,', 'spm_method': ' ', 'text_summary': 'Parse and create coverage information. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Main method to run IoT.js or JerryScript tests. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 8, 'files': ['testresult.py', 'utils.py', 'telnetcom.py', 'console.py', 'testrunner.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 1512, 'parent': 1759, 'tfidf_word': 'file config environment flash main result testing testsets upload read ', 'tfidf_method': 'read_json_file open read_until read_config_file flash create_result upload read_testsets create_testing_environment main ', 'lda_word': ' read,file,json,open,create,', 'lda_method': ' read_json_file,read_until,open,read_testsets,create_result,', 'lsi_word': ' read,file,open,json,create,', 'lsi_method': ' read_until,open,read_json_file,flash,create_testing_environment,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information. Read JSON based configuration file.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'sshcom.py', '__main__.py', '__init__.py', 'testresult.py', 'testrunner.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 1750, 'parent': 1759, 'tfidf_word': 'json load upload iotjs map data result create build init ', 'tfidf_method': 'main load_map_data __init__ upload run create_result run main iotjs_build_info __init__ ', 'lda_word': ' init,login,open,read,main,', 'lda_method': ' open,read_until,main,run,write_json_file,', 'lsi_word': ' open,read,init,login,info,', 'lsi_method': ' read_until,open,init,login,main,', 'spm_method': ' ', 'text_summary': 'Parse and create coverage information. Receive data from the server until we get the expected pattern. Create a final JSON result file from the build and test information. Save the current testresults into JSON format. Write a JSON file from the given data.', 'files_count': 11, 'files': ['device_base.py', 'sshcom.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'testresult.py', 'utils.py', 'testrunner.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 1745, 'parent': 1840, 'tfidf_word': 'bytecode cp function get append jerry release insert send init ', 'tfidf_method': 'append _release_function get_message __init__ JerryBreakpoint JerryFunction __init__ _get_breakpoint send_breakpoint insert ', 'lda_word': ' message,send,process,main,bytecode,', 'lda_method': ' process_messages,main,parse_source,init,get_message,', 'lsi_word': ' message,main,process,send,parse,', 'lsi_method': ' main,process_messages,parse_source,send_message,send_bytecode_cp,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['coverage_client.py', 'testresult.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)'}}, {'key': 1836, 'parent': 1840, 'tfidf_word': 'testset exist get init section read remove send environment device ', 'tfidf_method': 'parse_arguments report_pass putc is_executable read_until report_final parse_arguments create_device is_broken_symlink execute ', 'lda_word': ' upload,file,build,iotjs,info,', 'lda_method': ' execute,fail,close,login,read_testsets,', 'lsi_word': ' init,read,run,fail,test,', 'lsi_method': ' init,fail,check_args,open,main,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run all the tests that are in the given testset. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Test whether a path exists. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'reporter.py', 'testresult.py', 'coverage_client.py', 'artik053.py', 'flasher.py', 'builtins.py', 'stm32f4dis.py', 'serial_device.py', 'ssh_device.py', 'device_base.py', 'lumpy.py', 'tester.py', 'rpi2.py', 'rpi3.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'simpletester.py', 'twisted_server.py', 'pseudo_terminal.py'], 'execution_path_count': 193, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '177': 'append(testresult.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '169': 'flash(flasher.py)', '99': 'get(builtins.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 523, 'parent': 1206, 'tfidf_word': 'EP: 523, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1205, 'parent': 1206, 'tfidf_word': 'commit exec execute info last print run shell basename log ', 'tfidf_method': 'exec_shell execute last_commit_info print_command run log basename ', 'lda_word': ' execute,run,command,info,commit,', 'lda_method': ' exec_shell,execute,run,last_commit_info,print_command,', 'lsi_word': ' execute,info,shell,run,print,', 'lsi_method': ' last_commit_info,print_command,run,execute,exec_shell,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 625, 'parent': 1220, 'tfidf_word': 'EP: 625, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 627, 'parent': 1220, 'tfidf_word': 'EP: 627, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 708, 'parent': 1226, 'tfidf_word': 'EP: 708, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 710, 'parent': 1226, 'tfidf_word': 'EP: 710, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 623, 'parent': 1148, 'tfidf_word': 'EP: 623, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1147, 'parent': 1148, 'tfidf_word': 'info last print run script shell execute abspath basename log ', 'tfidf_method': 'exec_shell execute last_commit_info print_command execute run_coverage_script log abspath basename ', 'lda_word': ' execute,script,last,command,commit,', 'lda_method': ' execute,print_command,run_coverage_script,exec_shell,last_commit_info,', 'lsi_word': ' execute,command,run,print,last,', 'lsi_method': ' execute,run_coverage_script,last_commit_info,print_command,exec_shell,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 619, 'parent': 1219, 'tfidf_word': 'EP: 619, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 624, 'parent': 1219, 'tfidf_word': 'EP: 624, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 706, 'parent': 1151, 'tfidf_word': 'EP: 706, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1150, 'parent': 1151, 'tfidf_word': 'info last print run script shell execute abspath basename log ', 'tfidf_method': 'exec_shell execute last_commit_info print_command execute run_coverage_script log abspath basename ', 'lda_word': ' execute,basename,run,coverage,last,', 'lda_method': ' execute,print_command,run_coverage_script,exec_shell,last_commit_info,', 'lsi_word': ' execute,command,run,print,last,', 'lsi_method': ' execute,exec_shell,run_coverage_script,last_commit_info,print_command,', 'spm_method': '  &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 702, 'parent': 1225, 'tfidf_word': 'EP: 702, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 707, 'parent': 1225, 'tfidf_word': 'EP: 707, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 618, 'parent': 1144, 'tfidf_word': 'EP: 618, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 701, 'parent': 1144, 'tfidf_word': 'EP: 701, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 605, 'parent': 1214, 'tfidf_word': 'EP: 605, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 688, 'parent': 1214, 'tfidf_word': 'EP: 688, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 484, 'parent': 1296, 'tfidf_word': 'EP: 484, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1289, 'parent': 1296, 'tfidf_word': 'exec execute fail get shell config freya genromfs init internet ', 'tfidf_method': 'fail exec_shell execute get init_freya_config config_internet genromfs ', 'lda_word': ' fail,exec,execute,shell,get,', 'lda_method': ' exec_shell,fail,get,execute,init_freya_config,', 'lsi_word': ' exec,get,execute,fail,shell,', 'lsi_method': ' get,execute,fail,exec_shell,init_freya_config,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Execute the shell command.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1217, 'parent': 1495, 'tfidf_word': 'exec print run script shell execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command execute run_coverage_script log abspath basename relpath ', 'lda_word': ' execute,command,run,shell,print,', 'lda_method': ' execute,exec_shell,run_coverage_script,print_command,relpath,', 'lsi_word': ' execute,command,script,coverage,run,', 'lsi_method': ' execute,run_coverage_script,print_command,exec_shell,relpath,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1312, 'parent': 1495, 'tfidf_word': 'coverage exec run script shell fail get execute ', 'tfidf_method': 'exec_shell execute execute run_coverage_script fail get ', 'lda_word': ' execute,shell,exec,coverage,script,', 'lda_method': ' execute,exec_shell,get,run_coverage_script,fail,', 'lsi_word': ' execute,run,shell,exec,script,', 'lsi_method': ' execute,exec_shell,run_coverage_script,fail,get,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1224, 'parent': 1496, 'tfidf_word': 'exec print run script shell execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command execute run_coverage_script log abspath basename relpath ', 'lda_word': ' abspath,execute,shell,run,exec,', 'lda_method': ' execute,print_command,run_coverage_script,exec_shell,basename,', 'lsi_word': ' execute,exec,command,coverage,print,', 'lsi_method': ' execute,print_command,run_coverage_script,exec_shell,relpath,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1318, 'parent': 1496, 'tfidf_word': 'coverage exec run script shell fail get execute ', 'tfidf_method': 'exec_shell execute execute run_coverage_script fail get ', 'lda_word': ' script,execute,exec,run,coverage,', 'lda_method': ' execute,exec_shell,run_coverage_script,fail,get,', 'lsi_word': ' execute,run,shell,script,exec,', 'lsi_method': ' execute,exec_shell,run_coverage_script,get,fail,', 'spm_method': ' ', 'text_summary': 'Start the client script. Execute the given test.', 'files_count': 4, 'files': ['ssh_device.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1299, 'parent': 1600, 'tfidf_word': 'command exec execute init print shell abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command __init__ log abspath basename relpath ', 'lda_word': ' shell,exec,print,init,command,', 'lda_method': ' init,print_command,execute,exec_shell,relpath,', 'lsi_word': ' command,init,print,execute,exec,', 'lsi_method': ' execute,exec_shell,print_command,init,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1391, 'parent': 1600, 'tfidf_word': 'exec execute init shell fail get ', 'tfidf_method': 'exec_shell execute __init__ fail get ', 'lda_word': ' init,shell,exec,execute,get,', 'lda_method': ' exec_shell,execute,fail,init,get,', 'lsi_word': ' exec,execute,init,shell,get,', 'lsi_method': ' execute,init,exec_shell,get,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1599, 'parent': 1764, 'tfidf_word': 'init shell command print abspath basename fail get log relpath ', 'tfidf_method': 'init_freya_config exec_shell execute print_command fail log abspath basename relpath get ', 'lda_word': ' init,freya,config,execute,shell,', 'lda_method': ' print_command,execute,init_freya_config,exec_shell,basename,', 'lsi_word': ' init,freya,config,shell,exec,', 'lsi_method': ' execute,exec_shell,init_freya_config,print_command,relpath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1763, 'parent': 1764, 'tfidf_word': 'print config genromfs internet abspath basename fail get log relpath ', 'tfidf_method': 'execute print_command config_internet genromfs fail log abspath basename relpath get ', 'lda_word': ' command,print,shell,exec,execute,', 'lda_method': ' exec_shell,execute,genromfs,print_command,config_internet,', 'lsi_word': ' shell,execute,exec,print,command,', 'lsi_method': ' execute,exec_shell,print_command,config_internet,genromfs,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Return a relative filepath to path from the start directory. Helper function to print commands. Execute the given test. Print a message with the given color.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)', '97': 'config_internet(builtins.py)'}}, {'key': 764, 'parent': 1231, 'tfidf_word': 'EP: 764, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1230, 'parent': 1231, 'tfidf_word': 'config exec flash print shell command execute abspath basename log ', 'tfidf_method': 'exec_shell execute execute_config_command print_command flash log abspath basename ', 'lda_word': ' command,execute,exec,shell,flash,', 'lda_method': ' exec_shell,execute,print_command,basename,flash,', 'lsi_word': ' execute,command,print,shell,flash,', 'lsi_method': ' execute,print_command,execute_config_command,exec_shell,flash,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['flasher.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 769, 'parent': 1578, 'tfidf_word': 'EP: 769, Name: flash &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1432, 'parent': 1578, 'tfidf_word': 'command config exec flash shell fail get execute ', 'tfidf_method': 'exec_shell execute execute_config_command flash fail get get ', 'lda_word': ' execute,exec,command,flash,config,', 'lda_method': ' fail,execute_config_command,exec_shell,execute,flash,', 'lsi_word': ' execute,flash,command,config,exec,', 'lsi_method': ' exec_shell,execute,execute_config_command,flash,get,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 767, 'parent': 1433, 'tfidf_word': 'EP: 767, Name: flash &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1322, 'parent': 1433, 'tfidf_word': 'command config copy flash dirname exist execute ', 'tfidf_method': 'copy execute execute_config_command flash dirname exists ', 'lda_word': ' execute,config,copy,command,flash,', 'lda_method': ' copy,execute,execute_config_command,flash,dirname,', 'lsi_word': ' execute,flash,copy,config,command,', 'lsi_method': ' execute,execute_config_command,flash,copy,dirname,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['flasher.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 557, 'parent': 1429, 'tfidf_word': 'EP: 557, Name: execute &rarr; reset &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1309, 'parent': 1429, 'tfidf_word': 'copy reset dirname exist execute ', 'tfidf_method': 'copy execute execute reset dirname exists ', 'lda_word': ' execute,reset,copy,dirname,exist,', 'lda_method': ' execute,copy,reset,dirname,exist,', 'lsi_word': ' execute,reset,copy,exist,dirname,', 'lsi_method': ' execute,reset,copy,dirname,exist,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['stm32f4dis.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1210, 'parent': 1595, 'tfidf_word': 'command exec print reset shell execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command execute reset log abspath basename relpath ', 'lda_word': ' execute,print,reset,command,exec,', 'lda_method': ' execute,print_command,exec_shell,reset,abspath,', 'lsi_word': ' execute,command,exec,shell,reset,', 'lsi_method': ' execute,reset,print_command,exec_shell,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['stm32f4dis.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1576, 'parent': 1595, 'tfidf_word': 'reset exec shell fail get execute dicts merge ', 'tfidf_method': 'execute execute reset exec_shell fail merge_dicts get get ', 'lda_word': ' execute,shell,exec,reset,get,', 'lda_method': ' execute,reset,merge_dicts,exec_shell,fail,', 'lsi_word': ' execute,reset,exec,shell,fail,', 'lsi_method': ' execute,reset,exec_shell,get,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['stm32f4dis.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 594, 'parent': 1431, 'tfidf_word': 'EP: 594, Name: execute &rarr; reset &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1311, 'parent': 1431, 'tfidf_word': 'copy reset dirname exist execute ', 'tfidf_method': 'copy execute execute reset dirname exists ', 'lda_word': ' execute,reset,copy,exist,dirname,', 'lda_method': ' execute,reset,copy,exist,dirname,', 'lsi_word': ' execute,copy,reset,exist,dirname,', 'lsi_method': ' execute,copy,reset,exist,dirname,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['artik053.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1213, 'parent': 1596, 'tfidf_word': 'command exec print reset shell execute abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command execute reset log abspath basename relpath ', 'lda_word': ' execute,command,print,shell,exec,', 'lda_method': ' execute,reset,print_command,exec_shell,relpath,', 'lsi_word': ' execute,command,exec,shell,print,', 'lsi_method': ' execute,exec_shell,reset,print_command,relpath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1577, 'parent': 1596, 'tfidf_word': 'reset exec shell fail get execute dicts merge ', 'tfidf_method': 'execute execute reset exec_shell fail merge_dicts get get ', 'lda_word': ' execute,reset,shell,exec,fail,', 'lda_method': ' execute,reset,merge_dicts,exec_shell,fail,', 'lsi_word': ' execute,reset,exec,shell,fail,', 'lsi_method': ' execute,reset,exec_shell,fail,get,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 325, 'parent': 1135, 'tfidf_word': 'EP: 325, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 327, 'parent': 1135, 'tfidf_word': 'EP: 327, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 323, 'parent': 1097, 'tfidf_word': 'EP: 323, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1096, 'parent': 1097, 'tfidf_word': 'execute finalize main module print shell patch abspath basename log ', 'tfidf_method': 'exec_shell execute patch print_command finalize patch_modules main log abspath basename ', 'lda_word': ' patch,command,shell,finalize,exec,', 'lda_method': ' exec_shell,patch,print_command,patch_modules,finalize,', 'lsi_word': ' patch,command,print,module,shell,', 'lsi_method': ' exec_shell,patch_modules,patch,print_command,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Public method to restore the project files. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 328, 'parent': 1376, 'tfidf_word': 'EP: 328, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1268, 'parent': 1376, 'tfidf_word': 'exec execute finalize main module shell fail get patch ', 'tfidf_method': 'exec_shell execute patch finalize patch_modules main fail get get ', 'lda_word': ' patch,main,shell,exec,finalize,', 'lda_method': ' exec_shell,finalize,patch,get,execute,', 'lsi_word': ' patch,exec,module,shell,execute,', 'lsi_method': ' main,patch_modules,patch,execute,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Public method to restore the project files. Apply the given patch to the given project.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 280, 'parent': 1133, 'tfidf_word': 'EP: 280, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 282, 'parent': 1133, 'tfidf_word': 'EP: 282, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 278, 'parent': 1090, 'tfidf_word': 'EP: 278, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1089, 'parent': 1090, 'tfidf_word': 'file finalize main module print restore shell abspath basename log ', 'tfidf_method': 'exec_shell execute print_command restore_file config_modules finalize main log abspath basename ', 'lda_word': ' basename,print,restore,finalize,file,', 'lda_method': ' main,print_command,exec_shell,config_modules,finalize,', 'lsi_word': ' main,file,restore,print,module,', 'lsi_method': ' execute,config_modules,main,restore_file,exec_shell,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Restore the modified project files. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 283, 'parent': 1375, 'tfidf_word': 'EP: 283, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1266, 'parent': 1375, 'tfidf_word': 'exec execute file finalize main module restore shell fail get ', 'tfidf_method': 'exec_shell execute restore_file config_modules finalize main fail get get ', 'lda_word': ' main,finalize,execute,restore,config,', 'lda_method': ' execute,config_modules,restore_file,finalize,main,', 'lsi_word': ' config,module,exec,restore,finalize,', 'lsi_method': ' config_modules,finalize,main,exec_shell,restore_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Public method to restore the project files. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 300, 'parent': 1365, 'tfidf_word': 'EP: 300, Name: main &rarr; finalize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; rmtree &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1186, 'parent': 1365, 'tfidf_word': 'config finalize main module remove symlink break exist file ', 'tfidf_method': 'remove symlink config_modules finalize main exists is_broken_symlink remove_file ', 'lda_word': ' remove,main,module,finalize,config,', 'lda_method': ' remove,config_modules,finalize,main,symlink,', 'lsi_word': ' symlink,remove,config,main,module,', 'lsi_method': ' remove,main,symlink,finalize,config_modules,', 'spm_method': ' ', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 271, 'parent': 1456, 'tfidf_word': 'EP: 271, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1364, 'parent': 1456, 'tfidf_word': 'finalize main module restore exist file remove break rmtree symlink ', 'tfidf_method': 'remove restore_file config_modules finalize main exists is_broken_symlink remove_file rmtree ', 'lda_word': ' config,restore,main,symlink,module,', 'lda_method': ' config_modules,finalize,remove,restore_file,main,', 'lsi_word': ' remove,file,finalize,module,main,', 'lsi_method': ' config_modules,remove,main,restore_file,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Remove the given file. Restore the modified project files. Checks that the given path is exist.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 288, 'parent': 1476, 'tfidf_word': 'EP: 288, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 304, 'parent': 1476, 'tfidf_word': 'EP: 304, Name: main &rarr; finalize &rarr; config_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 382, 'parent': 1137, 'tfidf_word': 'EP: 382, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 384, 'parent': 1137, 'tfidf_word': 'EP: 384, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 380, 'parent': 1100, 'tfidf_word': 'EP: 380, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1099, 'parent': 1100, 'tfidf_word': 'file init initialize module print restore shell abspath basename log ', 'tfidf_method': 'exec_shell execute print_command restore_file config_modules initialize __init__ log abspath basename ', 'lda_word': ' shell,print,module,initialize,restore,', 'lda_method': ' initialize,config_modules,exec_shell,execute,init,', 'lsi_word': ' command,module,initialize,file,print,', 'lsi_method': ' config_modules,execute,initialize,restore_file,print_command,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Public method to initialize the project.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 385, 'parent': 1377, 'tfidf_word': 'EP: 385, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1270, 'parent': 1377, 'tfidf_word': 'exec execute file init initialize module restore shell fail get ', 'tfidf_method': 'exec_shell execute restore_file config_modules initialize __init__ fail get get ', 'lda_word': ' execute,exec,get,module,shell,', 'lda_method': ' init,execute,initialize,restore_file,config_modules,', 'lsi_word': ' exec,execute,shell,restore,module,', 'lsi_method': ' config_modules,init,initialize,restore_file,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Execute the shell command. Restore the modified project files.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 402, 'parent': 1367, 'tfidf_word': 'EP: 402, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; rmtree &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1190, 'parent': 1367, 'tfidf_word': 'config init initialize module remove symlink break exist file ', 'tfidf_method': 'remove symlink config_modules initialize __init__ exists is_broken_symlink remove_file ', 'lda_word': ' remove,initialize,config,init,file,', 'lda_method': ' symlink,remove,initialize,config_modules,init,', 'lsi_word': ' remove,symlink,config,init,initialize,', 'lsi_method': ' initialize,init,symlink,remove,config_modules,', 'spm_method': ' ', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 373, 'parent': 1458, 'tfidf_word': 'EP: 373, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1366, 'parent': 1458, 'tfidf_word': 'init initialize module restore exist file remove break rmtree symlink ', 'tfidf_method': 'remove restore_file config_modules initialize __init__ exists is_broken_symlink remove_file rmtree ', 'lda_word': ' remove,file,initialize,init,restore,', 'lda_method': ' initialize,config_modules,remove,init,exist,', 'lsi_word': ' file,remove,config,init,restore,', 'lsi_method': ' config_modules,restore_file,init,initialize,remove,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; remove(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 390, 'parent': 1478, 'tfidf_word': 'EP: 390, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 406, 'parent': 1478, 'tfidf_word': 'EP: 406, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 439, 'parent': 1142, 'tfidf_word': 'EP: 439, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1141, 'parent': 1142, 'tfidf_word': 'execute fetch init initialize module print shell abspath basename log ', 'tfidf_method': 'exec_shell execute print_command fetch_modules initialize __init__ log abspath basename ', 'lda_word': ' fetch,execute,initialize,shell,exec,', 'lda_method': ' init,execute,initialize,fetch_modules,exec_shell,', 'lsi_word': ' execute,fetch,exec,initialize,module,', 'lsi_method': ' exec_shell,fetch_modules,initialize,print_command,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 433, 'parent': 1497, 'tfidf_word': 'EP: 433, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1453, 'parent': 1497, 'tfidf_word': 'fetch init initialize module exec shell fail get dicts merge ', 'tfidf_method': 'execute fetch_modules initialize __init__ exec_shell fail merge_dicts get get ', 'lda_word': ' fetch,module,execute,initialize,init,', 'lda_method': ' init,fetch_modules,execute,initialize,get,', 'lsi_word': ' module,init,fetch,initialize,execute,', 'lsi_method': ' fetch_modules,initialize,execute,init,exec_shell,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 442, 'parent': 1357, 'tfidf_word': 'EP: 442, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1203, 'parent': 1357, 'tfidf_word': 'copy execute fetch init initialize module dirname exist ', 'tfidf_method': 'copy execute fetch_modules initialize __init__ dirname exists ', 'lda_word': ' fetch,execute,init,copy,module,', 'lda_method': ' fetch_modules,execute,initialize,init,copy,', 'lsi_word': ' copy,initialize,module,fetch,init,', 'lsi_method': ' init,fetch_modules,initialize,execute,copy,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 431, 'parent': 1294, 'tfidf_word': 'EP: 431, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 432, 'parent': 1294, 'tfidf_word': 'EP: 432, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 407, 'parent': 1479, 'tfidf_word': 'EP: 407, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 418, 'parent': 1479, 'tfidf_word': 'EP: 418, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 428, 'parent': 1273, 'tfidf_word': 'EP: 428, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1139, 'parent': 1273, 'tfidf_word': 'copy execute init initialize module dirname exist patch ', 'tfidf_method': 'copy execute patch initialize patch_modules __init__ dirname exists ', 'lda_word': ' patch,initialize,init,execute,copy,', 'lda_method': ' patch,patch_modules,execute,exist,initialize,', 'lsi_word': ' patch,init,execute,initialize,module,', 'lsi_method': ' copy,patch,patch_modules,init,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Apply the given patch to the given project. Public method to initialize the project.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1107, 'parent': 1468, 'tfidf_word': 'init initialize module print shell patch abspath basename log relpath ', 'tfidf_method': 'execute patch print_command initialize patch_modules __init__ log abspath basename relpath ', 'lda_word': ' patch,execute,module,print,initialize,', 'lda_method': ' patch_modules,execute,init,exec_shell,initialize,', 'lsi_word': ' patch,shell,execute,exec,print,', 'lsi_method': ' initialize,init,execute,patch,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1378, 'parent': 1468, 'tfidf_word': 'init initialize module exec shell fail get patch dicts merge ', 'tfidf_method': 'execute patch initialize patch_modules __init__ exec_shell fail merge_dicts get get ', 'lda_word': ' patch,init,module,execute,shell,', 'lda_method': ' patch_modules,patch,initialize,init,execute,', 'lsi_word': ' patch,execute,initialize,init,module,', 'lsi_method': ' execute,patch,init,initialize,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Apply the given patch to the given project. Public method to initialize the project.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 131, 'parent': 967, 'tfidf_word': 'EP: 131, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 966, 'parent': 967, 'tfidf_word': 'exec environment create config build log basename command execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command print_command create_testing_environment main init_modules build log basename ', 'lda_word': ' resolve,execute,command,create,config,', 'lda_method': ' create_testing_environment,resolve_symbol,resolve_string,build,main,', 'lsi_word': ' resolve,execute,command,print,shell,', 'lsi_method': ' exec_shell,create_testing_environment,build,init_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Execute the shell command. Helper function to print commands.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 128, 'parent': 986, 'tfidf_word': 'EP: 128, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 133, 'parent': 986, 'tfidf_word': 'EP: 133, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 134, 'parent': 987, 'tfidf_word': 'EP: 134, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 136, 'parent': 987, 'tfidf_word': 'EP: 136, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 869, 'parent': 980, 'tfidf_word': 'EP: 869, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 979, 'parent': 980, 'tfidf_word': 'symbol exec build file log basename execute config command resolve ', 'tfidf_method': 'exec_shell execute execute_config_command print_command read_config_file flash init_modules build log basename ', 'lda_word': ' command,resolve,execute,print,config,', 'lda_method': ' execute,exec_shell,flash,print_command,resolve_symbol,', 'lsi_word': ' resolve,execute,config,command,build,', 'lsi_method': ' build,exec_shell,execute,init_modules,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute all the init commands that the modules define. Execute the shell command. Run the command defined in the build.config file.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 866, 'parent': 996, 'tfidf_word': 'EP: 866, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 871, 'parent': 996, 'tfidf_word': 'EP: 871, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 872, 'parent': 997, 'tfidf_word': 'EP: 872, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 874, 'parent': 997, 'tfidf_word': 'EP: 874, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 53, 'parent': 960, 'tfidf_word': 'EP: 53, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 959, 'parent': 960, 'tfidf_word': 'symbol module main execute command build basename log abspath resolve ', 'tfidf_method': 'execute execute_config_command print_command create_testing_environment main build_modules build log abspath basename ', 'lda_word': ' resolve,build,execute,command,symbol,', 'lda_method': ' resolve,execute_config_command,build_modules,exec_shell,main,', 'lsi_word': ' resolve,build,execute,command,environment,', 'lsi_method': ' build,execute,resolve,print_command,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Run the command defined in the build.config file. Execute the shell command. Helper function to print commands.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 48, 'parent': 1110, 'tfidf_word': 'EP: 48, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 982, 'parent': 1110, 'tfidf_word': 'module shell string symbol testing fail get build execute resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute execute_config_command create_testing_environment main build_modules build fail get ', 'lda_word': ' resolve,execute,build,main,string,', 'lda_method': ' resolve,execute,exec_shell,execute_config_command,build_modules,', 'lsi_word': ' resolve,execute,build,shell,testing,', 'lsi_method': ' build,main,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Execute the shell command. Run the command defined in the build.config file. Build all the modules and save the artifacts.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 36, 'parent': 1194, 'tfidf_word': 'EP: 36, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 60, 'parent': 1194, 'tfidf_word': 'EP: 60, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1111, 'parent': 1333, 'tfidf_word': 'module string symbol testing exist build execute dirname mkdir resolve ', 'tfidf_method': 'copy execute execute_config_command create_testing_environment main build_modules build exists dirname mkdir ', 'lda_word': ' resolve,execute,build,config,main,', 'lda_method': ' main,build,resolve_string,create_testing_environment,resolve_symbol,', 'lsi_word': ' resolve,execute,build,testing,command,', 'lsi_method': ' create_testing_environment,build_modules,execute,resolve_symbol,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Load the resource infromation that all modules define. Build all the modules and save the artifacts.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1160, 'parent': 1333, 'tfidf_word': 'environment main merge module string symbol testing build execute resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol execute_config_command merge_dicts create_testing_environment main build_modules build execute ', 'lda_word': ' build,resolve,dicts,execute,command,', 'lda_method': ' build,execute_config_command,merge_dicts,resolve,resolve_string,', 'lsi_word': ' resolve,build,execute,command,main,', 'lsi_method': ' merge_dicts,execute_config_command,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 794, 'parent': 973, 'tfidf_word': 'EP: 794, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 972, 'parent': 973, 'tfidf_word': 'symbol exec config command build execute log basename abspath resolve ', 'tfidf_method': 'execute execute_config_command print_command read_config_file flash build_modules build log abspath basename ', 'lda_word': ' resolve,command,execute,config,build,', 'lda_method': ' exec_shell,flash,execute_config_command,resolve_symbol,build_modules,', 'lsi_word': ' resolve,command,config,execute,build,', 'lsi_method': ' build,resolve,execute_config_command,read_config_file,print_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Recursively replace the symbols in the given string. Return the base name of pathname path. Run the command defined in the build.config file. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 789, 'parent': 1116, 'tfidf_word': 'EP: 789, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 994, 'parent': 1116, 'tfidf_word': 'read shell string symbol fail get build config execute resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute execute_config_command read_config_file flash build_modules build fail get ', 'lda_word': ' resolve,execute,config,module,file,', 'lda_method': ' read_config_file,resolve_symbol,build_modules,execute_config_command,resolve_string,', 'lsi_word': ' resolve,build,config,execute,read,', 'lsi_method': ' execute,exec_shell,build,read_config_file,execute_config_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Execute the shell command. Run the command defined in the build.config file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 777, 'parent': 1234, 'tfidf_word': 'EP: 777, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 801, 'parent': 1234, 'tfidf_word': 'EP: 801, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1117, 'parent': 1334, 'tfidf_word': 'read string symbol exist build config execute dirname mkdir resolve ', 'tfidf_method': 'copy execute execute_config_command read_config_file flash build_modules build exists dirname mkdir ', 'lda_word': ' resolve,build,config,execute,module,', 'lda_method': ' execute_config_command,resolve_string,execute,resolve_symbol,resolve,', 'lsi_word': ' resolve,config,execute,build,string,', 'lsi_method': ' resolve_symbol,execute_config_command,resolve_string,build_modules,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Build all the modules and save the artifacts. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1163, 'parent': 1334, 'tfidf_word': 'flash merge module read string symbol build config execute resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol execute_config_command merge_dicts read_config_file flash build_modules build execute ', 'lda_word': ' resolve,build,config,symbol,command,', 'lda_method': ' resolve,merge_dicts,read_config_file,flash,resolve_symbol,', 'lsi_word': ' resolve,config,build,execute,command,', 'lsi_method': ' build,build_modules,read_config_file,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; merge_dicts(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Run the command defined in the build.config file. Build all the modules and save the artifacts.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)'}}, {'key': 123, 'parent': 1031, 'tfidf_word': 'EP: 123, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; save_artifacts &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 125, 'parent': 1031, 'tfidf_word': 'EP: 125, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; save_artifacts &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 861, 'parent': 1062, 'tfidf_word': 'EP: 861, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; save_artifacts &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 863, 'parent': 1062, 'tfidf_word': 'EP: 863, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; save_artifacts &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 35, 'parent': 1193, 'tfidf_word': 'EP: 35, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1192, 'parent': 1193, 'tfidf_word': 'create environment main string symbol testing abspath join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main abspath join ', 'lda_word': ' resolve,main,environment,symbol,create,', 'lda_method': ' resolve_string,resolve_symbol,create_testing_environment,main,resolve,', 'lsi_word': ' resolve,environment,testing,symbol,main,', 'lsi_method': ' resolve,create_testing_environment,resolve_symbol,resolve_string,main,', 'spm_method': ' ', 'text_summary': 'Resolve the given symbol. Join one or more path components intelligently.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 119, 'parent': 1274, 'tfidf_word': 'EP: 119, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1197, 'parent': 1274, 'tfidf_word': 'main module open string symbol testing fail file resolve read ', 'tfidf_method': 'read_config_file read_json_file create_testing_environment main build read_modules fail open read_until open ', 'lda_word': ' read,resolve,file,build,config,', 'lda_method': ' resolve_symbol,open,read_config_file,read_modules,create_testing_environment,', 'lsi_word': ' read,resolve,file,open,build,', 'lsi_method': ' create_testing_environment,open,read_modules,read_json_file,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read JSON based configuration file. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1081, 'parent': 1347, 'tfidf_word': 'environment main module read string symbol testing exist join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main build read_modules exists join ', 'lda_word': ' resolve,build,symbol,string,read,', 'lda_method': ' resolve_symbol,resolve_string,resolve,create_testing_environment,build,', 'lsi_word': ' resolve,build,read,string,symbol,', 'lsi_method': ' create_testing_environment,resolve_symbol,resolve_string,main,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)'}}, {'key': 1170, 'parent': 1347, 'tfidf_word': 'module read string symbol testing get build exist fail resolve ', 'tfidf_method': 'resolve_symbol create_testing_environment main build read_modules should_build fail exists get get ', 'lda_word': ' resolve,build,read,string,environment,', 'lda_method': ' should_build,main,resolve_string,build,resolve_symbol,', 'lsi_word': ' resolve,build,main,string,symbol,', 'lsi_method': ' resolve,read_modules,should_build,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'utils.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '134': 'exists(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 84, 'parent': 1168, 'tfidf_word': 'EP: 84, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 825, 'parent': 1168, 'tfidf_word': 'EP: 825, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 64, 'parent': 1195, 'tfidf_word': 'EP: 64, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 805, 'parent': 1195, 'tfidf_word': 'EP: 805, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 66, 'parent': 1243, 'tfidf_word': 'EP: 66, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1241, 'parent': 1243, 'tfidf_word': 'environment file create build exist mkdir open read dirname resolve ', 'tfidf_method': 'write_json_file create_testing_environment main build create_build_info dirname exists mkdir open read_until ', 'lda_word': ' resolve,create,build,string,testing,', 'lda_method': ' build,write_json_file,create_build_info,resolve,create_testing_environment,', 'lsi_word': ' resolve,create,build,info,main,', 'lsi_method': ' create_testing_environment,resolve_symbol,main,resolve_string,write_json_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Write a JSON file from the given data. Load the resource infromation that all modules define.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1007, 'parent': 1460, 'tfidf_word': 'symbol get map fill memory entry line append resolve section ', 'tfidf_method': 'build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_fill try_match_section try_match_symbol ', 'lda_word': ' resolve,build,create,section,main,', 'lda_method': ' append,calculate_section_sizes,resolve_string,resolve_symbol,resolve,', 'lsi_word': ' resolve,section,create,build,symbol,', 'lsi_method': ' build,main,resolve_symbol,calculate_section_sizes,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Return the sizes of the main sections. Load the resource infromation that all modules define.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '92': 'try_match_section(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1424, 'parent': 1460, 'tfidf_word': 'open join section hoist exist date read current fail resolve ', 'tfidf_method': 'calculate_section_sizes load_map_data join hoist_section fail open exists current_date open read_until ', 'lda_word': ' resolve,create,build,testing,section,', 'lda_method': ' resolve_string,join,main,create_testing_environment,resolve,', 'lsi_word': ' resolve,build,create,testing,symbol,', 'lsi_method': ' resolve_string,create_testing_environment,main,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Return the sizes of the main sections.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 806, 'parent': 1242, 'tfidf_word': 'EP: 806, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1165, 'parent': 1242, 'tfidf_word': 'read string symbol write dirname exist mkdir build file resolve ', 'tfidf_method': 'resolve_string resolve_symbol read_config_file write_json_file flash build create_build_info dirname exists mkdir ', 'lda_word': ' resolve,build,file,string,flash,', 'lda_method': ' create_build_info,flash,resolve_string,write_json_file,read_config_file,', 'lsi_word': ' resolve,file,build,symbol,string,', 'lsi_method': ' resolve,resolve_symbol,flash,write_json_file,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Write a JSON file from the given data.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 833, 'parent': 1022, 'tfidf_word': 'EP: 833, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1021, 'parent': 1022, 'tfidf_word': 'section symbol append map get fill entry memory line resolve ', 'tfidf_method': 'flash build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_fill try_match_symbol ', 'lda_word': ' resolve,build,parse,create,section,', 'lda_method': ' append,create_build_info,parse_to_sections,flash,read_config_file,', 'lsi_word': ' resolve,build,section,symbol,read,', 'lsi_method': ' build,resolve,flash,resolve_string,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write binary size and commit information into a file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1235, 'parent': 1425, 'tfidf_word': 'file data create config calculate flash fail read build resolve ', 'tfidf_method': 'read_config_file flash build load_map_data calculate_section_sizes create_build_info fail open read_until open ', 'lda_word': ' resolve,build,section,fail,string,', 'lda_method': ' calculate_section_sizes,fail,resolve_symbol,load_map_data,read_config_file,', 'lsi_word': ' resolve,build,read,file,config,', 'lsi_method': ' read_config_file,load_map_data,flash,resolve_string,create_build_info,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write binary size and commit information into a file. Return the sizes of the main sections.', 'files_count': 8, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1338, 'parent': 1425, 'tfidf_word': 'calculate size join build exist current hoist date resolve section ', 'tfidf_method': 'resolve_symbol read_config_file flash build create_build_info calculate_section_sizes join current_date exists hoist_section ', 'lda_word': ' resolve,build,config,string,symbol,', 'lda_method': ' resolve_string,build,create_build_info,resolve_symbol,flash,', 'lsi_word': ' resolve,build,string,read,config,', 'lsi_method': ' resolve,flash,build,resolve_symbol,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol. Write binary size and commit information into a file.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 859, 'parent': 1109, 'tfidf_word': 'EP: 859, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 860, 'parent': 1109, 'tfidf_word': 'EP: 860, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 846, 'parent': 1175, 'tfidf_word': 'EP: 846, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1061, 'parent': 1175, 'tfidf_word': 'file flash module string symbol exist get build read resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash build read_modules should_build exists get ', 'lda_word': ' resolve,read,config,build,flash,', 'lda_method': ' read_config_file,build,read_modules,resolve,resolve_string,', 'lsi_word': ' resolve,read,build,symbol,string,', 'lsi_method': ' resolve_symbol,read_modules,read_config_file,flash,should_build,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '134': 'exists(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 776, 'parent': 1233, 'tfidf_word': 'EP: 776, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1232, 'parent': 1233, 'tfidf_word': 'config file flash read string symbol abspath join resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash abspath join ', 'lda_word': ' resolve,string,symbol,flash,read,', 'lda_method': ' resolve_string,flash,resolve,resolve_symbol,read_config_file,', 'lsi_word': ' resolve,config,file,symbol,string,', 'lsi_method': ' flash,resolve,read_config_file,resolve_symbol,resolve_string,', 'spm_method': ' ', 'text_summary': 'Resolve the given symbol. Join one or more path components intelligently. Return the absolute path.', 'files_count': 3, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 102, 'parent': 1068, 'tfidf_word': 'EP: 102, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 965, 'parent': 1068, 'tfidf_word': 'execute environment copy calculate info exist dirname create build resolve ', 'tfidf_method': 'copy execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs dirname exists ', 'lda_word': ' resolve,build,info,create,testing,', 'lda_method': ' dirname,resolve_symbol,copy,execute,resolve_string,', 'lsi_word': ' resolve,create,build,testing,environment,', 'lsi_method': ' copy,resolve_symbol,create_build_info,resolve_string,read_objects_from_libs,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Return the sizes of the main sections. Public method to build the module by the given build_info object. Read all the names of the object files that are.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 943, 'parent': 1263, 'tfidf_word': 'string execute section create build abspath relpath basename log resolve ', 'tfidf_method': 'create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs log abspath basename relpath ', 'lda_word': ' resolve,create,build,libs,read,', 'lda_method': ' resolve,resolve_symbol,create_testing_environment,build,resolve_string,', 'lsi_word': ' resolve,build,create,object,libs,', 'lsi_method': ' exec_shell,resolve_symbol,build,create_testing_environment,read_objects_from_libs,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1158, 'parent': 1263, 'tfidf_word': 'calculate exec shell fail get create build merge dicts resolve ', 'tfidf_method': 'main build calculate_section_sizes create_build_info read_objects_from_libs exec_shell fail merge_dicts get get ', 'lda_word': ' resolve,create,build,environment,main,', 'lda_method': ' create_build_info,read_objects_from_libs,create_testing_environment,build,resolve,', 'lsi_word': ' resolve,create,build,read,calculate,', 'lsi_method': ' resolve,create_build_info,calculate_section_sizes,build,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 843, 'parent': 1071, 'tfidf_word': 'EP: 843, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 978, 'parent': 1071, 'tfidf_word': 'execute create copy config calculate dirname exist read build resolve ', 'tfidf_method': 'copy execute read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs dirname exists ', 'lda_word': ' resolve,read,copy,symbol,build,', 'lda_method': ' resolve_symbol,flash,resolve_string,resolve,build,', 'lsi_word': ' resolve,read,build,calculate,copy,', 'lsi_method': ' execute,flash,resolve_symbol,read_objects_from_libs,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read all the names of the object files that are. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 953, 'parent': 1264, 'tfidf_word': 'command calculate file read build log relpath basename abspath resolve ', 'tfidf_method': 'read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs log abspath basename relpath ', 'lda_word': ' resolve,read,build,exec,flash,', 'lda_method': ' build,resolve,read_config_file,print_command,resolve_symbol,', 'lsi_word': ' resolve,read,build,config,info,', 'lsi_method': ' flash,read_config_file,resolve_symbol,build,read_objects_from_libs,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Read all the names of the object files that are. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read JSON based configuration file. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1159, 'parent': 1264, 'tfidf_word': 'object exec shell get fail read build merge dicts resolve ', 'tfidf_method': 'flash build calculate_section_sizes create_build_info read_objects_from_libs exec_shell fail merge_dicts get get ', 'lda_word': ' resolve,read,build,get,shell,', 'lda_method': ' resolve_string,execute,calculate_section_sizes,exec_shell,fail,', 'lsi_word': ' resolve,read,build,execute,create,', 'lsi_method': ' flash,read_objects_from_libs,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read all the names of the object files that are. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 818, 'parent': 1121, 'tfidf_word': 'EP: 818, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 999, 'parent': 1121, 'tfidf_word': 'flash last read string symbol dirname exist build info resolve ', 'tfidf_method': 'resolve_symbol copy execute last_commit_info read_config_file flash build create_build_info dirname exists ', 'lda_word': ' resolve,build,info,dirname,symbol,', 'lda_method': ' resolve_string,exist,copy,read_config_file,resolve,', 'lsi_word': ' resolve,info,build,commit,copy,', 'lsi_method': ' copy,flash,resolve_symbol,resolve_string,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Get last commit information about the submodules.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 976, 'parent': 1331, 'tfidf_word': 'commit command exec info build log relpath basename abspath resolve ', 'tfidf_method': 'last_commit_info print_command read_config_file flash build create_build_info log abspath basename relpath ', 'lda_word': ' resolve,info,build,execute,commit,', 'lda_method': ' abspath,print_command,build,resolve_symbol,exec_shell,', 'lsi_word': ' resolve,info,build,config,print,', 'lsi_method': ' last_commit_info,print_command,flash,resolve_symbol,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1178, 'parent': 1331, 'tfidf_word': 'commit shell exec fail get info build dicts merge resolve ', 'tfidf_method': 'last_commit_info read_config_file flash build create_build_info exec_shell fail merge_dicts get get ', 'lda_word': ' info,resolve,build,config,commit,', 'lda_method': ' build,resolve_string,resolve_symbol,read_config_file,flash,', 'lsi_word': ' resolve,build,info,create,commit,', 'lsi_method': ' build,create_build_info,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 80, 'parent': 1258, 'tfidf_word': 'EP: 80, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; info &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 821, 'parent': 1258, 'tfidf_word': 'EP: 821, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; info &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1113, 'parent': 1463, 'tfidf_word': 'string symbol testing exist build create info dirname mkdir resolve ', 'tfidf_method': 'copy execute last_commit_info create_testing_environment main build create_build_info exists dirname mkdir ', 'lda_word': ' resolve,create,info,string,build,', 'lda_method': ' last_commit_info,resolve,resolve_symbol,build,main,', 'lsi_word': ' resolve,build,info,create,environment,', 'lsi_method': ' create_build_info,copy,resolve_string,main,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Get last commit information about the submodules. Load the resource infromation that all modules define.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1332, 'parent': 1463, 'tfidf_word': 'info get fail resolve merge relpath dicts basename log abspath ', 'tfidf_method': 'exec_shell print_command fail relpath get basename abspath log merge_dicts get ', 'lda_word': ' info,create,build,resolve,last,', 'lda_method': ' resolve_symbol,resolve,build,execute,main,', 'lsi_word': ' resolve,info,create,build,main,', 'lsi_method': ' create_build_info,main,last_commit_info,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Helper function to print commands. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'builtins.py', 'coverage_client.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 188, 'parent': 1038, 'tfidf_word': 'EP: 188, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1037, 'parent': 1038, 'tfidf_word': 'last main print shell testing basename log build create info ', 'tfidf_method': 'exec_shell execute last_commit_info print_command create_testing_environment main build create_build_info log basename ', 'lda_word': ' build,create,shell,info,testing,', 'lda_method': ' last_commit_info,print_command,execute,main,exec_shell,', 'lsi_word': ' create,info,build,environment,command,', 'lsi_method': ' build,create_build_info,execute,create_testing_environment,last_commit_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given test. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 184, 'parent': 1247, 'tfidf_word': 'EP: 184, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1084, 'parent': 1247, 'tfidf_word': 'execute last main shell testing fail get build create info ', 'tfidf_method': 'exec_shell execute last_commit_info create_testing_environment main build create_build_info fail get ', 'lda_word': ' build,info,create,testing,exec,', 'lda_method': ' execute,create_testing_environment,last_commit_info,create_build_info,get,', 'lsi_word': ' build,info,create,execute,exec,', 'lsi_method': ' build,main,execute,create_testing_environment,exec_shell,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 216, 'parent': 1041, 'tfidf_word': 'EP: 216, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 218, 'parent': 1041, 'tfidf_word': 'EP: 218, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 214, 'parent': 1015, 'tfidf_word': 'EP: 214, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1014, 'parent': 1015, 'tfidf_word': 'exec environment command calculate execute create build log basename abspath ', 'tfidf_method': 'print_command create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs log abspath basename ', 'lda_word': ' build,create,size,calculate,print,', 'lda_method': ' read_objects_from_libs,exec_shell,main,create_build_info,execute,', 'lsi_word': ' create,build,exec,object,shell,', 'lsi_method': ' build,print_command,main,execute,read_objects_from_libs,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 219, 'parent': 1265, 'tfidf_word': 'EP: 219, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1173, 'parent': 1265, 'tfidf_word': 'size testing execute exec environment calculate fail get create build ', 'tfidf_method': 'execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs fail get get ', 'lda_word': ' build,create,read,size,main,', 'lda_method': ' fail,create_build_info,create_testing_environment,exec_shell,build,', 'lsi_word': ' build,create,calculate,read,object,', 'lsi_method': ' create_build_info,execute,exec_shell,main,read_objects_from_libs,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 207, 'parent': 1131, 'tfidf_word': 'EP: 207, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1130, 'parent': 1131, 'tfidf_word': 'create section symbol append map get fill entry memory line ', 'tfidf_method': 'main build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_fill try_match_symbol ', 'lda_word': ' section,build,create,get,memory,', 'lda_method': ' main,parse_to_sections,create_testing_environment,build,calculate_section_sizes,', 'lsi_word': ' build,section,create,calculate,info,', 'lsi_method': ' main,parse_to_sections,calculate_section_sizes,build,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Return the sizes of the main sections. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1199, 'parent': 1481, 'tfidf_word': 'info main size testing build create section exist hoist join ', 'tfidf_method': 'create_testing_environment main build calculate_section_sizes create_build_info exists join hoist_section ', 'lda_word': ' build,create,testing,calculate,environment,', 'lda_method': ' create_testing_environment,calculate_section_sizes,main,build,create_build_info,', 'lsi_word': ' create,build,section,environment,info,', 'lsi_method': ' main,create_testing_environment,calculate_section_sizes,create_build_info,build,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist. Public method to build the module by the given build_info object.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)'}}, {'key': 1349, 'parent': 1481, 'tfidf_word': 'main map open section size testing fail read build create ', 'tfidf_method': 'create_testing_environment main build load_map_data calculate_section_sizes create_build_info fail open read_until open ', 'lda_word': ' build,create,load,map,data,', 'lda_method': ' main,open,create_build_info,load_map_data,calculate_section_sizes,', 'lsi_word': ' build,create,section,size,environment,', 'lsi_method': ' build,create_testing_environment,load_map_data,open,calculate_section_sizes,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 179, 'parent': 1382, 'tfidf_word': 'EP: 179, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 199, 'parent': 1382, 'tfidf_word': 'EP: 199, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1374, 'parent': 1593, 'tfidf_word': 'testing write open build create dirname exist fail mkdir read ', 'tfidf_method': 'main build create_build_info fail dirname exists mkdir open read_until open ', 'lda_word': ' create,build,write,file,info,', 'lda_method': ' main,build,create_testing_environment,create_build_info,write_json_file,', 'lsi_word': ' build,create,json,write,testing,', 'lsi_method': ' create_build_info,create_testing_environment,write_json_file,main,build,', 'spm_method': ' ', 'text_summary': 'Write a JSON file from the given data. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1486, 'parent': 1593, 'tfidf_word': 'testing build create commit current date join last log info ', 'tfidf_method': 'create_testing_environment main build create_build_info info log current_date join last_commit_info ', 'lda_word': ' info,create,build,main,environment,', 'lda_method': ' main,create_build_info,build,create_testing_environment,log,', 'lsi_word': ' build,create,info,main,testing,', 'lsi_method': ' build,create_testing_environment,create_build_info,main,last_commit_info,', 'spm_method': ' ', 'text_summary': 'Public method to build the module by the given build_info object. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 168, 'parent': 1036, 'tfidf_word': 'EP: 168, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1035, 'parent': 1036, 'tfidf_word': 'module print shell testing build command execute abspath basename log ', 'tfidf_method': 'execute execute_config_command print_command create_testing_environment main build_modules build log abspath basename ', 'lda_word': ' command,execute,build,module,exec,', 'lda_method': ' execute,execute_config_command,print_command,create_testing_environment,build_modules,', 'lsi_word': ' execute,build,command,print,exec,', 'lsi_method': ' build_modules,build,create_testing_environment,execute_config_command,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Run the command defined in the build.config file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 163, 'parent': 1245, 'tfidf_word': 'EP: 163, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1082, 'parent': 1245, 'tfidf_word': 'environment exec main module shell testing fail get build execute ', 'tfidf_method': 'exec_shell execute execute_config_command create_testing_environment main build_modules build fail get ', 'lda_word': ' build,execute,testing,create,config,', 'lda_method': ' create_testing_environment,execute_config_command,main,exec_shell,execute,', 'lsi_word': ' execute,build,command,create,module,', 'lsi_method': ' build,main,create_testing_environment,execute,build_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Run the command defined in the build.config file. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 171, 'parent': 1246, 'tfidf_word': 'EP: 171, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1083, 'parent': 1246, 'tfidf_word': 'copy create environment main module testing dirname exist build execute ', 'tfidf_method': 'copy execute execute_config_command create_testing_environment main build_modules build dirname exists ', 'lda_word': ' build,execute,module,create,copy,', 'lda_method': ' build,execute_config_command,main,execute,build_modules,', 'lsi_word': ' execute,build,environment,copy,module,', 'lsi_method': ' build,main,execute,create_testing_environment,copy,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Build all the modules and save the artifacts.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 173, 'parent': 1342, 'tfidf_word': 'EP: 173, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 174, 'parent': 1342, 'tfidf_word': 'EP: 174, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 159, 'parent': 1172, 'tfidf_word': 'EP: 159, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1033, 'parent': 1172, 'tfidf_word': 'f get main module mount testing writable dirname exist build ', 'tfidf_method': 'mount_fs_writable copy execute create_testing_environment main build_modules build get dirname exists ', 'lda_word': ' build,copy,create,writable,module,', 'lda_method': ' main,copy,mount_fs_writable,create_testing_environment,exist,', 'lsi_word': ' build,create,testing,module,writable,', 'lsi_method': ' build_modules,execute,create_testing_environment,get,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1012, 'parent': 1363, 'tfidf_word': 'exec environment create command execute build log relpath basename abspath ', 'tfidf_method': 'print_command create_testing_environment main build_modules build get log abspath basename relpath ', 'lda_word': ' build,log,print,module,mount,', 'lda_method': ' create_testing_environment,execute,build_modules,mount_fs_writable,exec_shell,', 'lsi_word': ' build,exec,writable,mount,testing,', 'lsi_method': ' build_modules,exec_shell,create_testing_environment,main,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Public method to build the module by the given build_info object. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1255, 'parent': 1363, 'tfidf_word': 'mount testing writable exec shell build get dicts fail merge ', 'tfidf_method': 'execute create_testing_environment main build_modules build get exec_shell fail merge_dicts get ', 'lda_word': ' build,main,module,create,execute,', 'lda_method': ' get,create_testing_environment,main,build,execute,', 'lsi_word': ' build,get,environment,create,module,', 'lsi_method': ' get,create_testing_environment,main,mount_fs_writable,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 261, 'parent': 1046, 'tfidf_word': 'EP: 261, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1045, 'parent': 1046, 'tfidf_word': 'main module print shell testing command execute abspath basename log ', 'tfidf_method': 'execute execute_config_command print_command create_testing_environment main init_modules build log abspath basename ', 'lda_word': ' execute,command,init,exec,main,', 'lda_method': ' execute,build,main,create_testing_environment,print_command,', 'lsi_word': ' execute,command,create,main,init,', 'lsi_method': ' execute,exec_shell,print_command,init_modules,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Return the base name of pathname path. Execute the given test. Return the absolute path.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 256, 'parent': 1249, 'tfidf_word': 'EP: 256, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1086, 'parent': 1249, 'tfidf_word': 'environment exec init main module shell testing fail get execute ', 'tfidf_method': 'exec_shell execute execute_config_command create_testing_environment main init_modules build fail get ', 'lda_word': ' execute,command,exec,shell,build,', 'lda_method': ' init_modules,main,create_testing_environment,exec_shell,execute_config_command,', 'lsi_word': ' execute,build,command,init,module,', 'lsi_method': ' create_testing_environment,build,exec_shell,execute,init_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 264, 'parent': 1250, 'tfidf_word': 'EP: 264, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1087, 'parent': 1250, 'tfidf_word': 'copy create environment init main module testing dirname exist execute ', 'tfidf_method': 'copy execute execute_config_command create_testing_environment main init_modules build dirname exists ', 'lda_word': ' execute,dirname,config,testing,init,', 'lda_method': ' copy,execute,main,build,create_testing_environment,', 'lsi_word': ' execute,build,main,testing,module,', 'lsi_method': ' copy,create_testing_environment,init_modules,main,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 266, 'parent': 1344, 'tfidf_word': 'EP: 266, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 267, 'parent': 1344, 'tfidf_word': 'EP: 267, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 31, 'parent': 1521, 'tfidf_word': 'EP: 31, Name: main &rarr; create_testing_environment &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 32, 'parent': 1521, 'tfidf_word': 'EP: 32, Name: main &rarr; create_testing_environment &rarr; namespace_as_dict', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 234, 'parent': 1426, 'tfidf_word': 'EP: 234, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1350, 'parent': 1426, 'tfidf_word': 'create environment json main module open testing fail file read ', 'tfidf_method': 'read_config_file read_json_file create_testing_environment main build read_modules fail open read_until open ', 'lda_word': ' read,config,file,environment,module,', 'lda_method': ' build,open,read_config_file,create_testing_environment,read_modules,', 'lsi_word': ' read,file,build,json,open,', 'lsi_method': ' open,read_json_file,read_modules,main,read_config_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Collect buildable modules and their build instructions. Read JSON based configuration file.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1277, 'parent': 1499, 'tfidf_word': 'build create environment main module read testing exist join ', 'tfidf_method': 'create_testing_environment main build read_modules exists join ', 'lda_word': ' create,build,environment,main,testing,', 'lda_method': ' read_modules,create_testing_environment,build,exist,join,', 'lsi_word': ' build,module,testing,read,main,', 'lsi_method': ' read_modules,create_testing_environment,main,build,exist,', 'spm_method': ' ', 'text_summary': 'Public method to build the module by the given build_info object.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)'}}, {'key': 1354, 'parent': 1499, 'tfidf_word': 'create environment main module read testing get build exist fail ', 'tfidf_method': 'create_testing_environment main build read_modules should_build fail exists get get ', 'lda_word': ' build,read,main,testing,create,', 'lda_method': ' read_modules,main,build,should_build,create_testing_environment,', 'lsi_word': ' build,testing,main,read,module,', 'lsi_method': ' create_testing_environment,read_modules,build,should_build,main,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'console.py', 'utils.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '134': 'exists(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 25, 'parent': 1191, 'tfidf_word': 'EP: 25, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 646, 'parent': 1191, 'tfidf_word': 'EP: 646, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 754, 'parent': 1228, 'tfidf_word': 'EP: 754, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 756, 'parent': 1228, 'tfidf_word': 'EP: 756, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1076, 'parent': 1469, 'tfidf_word': 'copy environment f login mount writable dirname exist execute get ', 'tfidf_method': 'mount_fs_writable copy execute get_environment execute login get dirname exists ', 'lda_word': ' get,execute,mount,writable,environment,', 'lda_method': ' execute,copy,get,get_environment,dirname,', 'lsi_word': ' execute,get,copy,login,mount,', 'lsi_method': ' execute,get,mount_fs_writable,get_environment,login,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'builtins.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1125, 'parent': 1469, 'tfidf_word': 'copy environment execute f mount upload writable dirname exist get ', 'tfidf_method': 'mount_fs_writable copy execute get_environment upload get dirname exists ', 'lda_word': ' get,writable,mount,dirname,execute,', 'lda_method': ' copy,get,mount_fs_writable,execute,upload,', 'lsi_word': ' get,copy,execute,environment,writable,', 'lsi_method': ' mount_fs_writable,get,execute,upload,get_environment,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': '', 'files_count': 3, 'files': ['testresult.py', 'utils.py', 'builtins.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 752, 'parent': 1154, 'tfidf_word': 'EP: 752, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1153, 'parent': 1154, 'tfidf_word': 'f flash get mount print shell writable abspath basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command flash get log abspath basename ', 'lda_word': ' basename,flash,get,mount,exec,', 'lda_method': ' flash,exec_shell,print_command,mount_fs_writable,execute,', 'lsi_word': ' mount,flash,shell,print,writable,', 'lsi_method': ' print_command,exec_shell,flash,get,execute,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 757, 'parent': 1438, 'tfidf_word': 'EP: 757, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1227, 'parent': 1438, 'tfidf_word': 'exec execute f flash mount shell writable fail get ', 'tfidf_method': 'mount_fs_writable exec_shell execute flash get fail get ', 'lda_word': ' get,exec,mount,writable,shell,', 'lda_method': ' flash,exec_shell,get,mount_fs_writable,execute,', 'lsi_word': ' get,writable,shell,mount,exec,', 'lsi_method': ' get,flash,execute,mount_fs_writable,exec_shell,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1027, 'parent': 1419, 'tfidf_word': 'mount print shell writable execute get abspath basename log relpath ', 'tfidf_method': 'execute get_environment print_command execute login get log abspath basename relpath ', 'lda_word': ' execute,get,shell,environment,writable,', 'lda_method': ' mount_fs_writable,execute,login,exec_shell,get_environment,', 'lsi_word': ' execute,get,writable,environment,print,', 'lsi_method': ' execute,exec_shell,print_command,mount_fs_writable,get,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1326, 'parent': 1419, 'tfidf_word': 'login mount writable exec shell execute dicts fail merge get ', 'tfidf_method': 'mount_fs_writable execute get_environment execute login get exec_shell fail merge_dicts get ', 'lda_word': ' execute,get,mount,exec,writable,', 'lda_method': ' execute,get,login,get_environment,mount_fs_writable,', 'lsi_word': ' get,execute,environment,writable,login,', 'lsi_method': ' execute,get,login,get_environment,mount_fs_writable,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1079, 'parent': 1452, 'tfidf_word': 'mount print shell upload writable get abspath basename log relpath ', 'tfidf_method': 'exec_shell execute get_environment print_command upload get log abspath basename relpath ', 'lda_word': ' get,writable,upload,exec,shell,', 'lda_method': ' exec_shell,get,upload,print_command,get_environment,', 'lsi_word': ' get,execute,mount,environment,command,', 'lsi_method': ' mount_fs_writable,get,upload,get_environment,print_command,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1359, 'parent': 1452, 'tfidf_word': 'f mount upload writable exec shell dicts fail merge get ', 'tfidf_method': 'mount_fs_writable execute get_environment upload get exec_shell fail merge_dicts get ', 'lda_word': ' get,execute,exec,shell,environment,', 'lda_method': ' get,execute,get_environment,mount_fs_writable,upload,', 'lsi_word': ' get,execute,writable,upload,mount,', 'lsi_method': ' get,execute,mount_fs_writable,upload,get_environment,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 5, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 296, 'parent': 1251, 'tfidf_word': 'EP: 296, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1092, 'parent': 1251, 'tfidf_word': 'execute f finalize get main module mount writable dirname exist ', 'tfidf_method': 'mount_fs_writable copy execute config_modules finalize main get dirname exists ', 'lda_word': ' execute,get,main,writable,config,', 'lda_method': ' mount_fs_writable,execute,copy,finalize,config_modules,', 'lsi_word': ' config,main,writable,mount,module,', 'lsi_method': ' config_modules,get,mount_fs_writable,main,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1049, 'parent': 1420, 'tfidf_word': 'writable execute exec config command f log basename relpath abspath ', 'tfidf_method': 'execute print_command config_modules finalize main get log abspath basename relpath ', 'lda_word': ' execute,finalize,shell,config,exec,', 'lda_method': ' exec_shell,config_modules,print_command,main,execute,', 'lsi_word': ' finalize,exec,config,print,get,', 'lsi_method': ' get,print_command,exec_shell,main,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1327, 'parent': 1420, 'tfidf_word': 'main module mount writable exec shell get dicts fail merge ', 'tfidf_method': 'mount_fs_writable execute config_modules finalize main get exec_shell fail merge_dicts get ', 'lda_word': ' execute,get,config,module,writable,', 'lda_method': ' mount_fs_writable,get,finalize,execute,main,', 'lsi_word': ' get,main,module,writable,mount,', 'lsi_method': ' get,config_modules,finalize,mount_fs_writable,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 313, 'parent': 1252, 'tfidf_word': 'EP: 313, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1094, 'parent': 1252, 'tfidf_word': 'f finalize get main module mount patch writable dirname exist ', 'tfidf_method': 'mount_fs_writable copy execute finalize patch_modules main get dirname exists ', 'lda_word': ' main,mount,finalize,execute,get,', 'lda_method': ' patch_modules,main,finalize,execute,mount_fs_writable,', 'lsi_word': ' copy,mount,module,writable,patch,', 'lsi_method': ' copy,patch_modules,execute,mount_fs_writable,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Checks that the given path is exist. Remount the file system as writable. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1052, 'parent': 1422, 'tfidf_word': 'shell main module mount patch print relpath abspath basename log ', 'tfidf_method': 'execute print_command finalize patch_modules main get log abspath basename relpath ', 'lda_word': ' shell,writable,execute,patch,mount,', 'lda_method': ' exec_shell,execute,get,finalize,mount_fs_writable,', 'lsi_word': ' module,main,print,patch,exec,', 'lsi_method': ' exec_shell,finalize,patch_modules,print_command,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1328, 'parent': 1422, 'tfidf_word': 'module mount patch writable exec shell get dicts fail merge ', 'tfidf_method': 'mount_fs_writable execute finalize patch_modules main get exec_shell fail merge_dicts get ', 'lda_word': ' main,execute,get,mount,finalize,', 'lda_method': ' get,finalize,mount_fs_writable,patch_modules,main,', 'lsi_word': ' get,execute,main,mount,writable,', 'lsi_method': ' get,finalize,patch_modules,mount_fs_writable,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Remount the file system as writable. Public method to restore the project files.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 398, 'parent': 1253, 'tfidf_word': 'EP: 398, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1102, 'parent': 1253, 'tfidf_word': 'execute f get init initialize module mount writable dirname exist ', 'tfidf_method': 'mount_fs_writable copy execute config_modules initialize __init__ get dirname exists ', 'lda_word': ' initialize,get,module,writable,init,', 'lda_method': ' execute,get,init,config_modules,copy,', 'lsi_word': ' config,execute,module,writable,mount,', 'lsi_method': ' copy,init,initialize,execute,get,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': '', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1055, 'parent': 1421, 'tfidf_word': 'writable execute exec config command f log basename relpath abspath ', 'tfidf_method': 'execute print_command config_modules initialize __init__ get log abspath basename relpath ', 'lda_word': ' shell,writable,mount,execute,initialize,', 'lda_method': ' execute,initialize,mount_fs_writable,exec_shell,get,', 'lsi_word': ' command,print,writable,config,shell,', 'lsi_method': ' config_modules,exec_shell,print_command,mount_fs_writable,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1329, 'parent': 1421, 'tfidf_word': 'initialize module mount writable exec shell get dicts fail merge ', 'tfidf_method': 'mount_fs_writable execute config_modules initialize __init__ get exec_shell fail merge_dicts get ', 'lda_word': ' get,config,mount,initialize,module,', 'lda_method': ' initialize,mount_fs_writable,exec_shell,execute,config_modules,', 'lsi_word': ' get,config,init,module,writable,', 'lsi_method': ' get,init,mount_fs_writable,execute,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 415, 'parent': 1254, 'tfidf_word': 'EP: 415, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1104, 'parent': 1254, 'tfidf_word': 'f get init initialize module mount patch writable dirname exist ', 'tfidf_method': 'mount_fs_writable copy execute initialize patch_modules __init__ get dirname exists ', 'lda_word': ' initialize,module,init,patch,execute,', 'lda_method': ' mount_fs_writable,initialize,execute,copy,init,', 'lsi_word': ' execute,writable,get,module,patch,', 'lsi_method': ' get,execute,patch_modules,mount_fs_writable,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': '', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1058, 'parent': 1423, 'tfidf_word': 'writable f execute exec command get log basename relpath abspath ', 'tfidf_method': 'execute print_command initialize patch_modules __init__ get log abspath basename relpath ', 'lda_word': ' writable,get,shell,mount,initialize,', 'lda_method': ' get,exec_shell,mount_fs_writable,execute,init,', 'lsi_word': ' command,print,writable,exec,shell,', 'lsi_method': ' init,initialize,get,execute,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1330, 'parent': 1423, 'tfidf_word': 'module mount patch writable exec shell get dicts fail merge ', 'tfidf_method': 'mount_fs_writable execute initialize patch_modules __init__ get exec_shell fail merge_dicts get ', 'lda_word': ' initialize,writable,shell,mount,patch,', 'lda_method': ' initialize,patch_modules,mount_fs_writable,execute,init,', 'lsi_word': ' get,execute,patch,mount,writable,', 'lsi_method': ' get,patch_modules,mount_fs_writable,initialize,init,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 227, 'parent': 1017, 'tfidf_word': 'EP: 227, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 229, 'parent': 1017, 'tfidf_word': 'EP: 229, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 225, 'parent': 993, 'tfidf_word': 'EP: 225, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 992, 'parent': 993, 'tfidf_word': 'execute exec environment create command f build log basename abspath ', 'tfidf_method': 'print_command create_testing_environment main build read_modules should_build get log abspath basename ', 'lda_word': ' environment,testing,main,build,read,', 'lda_method': ' main,get,basename,exec_shell,print_command,', 'lsi_word': ' build,testing,main,module,mount,', 'lsi_method': ' get,execute,print_command,mount_fs_writable,should_build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return the base name of pathname path. Public method to build the module by the given build_info object. Return the absolute path. Execute the given test. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 230, 'parent': 1180, 'tfidf_word': 'EP: 230, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1016, 'parent': 1180, 'tfidf_word': 'main module mount read shell testing writable fail build get ', 'tfidf_method': 'exec_shell execute create_testing_environment main build read_modules should_build get fail get ', 'lda_word': ' get,build,shell,environment,main,', 'lda_method': ' get,mount_fs_writable,main,exec_shell,create_testing_environment,', 'lsi_word': ' build,get,execute,testing,exec,', 'lsi_method': ' get,create_testing_environment,execute,read_modules,exec_shell,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Test weather a component should be built or not. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 113, 'parent': 1063, 'tfidf_word': 'EP: 113, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 945, 'parent': 1063, 'tfidf_word': 'writable execute environment create copy f exist dirname build resolve ', 'tfidf_method': 'copy execute create_testing_environment main build read_modules should_build get dirname exists ', 'lda_word': ' resolve,build,testing,execute,symbol,', 'lda_method': ' execute,build,resolve_string,copy,read_modules,', 'lsi_word': ' resolve,build,main,string,environment,', 'lsi_method': ' resolve_string,should_build,read_modules,resolve_symbol,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Collect buildable modules and their build instructions. Test weather a component should be built or not. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 931, 'parent': 1238, 'tfidf_word': 'environment create command get build log relpath basename abspath resolve ', 'tfidf_method': 'execute resolve_symbol resolve_string resolve exec_shell get basename abspath relpath log ', 'lda_word': ' build,resolve,exec,read,create,', 'lda_method': ' log,exec_shell,resolve,read_modules,main,', 'lsi_word': ' resolve,build,command,execute,create,', 'lsi_method': ' get,exec_shell,create_testing_environment,resolve,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1072, 'parent': 1238, 'tfidf_word': 'environment create exec shell get build merge dicts fail resolve ', 'tfidf_method': 'create_testing_environment main build read_modules should_build get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,build,get,module,execute,', 'lda_method': ' should_build,resolve_symbol,get,create_testing_environment,build,', 'lsi_word': ' resolve,build,get,writable,read,', 'lsi_method': ' get,create_testing_environment,main,resolve,read_modules,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 854, 'parent': 1065, 'tfidf_word': 'EP: 854, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 955, 'parent': 1065, 'tfidf_word': 'writable execute copy config f exist dirname read build resolve ', 'tfidf_method': 'copy execute read_config_file flash build read_modules should_build get dirname exists ', 'lda_word': ' resolve,read,build,get,flash,', 'lda_method': ' exist,copy,execute,resolve_string,get,', 'lsi_word': ' resolve,build,read,copy,get,', 'lsi_method': ' execute,build,read_config_file,resolve_symbol,should_build,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 937, 'parent': 1240, 'tfidf_word': 'config command file read build log relpath basename abspath resolve ', 'tfidf_method': 'execute resolve_symbol resolve_string resolve exec_shell get basename abspath relpath log ', 'lda_word': ' build,resolve,read,writable,get,', 'lda_method': ' read_modules,get,resolve_symbol,flash,exec_shell,', 'lsi_word': ' resolve,read,build,execute,module,', 'lsi_method': ' exec_shell,get,read_config_file,should_build,mount_fs_writable,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Resolve the given symbol. Execute the given test.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1074, 'parent': 1240, 'tfidf_word': 'mount exec shell read build get fail dicts merge resolve ', 'tfidf_method': 'read_config_file flash build read_modules should_build get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,build,read,config,file,', 'lda_method': ' resolve,get,build,mount_fs_writable,should_build,', 'lsi_word': ' resolve,build,read,get,file,', 'lsi_method': ' get,build,mount_fs_writable,resolve,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 44, 'parent': 1066, 'tfidf_word': 'EP: 44, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 957, 'parent': 1066, 'tfidf_word': 'writable execute environment create copy f exist dirname build resolve ', 'tfidf_method': 'resolve_symbol copy execute create_testing_environment main build_modules build get dirname exists ', 'lda_word': ' resolve,build,get,environment,testing,', 'lda_method': ' copy,resolve_string,exist,build,create_testing_environment,', 'lsi_word': ' resolve,build,string,mount,symbol,', 'lsi_method': ' get,build_modules,resolve_symbol,mount_fs_writable,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 940, 'parent': 1256, 'tfidf_word': 'command symbol execute shell build abspath relpath basename log resolve ', 'tfidf_method': 'print_command create_testing_environment main build_modules build get log abspath basename relpath ', 'lda_word': ' resolve,build,get,module,shell,', 'lda_method': ' basename,exec_shell,resolve_string,build,build_modules,', 'lsi_word': ' resolve,build,create,get,shell,', 'lsi_method': ' exec_shell,build_modules,execute,resolve_symbol,get,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1122, 'parent': 1256, 'tfidf_word': 'create f exec shell get build fail merge dicts resolve ', 'tfidf_method': 'execute create_testing_environment main build_modules build get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,build,get,environment,writable,', 'lda_method': ' main,build_modules,create_testing_environment,build,resolve_string,', 'lsi_word': ' resolve,build,get,writable,mount,', 'lsi_method': ' get,build,mount_fs_writable,resolve,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 785, 'parent': 1069, 'tfidf_word': 'EP: 785, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 970, 'parent': 1069, 'tfidf_word': 'writable f execute copy config file exist dirname build resolve ', 'tfidf_method': 'resolve_symbol copy execute read_config_file flash build_modules build get dirname exists ', 'lda_word': ' resolve,build,read,symbol,module,', 'lda_method': ' copy,dirname,execute,flash,mount_fs_writable,', 'lsi_word': ' resolve,build,config,symbol,mount,', 'lsi_method': ' resolve,resolve_symbol,mount_fs_writable,resolve_string,get,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Remount the file system as writable. Public method to build the module by the given build_info object. Read JSON based configuration file.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 950, 'parent': 1257, 'tfidf_word': 'exec config command file build log relpath basename abspath resolve ', 'tfidf_method': 'print_command read_config_file flash build_modules build get log abspath basename relpath ', 'lda_word': ' resolve,build,read,execute,exec,', 'lda_method': ' execute,resolve_string,resolve,exec_shell,mount_fs_writable,', 'lsi_word': ' resolve,build,command,mount,module,', 'lsi_method': ' build,exec_shell,resolve_string,read_config_file,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Return the absolute path. Resolve the given symbol. Execute the given test.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1123, 'parent': 1257, 'tfidf_word': 'module mount exec shell build get fail dicts merge resolve ', 'tfidf_method': 'execute read_config_file flash build_modules build get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,build,get,read,symbol,', 'lda_method': ' get,flash,build_modules,read_config_file,execute,', 'lsi_word': ' resolve,build,get,config,flash,', 'lsi_method': ' get,resolve_symbol,read_config_file,resolve_string,mount_fs_writable,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 240, 'parent': 1182, 'tfidf_word': 'EP: 240, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1043, 'parent': 1182, 'tfidf_word': 'main module string symbol testing read abspath get join resolve ', 'tfidf_method': 'resolve_string resolve_symbol read_config_file create_testing_environment main build read_modules abspath join get ', 'lda_word': ' resolve,read,testing,build,string,', 'lda_method': ' resolve,main,read_modules,resolve_string,read_config_file,', 'lsi_word': ' resolve,read,config,create,testing,', 'lsi_method': ' create_testing_environment,read_modules,main,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1064, 'parent': 1416, 'tfidf_word': 'create copy config f writable exist read mkdir dirname resolve ', 'tfidf_method': 'execute read_config_file create_testing_environment main build read_modules get exists dirname mkdir ', 'lda_word': ' resolve,read,main,mount,config,', 'lda_method': ' read_config_file,resolve_string,build,read_modules,get,', 'lsi_word': ' resolve,read,testing,symbol,module,', 'lsi_method': ' read_config_file,resolve,copy,read_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1239, 'parent': 1416, 'tfidf_word': 'read get log relpath fail dicts basename merge abspath resolve ', 'tfidf_method': 'get exec_shell print_command basename merge_dicts relpath get log fail abspath ', 'lda_word': ' resolve,dicts,merge,read,get,', 'lda_method': ' mount_fs_writable,read_modules,read_config_file,exec_shell,create_testing_environment,', 'lsi_word': ' resolve,read,get,mount,string,', 'lsi_method': ' get,build,resolve_symbol,create_testing_environment,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1155, 'parent': 1488, 'tfidf_word': 'main mount string symbol testing writable exist dirname mkdir resolve ', 'tfidf_method': 'resolve_string resolve_symbol copy execute create_testing_environment main get exists dirname mkdir ', 'lda_word': ' resolve,symbol,copy,mount,main,', 'lda_method': ' mount_fs_writable,get,main,create_testing_environment,resolve_string,', 'lsi_word': ' resolve,execute,string,mount,main,', 'lsi_method': ' copy,mount_fs_writable,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1340, 'parent': 1488, 'tfidf_word': 'print get relpath abspath fail dicts basename merge log resolve ', 'tfidf_method': 'resolve_string exec_shell print_command abspath basename log merge_dicts relpath get fail ', 'lda_word': ' resolve,create,main,get,testing,', 'lda_method': ' fail,exec_shell,mount_fs_writable,resolve,create_testing_environment,', 'lsi_word': ' resolve,get,create,environment,mount,', 'lsi_method': ' get,main,resolve,create_testing_environment,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Helper function to print commands. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1157, 'parent': 1489, 'tfidf_word': 'get mount read string symbol writable exist dirname mkdir resolve ', 'tfidf_method': 'resolve_string resolve_symbol copy execute read_config_file flash get exists dirname mkdir ', 'lda_word': ' resolve,execute,writable,config,mount,', 'lda_method': ' mkdir,exist,resolve_string,mount_fs_writable,get,', 'lsi_word': ' resolve,config,read,string,get,', 'lsi_method': ' flash,resolve,mount_fs_writable,resolve_string,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) &rarr; exists(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1341, 'parent': 1489, 'tfidf_word': 'print get log fail relpath dicts basename merge abspath resolve ', 'tfidf_method': 'resolve_string exec_shell print_command abspath basename get merge_dicts log relpath fail ', 'lda_word': ' resolve,execute,shell,config,symbol,', 'lda_method': ' abspath,get,flash,read_config_file,resolve_string,', 'lsi_word': ' resolve,get,execute,string,config,', 'lsi_method': ' get,execute,read_config_file,mount_fs_writable,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Helper function to print commands. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '140': 'merge_dicts(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 548, 'parent': 1443, 'tfidf_word': 'EP: 548, Name: execute &rarr; reset &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1295, 'parent': 1443, 'tfidf_word': 'builtin exec execute fail get config init freya genromfs internet ', 'tfidf_method': 'fail exec_builtin execute get init_freya_config __init__ config_internet genromfs ', 'lda_word': ' get,exec,builtin,fail,execute,', 'lda_method': ' exec_builtin,execute,fail,get,init,', 'lsi_word': ' exec,get,execute,fail,builtin,', 'lsi_method': ' fail,execute,get,exec_builtin,init,', 'spm_method': ' ', 'text_summary': 'Resolve the %{iotjs-dirname} symbol in the Freya configuration file. Replace the Internet related symbols to concrete values in the NuttX config file. Execute the given test.', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 570, 'parent': 1397, 'tfidf_word': 'EP: 570, Name: execute &rarr; login &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 633, 'parent': 1397, 'tfidf_word': 'EP: 633, Name: execute &rarr; login &rarr; login &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1301, 'parent': 1609, 'tfidf_word': 'command coverage exception exec info open parse timeout run save ', 'tfidf_method': 'TimeoutException exec_command open parse_coverage_info run save ', 'lda_word': ' open,command,parse,exec,coverage,', 'lda_method': ' open,exec_command,parse_coverage_info,timeoutexception,run,', 'lsi_word': ' timeout,exception,open,exec,coverage,', 'lsi_method': ' exec_command,open,parse_coverage_info,timeoutexception,save,', 'spm_method': ' ', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Save the current testresults into JSON format.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'serialcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '245': 'save(testrunner.py)'}}, {'key': 1509, 'parent': 1609, 'tfidf_word': 'exception exec open timeout main data init load map run ', 'tfidf_method': 'TimeoutException exec_command open main main run __init__ load_map_data ', 'lda_word': ' exception,command,exec,open,timeout,', 'lda_method': ' timeoutexception,open,exec_command,run,main,', 'lsi_word': ' command,timeout,open,exec,exception,', 'lsi_method': ' exec_command,timeoutexception,open,main,init,', 'spm_method': ' ', 'text_summary': 'Open the ssh port. Execute the given command.', 'files_count': 5, 'files': ['coverage_client.py', 'serialcom.py', 'utils.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 369, 'parent': 1293, 'tfidf_word': 'EP: 369, Name: init_freya_config &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1284, 'parent': 1293, 'tfidf_word': 'copy execute exist mkdir config genromfs internet ', 'tfidf_method': 'copy execute exists mkdir config_internet genromfs ', 'lda_word': ' internet,execute,exist,mkdir,copy,', 'lda_method': ' execute,exist,mkdir,genromfs,copy,', 'lsi_word': ' mkdir,exist,execute,copy,internet,', 'lsi_method': ' copy,execute,exist,mkdir,genromfs,', 'spm_method': ' ', 'text_summary': 'Create directory. Create a romfs_img from the source directory that is.', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '97': 'config_internet(builtins.py)'}}, {'key': 368, 'parent': 1388, 'tfidf_word': 'EP: 368, Name: init_freya_config &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 370, 'parent': 1388, 'tfidf_word': 'EP: 370, Name: init_freya_config &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 491, 'parent': 1392, 'tfidf_word': 'EP: 491, Name: __init__ &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 493, 'parent': 1392, 'tfidf_word': 'EP: 493, Name: __init__ &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 341, 'parent': 1384, 'tfidf_word': 'EP: 341, Name: genromfs &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 343, 'parent': 1384, 'tfidf_word': 'EP: 343, Name: genromfs &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 354, 'parent': 1386, 'tfidf_word': 'EP: 354, Name: config_internet &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 356, 'parent': 1386, 'tfidf_word': 'EP: 356, Name: config_internet &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 922, 'parent': 1324, 'tfidf_word': 'EP: 922, Name: main &rarr; run_docker &rarr; exec_command &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 923, 'parent': 1324, 'tfidf_word': 'EP: 923, Name: main &rarr; run_docker &rarr; exec_command &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 655, 'parent': 1315, 'tfidf_word': 'EP: 655, Name: execute &rarr; login &rarr; exec_command &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1314, 'parent': 1315, 'tfidf_word': 'exec execute login print basename relpath command ', 'tfidf_method': 'execute login exec_command print_command basename relpath ', 'lda_word': ' command,print,execute,basename,login,', 'lda_method': ' print_command,login,exec_command,execute,basename,', 'lsi_word': ' command,exec,login,execute,print,', 'lsi_method': ' execute,login,print_command,exec_command,basename,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the given command.', 'files_count': 3, 'files': ['artik053.py', 'travis_script.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1415, 'parent': 1674, 'tfidf_word': 'exec main print command abspath basename relpath ', 'tfidf_method': 'exec_command main print_command abspath basename relpath ', 'lda_word': ' command,exec,print,main,basename,', 'lda_method': ' exec_command,main,print_command,basename,relpath,', 'lsi_word': ' command,exec,print,main,abspath,', 'lsi_method': ' print_command,exec_command,main,relpath,basename,', 'spm_method': ' ', 'text_summary': 'Return the base name of pathname path. Execute the given command.', 'files_count': 2, 'files': ['travis_script.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1673, 'parent': 1674, 'tfidf_word': 'exec print build execute info iotjs command abspath basename relpath ', 'tfidf_method': 'exec_command print_command iotjs_build_info execute abspath basename relpath ', 'lda_word': ' command,exec,print,execute,abspath,', 'lda_method': ' print_command,iotjs_build_info,exec_command,abspath,execute,', 'lsi_word': ' command,print,exec,build,info,', 'lsi_method': ' exec_command,print_command,execute,iotjs_build_info,relpath,', 'spm_method': ' ', 'text_summary': 'Return the base name of pathname path. Execute the given command.', 'files_count': 4, 'files': ['stm32f4dis.py', 'travis_script.py', 'utils.py', 'device_base.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 269, 'parent': 1507, 'tfidf_word': 'EP: 269, Name: main &rarr; create_testing_environment &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1473, 'parent': 1507, 'tfidf_word': 'fail file json open create result testsets upload read ', 'tfidf_method': 'fail read_json_file open create_result upload read_testsets ', 'lda_word': ' read,json,fail,open,file,', 'lda_method': ' fail,open,read_json_file,upload,create_result,', 'lsi_word': ' read,open,file,json,fail,', 'lsi_method': ' fail,open,read_json_file,upload,create_result,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information.', 'files_count': 5, 'files': ['testresult.py', 'utils.py', 'telnetcom.py', 'console.py', 'testrunner.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 666, 'parent': 1505, 'tfidf_word': 'EP: 666, Name: iotjs_build_info &rarr; login &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1316, 'parent': 1505, 'tfidf_word': 'fail login open init ', 'tfidf_method': 'fail open login __init__ __init__ __init__ ', 'lda_word': ' init,login,fail,open,', 'lda_method': ' init,login,fail,open,', 'lsi_word': ' init,login,open,fail,', 'lsi_method': ' init,fail,login,open,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 6, 'files': ['rpi2.py', 'ssh_device.py', 'device_base.py', 'telnetcom.py', 'console.py', 'rpi3.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '213': 'login(device_base.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '218': '__init__(rpi3.py)'}}, {'key': 1472, 'parent': 1672, 'tfidf_word': 'fail file json open write create result save upload ', 'tfidf_method': 'fail write_json_file open create_result upload save ', 'lda_word': ' write,open,file,json,fail,', 'lda_method': ' write_json_file,open,fail,save,upload,', 'lsi_word': ' json,fail,write,file,open,', 'lsi_method': ' fail,open,write_json_file,upload,create_result,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data.', 'files_count': 5, 'files': ['testresult.py', 'utils.py', 'telnetcom.py', 'console.py', 'testrunner.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '245': 'save(testrunner.py)'}}, {'key': 1662, 'parent': 1672, 'tfidf_word': 'open main coverage info parse run data load map save ', 'tfidf_method': 'fail open parse_coverage_info main run run save main load_map_data ', 'lda_word': ' main,open,fail,data,map,', 'lda_method': ' fail,open,main,run,parse_coverage_info,', 'lsi_word': ' open,fail,main,parse,info,', 'lsi_method': ' open,fail,main,parse_coverage_info,run,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['testrunner.py', 'utils.py', 'telnetcom.py', 'console.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '245': 'save(testrunner.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 773, 'parent': 1512, 'tfidf_word': 'EP: 773, Name: flash &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1508, 'parent': 1512, 'tfidf_word': 'json open create environment main result testing testsets upload read ', 'tfidf_method': 'read_json_file open read_until create_result upload read_testsets create_testing_environment main ', 'lda_word': ' read,json,open,file,create,', 'lda_method': ' open,read_json_file,read_until,create_result,upload,', 'lsi_word': ' read,open,file,json,create,', 'lsi_method': ' read_json_file,open,read_until,upload,create_result,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'utils.py', 'sshcom.py', 'testresult.py', 'testrunner.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '146': 'read_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 1506, 'parent': 1750, 'tfidf_word': 'login open read build info iotjs init ', 'tfidf_method': 'open read_until login __init__ iotjs_build_info __init__ __init__ ', 'lda_word': ' read,login,open,iotjs,info,', 'lda_method': ' read_until,init,open,login,iotjs_build_info,', 'lsi_word': ' init,open,read,login,info,', 'lsi_method': ' init,open,read_until,login,iotjs_build_info,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 5, 'files': ['device_base.py', 'sshcom.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)'}}, {'key': 1671, 'parent': 1750, 'tfidf_word': 'write json info file upload result data create load map ', 'tfidf_method': 'write_json_file save parse_coverage_info main run create_result upload run main load_map_data ', 'lda_word': ' open,read,main,run,info,', 'lda_method': ' open,read_until,main,save,write_json_file,', 'lsi_word': ' open,read,main,file,write,', 'lsi_method': ' open,read_until,main,write_json_file,save,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Parse and create coverage information.', 'files_count': 7, 'files': ['testresult.py', 'utils.py', 'sshcom.py', 'testrunner.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '245': 'save(testrunner.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 1616, 'parent': 1745, 'tfidf_word': 'main process breakpoint get message send ', 'tfidf_method': 'main process_messages _get_breakpoint get_message send_breakpoint send_message ', 'lda_word': ' message,main,process,send,breakpoint,', 'lda_method': ' main,process_messages,get_breakpoint,send_breakpoint,get_message,', 'lsi_word': ' message,main,process,send,breakpoint,', 'lsi_method': ' main,process_messages,send_message,send_breakpoint,get_message,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '56': 'send_breakpoint(coverage_client.py)', '59': 'send_message(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)'}}, {'key': 1680, 'parent': 1745, 'tfidf_word': 'cp function append jerry release breakpoint get insert send init ', 'tfidf_method': 'send_bytecode_cp send_message append _release_function __init__ JerryBreakpoint JerryFunction __init__ get_message insert ', 'lda_word': ' message,process,main,source,parse,', 'lda_method': ' process_messages,main,parse_source,init,send_bytecode_cp,', 'lsi_word': ' message,process,main,send,parse,', 'lsi_method': ' process_messages,main,parse_source,init,send_message,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['coverage_client.py', 'testresult.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '59': 'send_message(coverage_client.py)', '51': '_release_function(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '54': 'get_message(coverage_client.py)'}}, {'key': 1785, 'parent': 1836, 'tfidf_word': 'fail skip exception iotjs pass exec command join append read ', 'tfidf_method': 'fail exec_command join report_timeout report_testset report_skip report_pass report_fail open append ', 'lda_word': ' run,testset,log,report,timeout,', 'lda_method': ' find_in_skiplist,read_test_descriptor,contain,read_json_file,open,', 'lsi_word': ' run,testset,read,contain,test,', 'lsi_method': ' run,run_testset,contain,find_in_skiplist,read_test_descriptor,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Run all the tests that are in the given testset. Skip tests by the skiplists. Main method to run IoT.js or JerryScript tests.', 'files_count': 9, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'reporter.py', 'testresult.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '177': 'append(testresult.py)'}}, {'key': 1830, 'parent': 1836, 'tfidf_word': 'close exist get init section remove send environment read device ', 'tfidf_method': 'putc read_until readline is_executable basename parse_arguments report_final create_device RPi2Device parse_arguments ', 'lda_word': ' init,fail,execute,timeout,exception,', 'lda_method': ' run,log,main,init,join,', 'lsi_word': ' init,read,fail,execute,check,', 'lsi_method': ' init,fail,check_args,main,open,', 'spm_method': ' ', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Read JSON file. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['testresult.py', 'utils.py', 'coverage_client.py', 'artik053.py', 'flasher.py', 'builtins.py', 'console.py', 'stm32f4dis.py', 'serial_device.py', 'sshcom.py', 'telnetcom.py', 'ssh_device.py', 'device_base.py', 'serialcom.py', 'lumpy.py', 'tester.py', 'testrunner.py', 'rpi2.py', 'rpi3.py', 'skiplist.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py'], 'execution_path_count': 181, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '169': 'flash(flasher.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)', '226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '137': 'join(utils.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '107': 'log(console.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 521, 'parent': 1205, 'tfidf_word': 'EP: 521, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 522, 'parent': 1205, 'tfidf_word': 'EP: 522, Name: run &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 622, 'parent': 1147, 'tfidf_word': 'EP: 622, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1146, 'parent': 1147, 'tfidf_word': 'exec info last print run script shell basename log execute ', 'tfidf_method': 'exec_shell execute last_commit_info print_command execute run_coverage_script log basename ', 'lda_word': ' execute,exec,shell,script,command,', 'lda_method': ' execute,last_commit_info,run_coverage_script,print_command,exec_shell,', 'lsi_word': ' execute,command,shell,print,script,', 'lsi_method': ' execute,exec_shell,run_coverage_script,last_commit_info,print_command,', 'spm_method': '  &#187; execute(artik053.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 705, 'parent': 1150, 'tfidf_word': 'EP: 705, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1149, 'parent': 1150, 'tfidf_word': 'exec info last print run script shell basename log execute ', 'tfidf_method': 'exec_shell execute last_commit_info print_command execute run_coverage_script log basename ', 'lda_word': ' execute,command,info,run,last,', 'lda_method': ' execute,run_coverage_script,last_commit_info,exec_shell,basename,', 'lsi_word': ' execute,command,commit,run,print,', 'lsi_method': ' execute,run_coverage_script,last_commit_info,print_command,exec_shell,', 'spm_method': '  &#187; execute(ssh_device.py) &rarr; run_coverage_script(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 361, 'parent': 1289, 'tfidf_word': 'EP: 361, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1280, 'parent': 1289, 'tfidf_word': 'exec execute fail get shell config genromfs internet ', 'tfidf_method': 'fail exec_shell execute get config_internet genromfs ', 'lda_word': ' exec,fail,get,shell,execute,', 'lda_method': ' get,fail,execute,exec_shell,genromfs,', 'lsi_word': ' shell,execute,get,fail,exec,', 'lsi_method': ' exec_shell,fail,get,execute,config_internet,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '97': 'config_internet(builtins.py)'}}, {'key': 610, 'parent': 1217, 'tfidf_word': 'EP: 610, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1216, 'parent': 1217, 'tfidf_word': 'coverage exec print run script shell execute abspath basename log ', 'tfidf_method': 'exec_shell execute print_command execute run_coverage_script log abspath basename ', 'lda_word': ' execute,exec,run,shell,script,', 'lda_method': ' execute,print_command,run_coverage_script,exec_shell,abspath,', 'lsi_word': ' execute,print,script,run,shell,', 'lsi_method': ' execute,print_command,run_coverage_script,exec_shell,log,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 606, 'parent': 1312, 'tfidf_word': 'EP: 606, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 611, 'parent': 1312, 'tfidf_word': 'EP: 611, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 693, 'parent': 1224, 'tfidf_word': 'EP: 693, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1223, 'parent': 1224, 'tfidf_word': 'coverage exec print run script shell execute abspath basename log ', 'tfidf_method': 'exec_shell execute print_command execute run_coverage_script log abspath basename ', 'lda_word': ' execute,print,run,exec,command,', 'lda_method': ' execute,run_coverage_script,exec_shell,print_command,abspath,', 'lsi_word': ' execute,exec,run,command,shell,', 'lsi_method': ' execute,run_coverage_script,print_command,exec_shell,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 689, 'parent': 1318, 'tfidf_word': 'EP: 689, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 694, 'parent': 1318, 'tfidf_word': 'EP: 694, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 489, 'parent': 1299, 'tfidf_word': 'EP: 489, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1298, 'parent': 1299, 'tfidf_word': 'command exec execute init print shell abspath basename log ', 'tfidf_method': 'exec_shell execute print_command __init__ log abspath basename ', 'lda_word': ' exec,execute,print,init,command,', 'lda_method': ' exec_shell,print_command,init,execute,basename,', 'lsi_word': ' print,execute,shell,init,exec,', 'lsi_method': ' init,print_command,execute,exec_shell,log,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 485, 'parent': 1391, 'tfidf_word': 'EP: 485, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 490, 'parent': 1391, 'tfidf_word': 'EP: 490, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1292, 'parent': 1599, 'tfidf_word': 'exec execute freya init print shell abspath basename log relpath ', 'tfidf_method': 'init_freya_config exec_shell execute print_command log abspath basename relpath ', 'lda_word': ' freya,print,execute,exec,shell,', 'lda_method': ' exec_shell,print_command,init_freya_config,execute,abspath,', 'lsi_word': ' execute,shell,exec,freya,init,', 'lsi_method': ' execute,init_freya_config,print_command,exec_shell,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1387, 'parent': 1599, 'tfidf_word': 'config exec execute freya init shell fail get ', 'tfidf_method': 'init_freya_config exec_shell execute fail get ', 'lda_word': ' config,exec,freya,shell,execute,', 'lda_method': ' execute,init_freya_config,exec_shell,fail,get,', 'lsi_word': ' freya,init,config,exec,shell,', 'lsi_method': ' execute,init_freya_config,exec_shell,fail,get,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1597, 'parent': 1763, 'tfidf_word': 'genromfs shell command print abspath basename fail get log relpath ', 'tfidf_method': 'exec_shell execute genromfs print_command fail log abspath basename relpath get ', 'lda_word': ' execute,genromfs,exec,shell,relpath,', 'lda_method': ' execute,genromfs,exec_shell,print_command,log,', 'lsi_word': ' shell,exec,execute,genromfs,command,', 'lsi_method': ' execute,genromfs,exec_shell,print_command,abspath,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1598, 'parent': 1763, 'tfidf_word': 'internet shell command print abspath basename fail get log relpath ', 'tfidf_method': 'exec_shell execute config_internet print_command fail log abspath basename relpath get ', 'lda_word': ' basename,command,print,shell,exec,', 'lda_method': ' execute,exec_shell,config_internet,print_command,basename,', 'lsi_word': ' exec,execute,shell,internet,config,', 'lsi_method': ' exec_shell,execute,config_internet,print_command,relpath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'97': 'config_internet(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 763, 'parent': 1230, 'tfidf_word': 'EP: 763, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1229, 'parent': 1230, 'tfidf_word': 'config exec flash print shell basename log command execute ', 'tfidf_method': 'exec_shell execute execute_config_command print_command flash log basename ', 'lda_word': ' execute,command,print,exec,shell,', 'lda_method': ' exec_shell,execute_config_command,execute,print_command,log,', 'lsi_word': ' execute,command,exec,config,shell,', 'lsi_method': ' exec_shell,print_command,execute_config_command,execute,flash,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test. Print a message with the given color.', 'files_count': 3, 'files': ['flasher.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 759, 'parent': 1432, 'tfidf_word': 'EP: 759, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1321, 'parent': 1432, 'tfidf_word': 'command config exec flash shell fail get execute ', 'tfidf_method': 'exec_shell execute execute_config_command flash fail get ', 'lda_word': ' execute,shell,config,flash,exec,', 'lda_method': ' flash,exec_shell,execute,execute_config_command,fail,', 'lsi_word': ' execute,flash,exec,shell,config,', 'lsi_method': ' execute_config_command,execute,flash,exec_shell,get,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 766, 'parent': 1322, 'tfidf_word': 'EP: 766, Name: flash &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 768, 'parent': 1322, 'tfidf_word': 'EP: 768, Name: flash &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 556, 'parent': 1309, 'tfidf_word': 'EP: 556, Name: execute &rarr; reset &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 558, 'parent': 1309, 'tfidf_word': 'EP: 558, Name: execute &rarr; reset &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 554, 'parent': 1210, 'tfidf_word': 'EP: 554, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1209, 'parent': 1210, 'tfidf_word': 'command exec print reset shell execute abspath basename log ', 'tfidf_method': 'exec_shell execute print_command execute reset log abspath basename ', 'lda_word': ' reset,execute,shell,exec,print,', 'lda_method': ' execute,reset,print_command,exec_shell,log,', 'lsi_word': ' execute,exec,command,shell,reset,', 'lsi_method': ' execute,print_command,reset,exec_shell,log,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['stm32f4dis.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 559, 'parent': 1576, 'tfidf_word': 'EP: 559, Name: execute &rarr; reset &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1428, 'parent': 1576, 'tfidf_word': 'exec reset shell fail get execute ', 'tfidf_method': 'exec_shell execute execute reset fail get get ', 'lda_word': ' execute,exec,shell,reset,fail,', 'lda_method': ' execute,fail,reset,exec_shell,get,', 'lsi_word': ' execute,shell,reset,exec,get,', 'lsi_method': ' execute,exec_shell,reset,get,fail,', 'spm_method': ' ', 'text_summary': 'Reset the device to create clean environment. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 5, 'files': ['stm32f4dis.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 593, 'parent': 1311, 'tfidf_word': 'EP: 593, Name: execute &rarr; reset &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 595, 'parent': 1311, 'tfidf_word': 'EP: 595, Name: execute &rarr; reset &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 591, 'parent': 1213, 'tfidf_word': 'EP: 591, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1212, 'parent': 1213, 'tfidf_word': 'command exec print reset shell execute abspath basename log ', 'tfidf_method': 'exec_shell execute print_command execute reset log abspath basename ', 'lda_word': ' execute,print,shell,command,exec,', 'lda_method': ' execute,exec_shell,print_command,reset,abspath,', 'lsi_word': ' execute,reset,shell,print,exec,', 'lsi_method': ' execute,print_command,reset,exec_shell,log,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 596, 'parent': 1577, 'tfidf_word': 'EP: 596, Name: execute &rarr; reset &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1430, 'parent': 1577, 'tfidf_word': 'exec reset shell fail get execute ', 'tfidf_method': 'exec_shell execute execute reset fail get get ', 'lda_word': ' execute,reset,shell,exec,fail,', 'lda_method': ' exec_shell,reset,execute,get,fail,', 'lsi_word': ' execute,exec,shell,reset,fail,', 'lsi_method': ' execute,exec_shell,reset,get,fail,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Reset the device to create clean environment.', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 322, 'parent': 1096, 'tfidf_word': 'EP: 322, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1095, 'parent': 1096, 'tfidf_word': 'exec execute finalize main module print shell basename log patch ', 'tfidf_method': 'exec_shell execute patch print_command finalize patch_modules main log basename ', 'lda_word': ' patch,execute,module,exec,print,', 'lda_method': ' patch_modules,patch,exec_shell,execute,main,', 'lsi_word': ' patch,command,module,shell,print,', 'lsi_method': ' exec_shell,patch,print_command,patch_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 318, 'parent': 1268, 'tfidf_word': 'EP: 318, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1134, 'parent': 1268, 'tfidf_word': 'exec execute finalize main module shell fail get patch ', 'tfidf_method': 'exec_shell execute patch finalize patch_modules main fail get ', 'lda_word': ' patch,execute,exec,shell,finalize,', 'lda_method': ' main,patch_modules,patch,finalize,execute,', 'lsi_word': ' patch,finalize,execute,shell,main,', 'lsi_method': ' patch,patch_modules,main,finalize,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Apply the given patch to the given project.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 277, 'parent': 1089, 'tfidf_word': 'EP: 277, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1088, 'parent': 1089, 'tfidf_word': 'execute file finalize main module print restore shell basename log ', 'tfidf_method': 'exec_shell execute print_command restore_file config_modules finalize main log basename ', 'lda_word': ' file,print,main,command,finalize,', 'lda_method': ' execute,restore_file,config_modules,exec_shell,main,', 'lsi_word': ' command,module,exec,print,finalize,', 'lsi_method': ' config_modules,finalize,main,restore_file,exec_shell,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 273, 'parent': 1266, 'tfidf_word': 'EP: 273, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1132, 'parent': 1266, 'tfidf_word': 'exec execute file finalize main module restore shell fail get ', 'tfidf_method': 'exec_shell execute restore_file config_modules finalize main fail get ', 'lda_word': ' file,exec,finalize,execute,restore,', 'lda_method': ' main,execute,exec_shell,fail,finalize,', 'lsi_word': ' exec,execute,file,shell,main,', 'lsi_method': ' config_modules,exec_shell,main,restore_file,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Public method to restore the project files. Restore the modified project files.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 303, 'parent': 1186, 'tfidf_word': 'EP: 303, Name: main &rarr; finalize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; is_broken_symlink', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1185, 'parent': 1186, 'tfidf_word': 'config finalize main module symlink exist file remove ', 'tfidf_method': 'remove symlink config_modules finalize main exists remove_file ', 'lda_word': ' remove,module,main,exist,symlink,', 'lda_method': ' finalize,main,config_modules,remove,symlink,', 'lsi_word': ' remove,main,finalize,symlink,module,', 'lsi_method': ' config_modules,remove,main,symlink,finalize,', 'spm_method': ' ', 'text_summary': 'Remove the resource file. Remove the given file.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 284, 'parent': 1364, 'tfidf_word': 'EP: 284, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; rmtree &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1184, 'parent': 1364, 'tfidf_word': 'config finalize main module restore file remove break exist symlink ', 'tfidf_method': 'remove restore_file config_modules finalize main exists is_broken_symlink remove_file ', 'lda_word': ' remove,file,main,config,module,', 'lda_method': ' main,restore_file,remove,is_broken_symlink,config_modules,', 'lsi_word': ' file,remove,module,finalize,restore,', 'lsi_method': ' remove,restore_file,finalize,main,config_modules,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Public method to restore the project files. Checks that the given path is exist.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '148': 'remove(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 379, 'parent': 1099, 'tfidf_word': 'EP: 379, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1098, 'parent': 1099, 'tfidf_word': 'execute file init initialize module print restore shell basename log ', 'tfidf_method': 'exec_shell execute print_command restore_file config_modules initialize __init__ log basename ', 'lda_word': ' file,init,execute,print,command,', 'lda_method': ' exec_shell,restore_file,init,initialize,execute,', 'lsi_word': ' config,exec,execute,print,shell,', 'lsi_method': ' exec_shell,execute,print_command,init,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 375, 'parent': 1270, 'tfidf_word': 'EP: 375, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1136, 'parent': 1270, 'tfidf_word': 'exec execute file init initialize module restore shell fail get ', 'tfidf_method': 'exec_shell execute restore_file config_modules initialize __init__ fail get ', 'lda_word': ' initialize,shell,restore,exec,execute,', 'lda_method': ' initialize,execute,exec_shell,restore_file,config_modules,', 'lsi_word': ' exec,shell,initialize,restore,file,', 'lsi_method': ' execute,initialize,init,exec_shell,restore_file,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; restore_file(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Restore the modified project files. Public method to initialize the project.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 405, 'parent': 1190, 'tfidf_word': 'EP: 405, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; is_broken_symlink', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1189, 'parent': 1190, 'tfidf_word': 'config init initialize module symlink exist file remove ', 'tfidf_method': 'remove symlink config_modules initialize __init__ exists remove_file ', 'lda_word': ' module,symlink,remove,initialize,config,', 'lda_method': ' initialize,config_modules,symlink,init,remove,', 'lsi_word': ' remove,config,initialize,init,symlink,', 'lsi_method': ' symlink,remove,initialize,init,config_modules,', 'spm_method': ' ', 'text_summary': 'Remove the resource file. Remove the given file.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '153': 'symlink(utils.py)', '148': 'remove(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 386, 'parent': 1366, 'tfidf_word': 'EP: 386, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; rmtree &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1188, 'parent': 1366, 'tfidf_word': 'config init initialize module restore file remove break exist symlink ', 'tfidf_method': 'remove restore_file config_modules initialize __init__ exists is_broken_symlink remove_file ', 'lda_word': ' file,remove,initialize,module,restore,', 'lda_method': ' remove,initialize,restore_file,config_modules,init,', 'lsi_word': ' file,remove,initialize,restore,config,', 'lsi_method': ' init,restore_file,config_modules,remove,initialize,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Restore the modified project files. Checks that the given path is exist.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '148': 'remove(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 438, 'parent': 1141, 'tfidf_word': 'EP: 438, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1140, 'parent': 1141, 'tfidf_word': 'exec execute fetch init initialize module print shell basename log ', 'tfidf_method': 'exec_shell execute print_command fetch_modules initialize __init__ log basename ', 'lda_word': ' exec,init,module,initialize,print,', 'lda_method': ' exec_shell,execute,print_command,fetch_modules,init,', 'lsi_word': ' execute,initialize,shell,fetch,print,', 'lsi_method': ' execute,init,print_command,exec_shell,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 444, 'parent': 1453, 'tfidf_word': 'EP: 444, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1356, 'parent': 1453, 'tfidf_word': 'exec execute fetch init initialize module shell fail get ', 'tfidf_method': 'exec_shell execute fetch_modules initialize __init__ fail get get ', 'lda_word': ' execute,get,fetch,init,module,', 'lda_method': ' exec_shell,fetch_modules,execute,init,initialize,', 'lsi_word': ' exec,init,module,fetch,initialize,', 'lsi_method': ' exec_shell,execute,init,fetch_modules,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; fetch_modules(__init__.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 441, 'parent': 1203, 'tfidf_word': 'EP: 441, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 443, 'parent': 1203, 'tfidf_word': 'EP: 443, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 427, 'parent': 1139, 'tfidf_word': 'EP: 427, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 429, 'parent': 1139, 'tfidf_word': 'EP: 429, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 425, 'parent': 1107, 'tfidf_word': 'EP: 425, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1106, 'parent': 1107, 'tfidf_word': 'execute init initialize module print shell patch abspath basename log ', 'tfidf_method': 'exec_shell execute patch print_command initialize patch_modules __init__ log abspath basename ', 'lda_word': ' patch,module,exec,execute,init,', 'lda_method': ' exec_shell,init,patch_modules,execute,initialize,', 'lsi_word': ' patch,init,module,print,shell,', 'lsi_method': ' initialize,patch,print_command,execute,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 430, 'parent': 1378, 'tfidf_word': 'EP: 430, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1272, 'parent': 1378, 'tfidf_word': 'exec execute init initialize module shell fail get patch ', 'tfidf_method': 'exec_shell execute patch initialize patch_modules __init__ fail get get ', 'lda_word': ' patch,execute,exec,init,shell,', 'lda_method': ' init,exec_shell,initialize,get,patch,', 'lsi_word': ' patch,execute,init,module,shell,', 'lsi_method': ' exec_shell,patch_modules,initialize,patch,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Apply the given patch to the given project. Public method to initialize the project.', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 129, 'parent': 966, 'tfidf_word': 'EP: 129, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 130, 'parent': 966, 'tfidf_word': 'EP: 130, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 867, 'parent': 979, 'tfidf_word': 'EP: 867, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 868, 'parent': 979, 'tfidf_word': 'EP: 868, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 52, 'parent': 959, 'tfidf_word': 'EP: 52, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 958, 'parent': 959, 'tfidf_word': 'print symbol main module basename log command build execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command print_command create_testing_environment main build_modules build log basename ', 'lda_word': ' resolve,command,build,execute,main,', 'lda_method': ' execute_config_command,resolve_string,print_command,main,resolve_symbol,', 'lsi_word': ' resolve,execute,command,build,string,', 'lsi_method': ' exec_shell,build,execute,print_command,execute_config_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Run the command defined in the build.config file. Helper function to print commands. Build all the modules and save the artifacts.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 49, 'parent': 982, 'tfidf_word': 'EP: 49, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 54, 'parent': 982, 'tfidf_word': 'EP: 54, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 56, 'parent': 1111, 'tfidf_word': 'EP: 56, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 983, 'parent': 1111, 'tfidf_word': 'main module string symbol testing dirname exist build execute resolve ', 'tfidf_method': 'resolve_symbol copy execute execute_config_command create_testing_environment main build_modules build dirname exists ', 'lda_word': ' resolve,build,execute,string,command,', 'lda_method': ' main,resolve_string,copy,build,resolve,', 'lsi_word': ' resolve,execute,build,string,symbol,', 'lsi_method': ' build_modules,resolve_symbol,main,execute_config_command,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 58, 'parent': 1160, 'tfidf_word': 'EP: 58, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 59, 'parent': 1160, 'tfidf_word': 'EP: 59, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 793, 'parent': 972, 'tfidf_word': 'EP: 793, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 971, 'parent': 972, 'tfidf_word': 'shell string symbol basename log build command config execute resolve ', 'tfidf_method': 'exec_shell execute execute_config_command print_command read_config_file flash build_modules build log basename ', 'lda_word': ' command,execute,resolve,build,config,', 'lda_method': ' build,exec_shell,resolve,resolve_symbol,build_modules,', 'lsi_word': ' resolve,command,config,execute,build,', 'lsi_method': ' build,flash,read_config_file,resolve_symbol,execute_config_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Run the command defined in the build.config file. Execute the shell command. Helper function to print commands.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 790, 'parent': 994, 'tfidf_word': 'EP: 790, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 795, 'parent': 994, 'tfidf_word': 'EP: 795, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 797, 'parent': 1117, 'tfidf_word': 'EP: 797, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 995, 'parent': 1117, 'tfidf_word': 'module read string symbol dirname exist build config execute resolve ', 'tfidf_method': 'resolve_symbol copy execute execute_config_command read_config_file flash build_modules build dirname exists ', 'lda_word': ' resolve,config,build,execute,string,', 'lda_method': ' resolve_symbol,execute,build,execute_config_command,resolve,', 'lsi_word': ' resolve,build,execute,config,command,', 'lsi_method': ' build,build_modules,execute_config_command,flash,execute,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Run the command defined in the build.config file. Build all the modules and save the artifacts.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 799, 'parent': 1163, 'tfidf_word': 'EP: 799, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 800, 'parent': 1163, 'tfidf_word': 'EP: 800, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 33, 'parent': 1192, 'tfidf_word': 'EP: 33, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 34, 'parent': 1192, 'tfidf_word': 'EP: 34, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 120, 'parent': 1197, 'tfidf_word': 'EP: 120, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 121, 'parent': 1197, 'tfidf_word': 'EP: 121, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 118, 'parent': 1081, 'tfidf_word': 'EP: 118, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 122, 'parent': 1081, 'tfidf_word': 'EP: 122, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 105, 'parent': 1170, 'tfidf_word': 'EP: 105, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1030, 'parent': 1170, 'tfidf_word': 'main module read string symbol testing exist get build resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main build read_modules should_build exists get ', 'lda_word': ' resolve,build,read,string,testing,', 'lda_method': ' should_build,create_testing_environment,read_modules,main,resolve,', 'lsi_word': ' resolve,build,string,testing,symbol,', 'lsi_method': ' create_testing_environment,main,resolve,resolve_symbol,should_build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '134': 'exists(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 65, 'parent': 1241, 'tfidf_word': 'EP: 65, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1161, 'parent': 1241, 'tfidf_word': 'string symbol testing write dirname exist mkdir build create resolve ', 'tfidf_method': 'resolve_string resolve_symbol write_json_file create_testing_environment main build create_build_info dirname exists mkdir ', 'lda_word': ' resolve,create,build,json,main,', 'lda_method': ' main,resolve_string,write_json_file,create_build_info,resolve_symbol,', 'lsi_word': ' resolve,create,build,symbol,write,', 'lsi_method': ' create_build_info,create_testing_environment,main,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; write_json_file(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Write a JSON file from the given data.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 92, 'parent': 1007, 'tfidf_word': 'EP: 92, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1006, 'parent': 1007, 'tfidf_word': 'build symbol get map fill memory entry line append resolve ', 'tfidf_method': 'main build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_fill try_match_symbol ', 'lda_word': ' resolve,create,build,section,info,', 'lda_method': ' resolve,resolve_symbol,parse_to_sections,main,build,', 'lsi_word': ' resolve,section,create,build,symbol,', 'lsi_method': ' create_build_info,parse_to_sections,create_testing_environment,calculate_section_sizes,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Return the sizes of the main sections. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1196, 'parent': 1424, 'tfidf_word': 'info environment data calculate load fail read create build resolve ', 'tfidf_method': 'create_testing_environment main build load_map_data calculate_section_sizes create_build_info fail open read_until open ', 'lda_word': ' build,resolve,create,data,string,', 'lda_method': ' create_build_info,load_map_data,main,build,create_testing_environment,', 'lsi_word': ' resolve,build,create,calculate,size,', 'lsi_method': ' build,create_testing_environment,resolve_symbol,open,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; load_map_data(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Return the sizes of the main sections.', 'files_count': 9, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1337, 'parent': 1424, 'tfidf_word': 'calculate join create build exist hoist current date resolve section ', 'tfidf_method': 'resolve_symbol create_testing_environment main build create_build_info calculate_section_sizes join current_date exists hoist_section ', 'lda_word': ' resolve,create,build,info,symbol,', 'lda_method': ' create_testing_environment,build,resolve_symbol,main,create_build_info,', 'lsi_word': ' resolve,build,create,main,testing,', 'lsi_method': ' build,main,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 803, 'parent': 1165, 'tfidf_word': 'EP: 803, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 804, 'parent': 1165, 'tfidf_word': 'EP: 804, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 832, 'parent': 1021, 'tfidf_word': 'EP: 832, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_fill', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1020, 'parent': 1021, 'tfidf_word': 'build symbol section append map get entry memory line resolve ', 'tfidf_method': 'read_config_file flash build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_symbol ', 'lda_word': ' resolve,build,section,symbol,create,', 'lda_method': ' read_config_file,calculate_section_sizes,parse_to_sections,resolve_symbol,resolve,', 'lsi_word': ' resolve,section,build,symbol,create,', 'lsi_method': ' build,create_build_info,calculate_section_sizes,resolve_symbol,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Write binary size and commit information into a file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 826, 'parent': 1235, 'tfidf_word': 'EP: 826, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 827, 'parent': 1235, 'tfidf_word': 'EP: 827, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1060, 'parent': 1338, 'tfidf_word': 'read size string symbol build section exist hoist join resolve ', 'tfidf_method': 'resolve_string resolve_symbol read_config_file flash build calculate_section_sizes create_build_info exists join hoist_section ', 'lda_word': ' resolve,build,calculate,section,read,', 'lda_method': ' hoist_section,create_build_info,read_config_file,resolve,calculate_section_sizes,', 'lsi_word': ' resolve,build,section,flash,create,', 'lsi_method': ' create_build_info,calculate_section_sizes,resolve_symbol,resolve_string,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br>', 'text_summary': 'Recursively replace the symbols in the given string. Write binary size and commit information into a file. Checks that the given path is exist. Resolve the given symbol. Join one or more path components intelligently.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)'}}, {'key': 1108, 'parent': 1338, 'tfidf_word': 'flash info read string symbol current date join build resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash build create_build_info current_date join ', 'lda_word': ' resolve,build,create,config,join,', 'lda_method': ' build,resolve,resolve_string,resolve_symbol,flash,', 'lsi_word': ' resolve,build,config,flash,read,', 'lsi_method': ' build,resolve,resolve_symbol,resolve_string,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 857, 'parent': 1061, 'tfidf_word': 'EP: 857, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 858, 'parent': 1061, 'tfidf_word': 'EP: 858, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 774, 'parent': 1232, 'tfidf_word': 'EP: 774, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 775, 'parent': 1232, 'tfidf_word': 'EP: 775, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 101, 'parent': 965, 'tfidf_word': 'EP: 101, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 103, 'parent': 965, 'tfidf_word': 'EP: 103, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 99, 'parent': 943, 'tfidf_word': 'EP: 99, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 942, 'parent': 943, 'tfidf_word': 'calculate string execute shell create build abspath basename log resolve ', 'tfidf_method': 'print_command create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs log abspath basename ', 'lda_word': ' resolve,create,build,calculate,read,', 'lda_method': ' execute,exec_shell,resolve_symbol,calculate_section_sizes,resolve,', 'lsi_word': ' resolve,create,build,calculate,execute,', 'lsi_method': ' build,exec_shell,resolve,read_objects_from_libs,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 104, 'parent': 1158, 'tfidf_word': 'EP: 104, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1067, 'parent': 1158, 'tfidf_word': 'execute exec environment calculate info get fail create build resolve ', 'tfidf_method': 'execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs fail get get ', 'lda_word': ' resolve,create,build,size,calculate,', 'lda_method': ' resolve_string,build,main,exec_shell,create_build_info,', 'lsi_word': ' resolve,build,create,calculate,main,', 'lsi_method': ' exec_shell,read_objects_from_libs,resolve_string,execute,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Public method to build the module by the given build_info object. Read all the names of the object files that are.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 842, 'parent': 978, 'tfidf_word': 'EP: 842, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 844, 'parent': 978, 'tfidf_word': 'EP: 844, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 840, 'parent': 953, 'tfidf_word': 'EP: 840, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 952, 'parent': 953, 'tfidf_word': 'config command calculate file read build log basename abspath resolve ', 'tfidf_method': 'print_command read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs log abspath basename ', 'lda_word': ' resolve,read,exec,log,shell,', 'lda_method': ' print_command,read_config_file,calculate_section_sizes,execute,create_build_info,', 'lsi_word': ' resolve,build,read,object,libs,', 'lsi_method': ' exec_shell,build,execute,resolve,read_objects_from_libs,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Read all the names of the object files that are. Recursively loop on the given node, and resolve all the. Read JSON based configuration file. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 845, 'parent': 1159, 'tfidf_word': 'EP: 845, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1070, 'parent': 1159, 'tfidf_word': 'info libs object shell section get fail read build resolve ', 'tfidf_method': 'execute read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs fail get get ', 'lda_word': ' resolve,build,read,shell,info,', 'lda_method': ' resolve_string,read_objects_from_libs,exec_shell,create_build_info,execute,', 'lsi_word': ' resolve,build,read,flash,exec,', 'lsi_method': ' build,exec_shell,read_config_file,resolve_string,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read all the names of the object files that are. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 817, 'parent': 999, 'tfidf_word': 'EP: 817, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 819, 'parent': 999, 'tfidf_word': 'EP: 819, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 815, 'parent': 976, 'tfidf_word': 'EP: 815, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 975, 'parent': 976, 'tfidf_word': 'config commit command exec info build log basename abspath resolve ', 'tfidf_method': 'execute last_commit_info print_command read_config_file flash build create_build_info log abspath basename ', 'lda_word': ' resolve,build,info,create,file,', 'lda_method': ' resolve_symbol,execute,read_config_file,build,resolve,', 'lsi_word': ' resolve,info,build,config,print,', 'lsi_method': ' build,flash,resolve,read_config_file,print_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 820, 'parent': 1178, 'tfidf_word': 'EP: 820, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1120, 'parent': 1178, 'tfidf_word': 'execute exec create config commit get fail info build resolve ', 'tfidf_method': 'exec_shell execute last_commit_info read_config_file flash build create_build_info fail get get ', 'lda_word': ' resolve,build,info,file,read,', 'lda_method': ' create_build_info,resolve,flash,exec_shell,resolve_symbol,', 'lsi_word': ' resolve,info,build,file,read,', 'lsi_method': ' build,last_commit_info,resolve_string,resolve,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 77, 'parent': 1113, 'tfidf_word': 'EP: 77, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 985, 'parent': 1113, 'tfidf_word': 'main string symbol testing dirname exist build create info resolve ', 'tfidf_method': 'resolve_symbol copy execute last_commit_info create_testing_environment main build create_build_info dirname exists ', 'lda_word': ' resolve,create,info,build,symbol,', 'lda_method': ' last_commit_info,exist,build,copy,resolve_symbol,', 'lsi_word': ' resolve,create,info,build,environment,', 'lsi_method': ' copy,resolve_symbol,main,last_commit_info,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 963, 'parent': 1332, 'tfidf_word': 'last main info create build relpath basename log abspath resolve ', 'tfidf_method': 'last_commit_info print_command create_testing_environment main build create_build_info log abspath basename relpath ', 'lda_word': ' info,build,resolve,create,shell,', 'lda_method': ' abspath,create_build_info,build,last_commit_info,main,', 'lsi_word': ' resolve,build,info,create,last,', 'lsi_method': ' build,create_build_info,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the shell command. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1177, 'parent': 1332, 'tfidf_word': 'shell exec get fail create info build merge dicts resolve ', 'tfidf_method': 'last_commit_info create_testing_environment main build create_build_info exec_shell fail merge_dicts get get ', 'lda_word': ' resolve,info,build,create,shell,', 'lda_method': ' main,get,resolve,exec_shell,resolve_string,', 'lsi_word': ' resolve,create,info,build,environment,', 'lsi_method': ' execute,build,last_commit_info,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 186, 'parent': 1037, 'tfidf_word': 'EP: 186, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 187, 'parent': 1037, 'tfidf_word': 'EP: 187, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 185, 'parent': 1084, 'tfidf_word': 'EP: 185, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 190, 'parent': 1084, 'tfidf_word': 'EP: 190, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 213, 'parent': 1014, 'tfidf_word': 'EP: 213, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1013, 'parent': 1014, 'tfidf_word': 'execute exec environment command calculate info log basename create build ', 'tfidf_method': 'execute print_command create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs log basename ', 'lda_word': ' build,create,print,shell,section,', 'lda_method': ' execute,create_build_info,create_testing_environment,read_objects_from_libs,calculate_section_sizes,', 'lsi_word': ' create,build,command,object,size,', 'lsi_method': ' build,create_build_info,main,read_objects_from_libs,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 209, 'parent': 1173, 'tfidf_word': 'EP: 209, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1040, 'parent': 1173, 'tfidf_word': 'size testing execute exec environment calculate fail get create build ', 'tfidf_method': 'exec_shell execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs fail get ', 'lda_word': ' build,create,section,libs,exec,', 'lda_method': ' build,exec_shell,create_testing_environment,main,calculate_section_sizes,', 'lsi_word': ' build,create,environment,info,libs,', 'lsi_method': ' build,main,read_objects_from_libs,create_build_info,create_testing_environment,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 206, 'parent': 1130, 'tfidf_word': 'EP: 206, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_fill', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1129, 'parent': 1130, 'tfidf_word': 'create section build get map entry memory symbol line append ', 'tfidf_method': 'create_testing_environment main build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_symbol ', 'lda_word': ' section,build,create,info,size,', 'lda_method': ' create_build_info,main,calculate_section_sizes,build,create_testing_environment,', 'lsi_word': ' create,section,build,environment,parse,', 'lsi_method': ' calculate_section_sizes,main,parse_to_sections,create_testing_environment,build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Load the resource infromation that all modules define. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 198, 'parent': 1199, 'tfidf_word': 'EP: 198, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1198, 'parent': 1199, 'tfidf_word': 'environment info main size testing hoist join build create section ', 'tfidf_method': 'create_testing_environment main build calculate_section_sizes create_build_info join hoist_section ', 'lda_word': ' section,build,create,testing,size,', 'lda_method': ' create_build_info,build,join,create_testing_environment,main,', 'lsi_word': ' create,build,section,testing,main,', 'lsi_method': ' build,calculate_section_sizes,main,create_testing_environment,create_build_info,', 'spm_method': ' ', 'text_summary': 'Write binary size and commit information into a file. Public method to build the module by the given build_info object.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)'}}, {'key': 200, 'parent': 1349, 'tfidf_word': 'EP: 200, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 201, 'parent': 1349, 'tfidf_word': 'EP: 201, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 181, 'parent': 1374, 'tfidf_word': 'EP: 181, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1370, 'parent': 1374, 'tfidf_word': 'main testing write build create dirname exist mkdir open read ', 'tfidf_method': 'write_json_file create_testing_environment main build create_build_info dirname exists mkdir open read_until ', 'lda_word': ' create,build,environment,file,testing,', 'lda_method': ' main,create_build_info,build,write_json_file,create_testing_environment,', 'lsi_word': ' create,build,environment,write,testing,', 'lsi_method': ' write_json_file,build,main,create_testing_environment,create_build_info,', 'spm_method': ' ', 'text_summary': 'Write a JSON file from the given data. Public method to build the module by the given build_info object.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 195, 'parent': 1486, 'tfidf_word': 'EP: 195, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; info &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1276, 'parent': 1486, 'tfidf_word': 'environment info main testing current date join build create ', 'tfidf_method': 'create_testing_environment main build create_build_info current_date join ', 'lda_word': ' build,create,info,main,environment,', 'lda_method': ' create_testing_environment,create_build_info,build,main,current_date,', 'lsi_word': ' create,build,environment,testing,info,', 'lsi_method': ' build,create_testing_environment,main,create_build_info,join,', 'spm_method': ' ', 'text_summary': 'Public method to build the module by the given build_info object.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 167, 'parent': 1035, 'tfidf_word': 'EP: 167, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1034, 'parent': 1035, 'tfidf_word': 'main module print shell testing basename log build command execute ', 'tfidf_method': 'exec_shell execute execute_config_command print_command create_testing_environment main build_modules build log basename ', 'lda_word': ' command,execute,main,environment,build,', 'lda_method': ' print_command,execute,build_modules,build,main,', 'lsi_word': ' command,execute,build,testing,module,', 'lsi_method': ' build,main,execute_config_command,print_command,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Run the command defined in the build.config file. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 164, 'parent': 1082, 'tfidf_word': 'EP: 164, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 169, 'parent': 1082, 'tfidf_word': 'EP: 169, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 170, 'parent': 1083, 'tfidf_word': 'EP: 170, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 172, 'parent': 1083, 'tfidf_word': 'EP: 172, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 158, 'parent': 1033, 'tfidf_word': 'EP: 158, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 160, 'parent': 1033, 'tfidf_word': 'EP: 160, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 156, 'parent': 1012, 'tfidf_word': 'EP: 156, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1011, 'parent': 1012, 'tfidf_word': 'writable exec environment create command execute build log basename abspath ', 'tfidf_method': 'execute print_command create_testing_environment main build_modules build get log abspath basename ', 'lda_word': ' build,mount,exec,execute,module,', 'lda_method': ' execute,build,create_testing_environment,get,exec_shell,', 'lsi_word': ' build,command,execute,testing,environment,', 'lsi_method': ' build,create_testing_environment,exec_shell,main,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 161, 'parent': 1255, 'tfidf_word': 'EP: 161, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1032, 'parent': 1255, 'tfidf_word': 'f main module mount shell testing writable fail build get ', 'tfidf_method': 'mount_fs_writable exec_shell execute create_testing_environment main build_modules build get fail get ', 'lda_word': ' get,build,main,shell,writable,', 'lda_method': ' get,mount_fs_writable,exec_shell,build,main,', 'lsi_word': ' build,get,shell,mount,exec,', 'lsi_method': ' get,build,exec_shell,main,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Public method to build the module by the given build_info object. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 260, 'parent': 1045, 'tfidf_word': 'EP: 260, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1044, 'parent': 1045, 'tfidf_word': 'init main module print shell testing basename log command execute ', 'tfidf_method': 'exec_shell execute execute_config_command print_command create_testing_environment main init_modules build log basename ', 'lda_word': ' execute,command,shell,environment,basename,', 'lda_method': ' create_testing_environment,execute_config_command,init_modules,main,print_command,', 'lsi_word': ' execute,command,testing,environment,print,', 'lsi_method': ' create_testing_environment,execute_config_command,execute,init_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; init_modules(builder.py) &rarr; execute_config_command(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute all the init commands that the modules define. Execute the given test. Print a message with the given color.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '78': 'init_modules(builder.py)', '132': 'execute_config_command(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 257, 'parent': 1086, 'tfidf_word': 'EP: 257, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 262, 'parent': 1086, 'tfidf_word': 'EP: 262, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 263, 'parent': 1087, 'tfidf_word': 'EP: 263, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 265, 'parent': 1087, 'tfidf_word': 'EP: 265, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 235, 'parent': 1350, 'tfidf_word': 'EP: 235, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 236, 'parent': 1350, 'tfidf_word': 'EP: 236, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 233, 'parent': 1277, 'tfidf_word': 'EP: 233, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 251, 'parent': 1277, 'tfidf_word': 'EP: 251, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 220, 'parent': 1354, 'tfidf_word': 'EP: 220, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1200, 'parent': 1354, 'tfidf_word': 'create environment main module read testing exist get build ', 'tfidf_method': 'create_testing_environment main build read_modules should_build exists get ', 'lda_word': ' build,environment,create,module,main,', 'lda_method': ' read_modules,build,should_build,create_testing_environment,main,', 'lsi_word': ' build,module,testing,read,main,', 'lsi_method': ' build,should_build,create_testing_environment,main,read_modules,', 'spm_method': ' ', 'text_summary': 'Collect buildable modules and their build instructions. Public method to build the module by the given build_info object.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '134': 'exists(utils.py)', '64': 'get(coverage_client.py)'}}, {'key': 645, 'parent': 1076, 'tfidf_word': 'EP: 645, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 647, 'parent': 1076, 'tfidf_word': 'EP: 647, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 24, 'parent': 1125, 'tfidf_word': 'EP: 24, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 26, 'parent': 1125, 'tfidf_word': 'EP: 26, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 751, 'parent': 1153, 'tfidf_word': 'EP: 751, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1152, 'parent': 1153, 'tfidf_word': 'execute f flash get mount print shell writable basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command flash get log basename ', 'lda_word': ' writable,flash,exec,print,execute,', 'lda_method': ' execute,mount_fs_writable,get,print_command,flash,', 'lsi_word': ' command,get,print,mount,writable,', 'lsi_method': ' exec_shell,mount_fs_writable,print_command,get,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['flasher.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 748, 'parent': 1227, 'tfidf_word': 'EP: 748, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 753, 'parent': 1227, 'tfidf_word': 'EP: 753, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 643, 'parent': 1027, 'tfidf_word': 'EP: 643, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1026, 'parent': 1027, 'tfidf_word': 'login mount print shell writable execute get abspath basename log ', 'tfidf_method': 'exec_shell execute get_environment print_command execute login get log abspath basename ', 'lda_word': ' get,execute,login,print,writable,', 'lda_method': ' execute,get_environment,exec_shell,login,print_command,', 'lsi_word': ' get,execute,exec,login,print,', 'lsi_method': ' execute,login,get,print_command,exec_shell,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 648, 'parent': 1326, 'tfidf_word': 'EP: 648, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1075, 'parent': 1326, 'tfidf_word': 'environment exec f login mount shell writable fail execute get ', 'tfidf_method': 'mount_fs_writable exec_shell execute get_environment execute login get fail get ', 'lda_word': ' execute,get,writable,login,shell,', 'lda_method': ' execute,get,mount_fs_writable,exec_shell,get_environment,', 'lsi_word': ' get,execute,exec,mount,shell,', 'lsi_method': ' execute,get,login,exec_shell,get_environment,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 22, 'parent': 1079, 'tfidf_word': 'EP: 22, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1078, 'parent': 1079, 'tfidf_word': 'f mount print shell upload writable get abspath basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute get_environment print_command upload get log abspath basename ', 'lda_word': ' get,environment,writable,exec,command,', 'lda_method': ' get_environment,execute,print_command,mount_fs_writable,exec_shell,', 'lsi_word': ' get,mount,execute,shell,print,', 'lsi_method': ' exec_shell,execute,get,print_command,upload,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Execute the given test.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 27, 'parent': 1359, 'tfidf_word': 'EP: 27, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1124, 'parent': 1359, 'tfidf_word': 'environment exec execute f mount shell upload writable fail get ', 'tfidf_method': 'mount_fs_writable exec_shell execute get_environment upload get fail get ', 'lda_word': ' get,shell,exec,mount,upload,', 'lda_method': ' mount_fs_writable,upload,get_environment,execute,exec_shell,', 'lsi_word': ' get,environment,shell,mount,upload,', 'lsi_method': ' get,execute,mount_fs_writable,upload,get_environment,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 5, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 295, 'parent': 1092, 'tfidf_word': 'EP: 295, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 297, 'parent': 1092, 'tfidf_word': 'EP: 297, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 293, 'parent': 1049, 'tfidf_word': 'EP: 293, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1048, 'parent': 1049, 'tfidf_word': 'get main module mount print shell writable abspath basename log ', 'tfidf_method': 'exec_shell execute print_command config_modules finalize main get log abspath basename ', 'lda_word': ' config,main,mount,finalize,shell,', 'lda_method': ' execute,finalize,print_command,main,exec_shell,', 'lsi_word': ' main,config,execute,module,command,', 'lsi_method': ' exec_shell,get,main,finalize,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Remount the file system as writable. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 298, 'parent': 1327, 'tfidf_word': 'EP: 298, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1091, 'parent': 1327, 'tfidf_word': 'execute f finalize main module mount shell writable fail get ', 'tfidf_method': 'mount_fs_writable exec_shell execute config_modules finalize main get fail get ', 'lda_word': ' execute,get,module,main,exec,', 'lda_method': ' fail,main,execute,config_modules,exec_shell,', 'lsi_word': ' get,finalize,execute,exec,mount,', 'lsi_method': ' get,execute,main,mount_fs_writable,finalize,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Remount the file system as writable. Public method to restore the project files.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 312, 'parent': 1094, 'tfidf_word': 'EP: 312, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 314, 'parent': 1094, 'tfidf_word': 'EP: 314, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 310, 'parent': 1052, 'tfidf_word': 'EP: 310, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1051, 'parent': 1052, 'tfidf_word': 'main module mount patch print shell writable abspath basename log ', 'tfidf_method': 'exec_shell execute print_command finalize patch_modules main get log abspath basename ', 'lda_word': ' mount,command,execute,print,exec,', 'lda_method': ' finalize,patch_modules,exec_shell,get,mount_fs_writable,', 'lsi_word': ' execute,patch,print,command,get,', 'lsi_method': ' get,execute,finalize,mount_fs_writable,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 315, 'parent': 1328, 'tfidf_word': 'EP: 315, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1093, 'parent': 1328, 'tfidf_word': 'f finalize main module mount patch shell writable fail get ', 'tfidf_method': 'mount_fs_writable exec_shell execute finalize patch_modules main get fail get ', 'lda_word': ' module,shell,writable,execute,exec,', 'lda_method': ' get,finalize,main,patch_modules,execute,', 'lsi_word': ' get,exec,mount,shell,patch,', 'lsi_method': ' get,exec_shell,main,mount_fs_writable,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Remount the file system as writable. Public method to restore the project files.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 397, 'parent': 1102, 'tfidf_word': 'EP: 397, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 399, 'parent': 1102, 'tfidf_word': 'EP: 399, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 395, 'parent': 1055, 'tfidf_word': 'EP: 395, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1054, 'parent': 1055, 'tfidf_word': 'init initialize module mount print shell writable abspath basename log ', 'tfidf_method': 'exec_shell execute print_command config_modules initialize __init__ get log abspath basename ', 'lda_word': ' config,module,exec,get,shell,', 'lda_method': ' mount_fs_writable,get,execute,print_command,exec_shell,', 'lsi_word': ' get,init,print,mount,module,', 'lsi_method': ' get,execute,initialize,config_modules,print_command,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 400, 'parent': 1329, 'tfidf_word': 'EP: 400, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1101, 'parent': 1329, 'tfidf_word': 'execute f init initialize module mount shell writable fail get ', 'tfidf_method': 'mount_fs_writable exec_shell execute config_modules initialize __init__ get fail get ', 'lda_word': ' writable,get,init,shell,initialize,', 'lda_method': ' get,execute,config_modules,initialize,mount_fs_writable,', 'lsi_word': ' get,config,module,shell,mount,', 'lsi_method': ' get,config_modules,mount_fs_writable,execute,initialize,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 414, 'parent': 1104, 'tfidf_word': 'EP: 414, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 416, 'parent': 1104, 'tfidf_word': 'EP: 416, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 412, 'parent': 1058, 'tfidf_word': 'EP: 412, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1057, 'parent': 1058, 'tfidf_word': 'initialize module mount patch print shell writable abspath basename log ', 'tfidf_method': 'exec_shell execute print_command initialize patch_modules __init__ get log abspath basename ', 'lda_word': ' basename,initialize,shell,module,init,', 'lda_method': ' print_command,exec_shell,execute,get,initialize,', 'lsi_word': ' execute,get,print,mount,init,', 'lsi_method': ' exec_shell,patch_modules,initialize,init,mount_fs_writable,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Return the base name of pathname path. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 417, 'parent': 1330, 'tfidf_word': 'EP: 417, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1103, 'parent': 1330, 'tfidf_word': 'f init initialize module mount patch shell writable fail get ', 'tfidf_method': 'mount_fs_writable exec_shell execute initialize patch_modules __init__ get fail get ', 'lda_word': ' get,init,shell,module,writable,', 'lda_method': ' patch_modules,mount_fs_writable,execute,fail,init,', 'lsi_word': ' get,exec,mount,shell,patch,', 'lsi_method': ' get,init,mount_fs_writable,initialize,patch_modules,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': '', 'files_count': 6, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 224, 'parent': 992, 'tfidf_word': 'EP: 224, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 991, 'parent': 992, 'tfidf_word': 'writable execute exec environment create command f log basename build ', 'tfidf_method': 'execute print_command create_testing_environment main build read_modules should_build get log basename ', 'lda_word': ' main,build,create,exec,command,', 'lda_method': ' mount_fs_writable,create_testing_environment,print_command,should_build,build,', 'lsi_word': ' build,read,create,writable,print,', 'lsi_method': ' execute,mount_fs_writable,get,print_command,should_build,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 221, 'parent': 1016, 'tfidf_word': 'EP: 221, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 226, 'parent': 1016, 'tfidf_word': 'EP: 226, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 112, 'parent': 945, 'tfidf_word': 'EP: 112, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 114, 'parent': 945, 'tfidf_word': 'EP: 114, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 110, 'parent': 931, 'tfidf_word': 'EP: 110, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 930, 'parent': 931, 'tfidf_word': 'create command symbol string shell build abspath basename log resolve ', 'tfidf_method': 'print_command create_testing_environment main build read_modules should_build get log abspath basename ', 'lda_word': ' resolve,execute,build,symbol,environment,', 'lda_method': ' resolve,resolve_symbol,read_modules,execute,resolve_string,', 'lsi_word': ' resolve,build,module,environment,read,', 'lsi_method': ' execute,resolve_string,build,resolve,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 115, 'parent': 1072, 'tfidf_word': 'EP: 115, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 944, 'parent': 1072, 'tfidf_word': 'writable f execute exec environment create fail get build resolve ', 'tfidf_method': 'exec_shell execute create_testing_environment main build read_modules should_build get fail get ', 'lda_word': ' resolve,build,get,main,exec,', 'lda_method': ' get,resolve_symbol,mount_fs_writable,should_build,main,', 'lsi_word': ' resolve,build,get,create,environment,', 'lsi_method': ' get,exec_shell,resolve_symbol,read_modules,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 853, 'parent': 955, 'tfidf_word': 'EP: 853, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 855, 'parent': 955, 'tfidf_word': 'EP: 855, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 851, 'parent': 937, 'tfidf_word': 'EP: 851, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 936, 'parent': 937, 'tfidf_word': 'exec config command file read build log basename abspath resolve ', 'tfidf_method': 'print_command read_config_file flash build read_modules should_build get log abspath basename ', 'lda_word': ' read,resolve,build,config,command,', 'lda_method': ' get,print_command,resolve_string,execute,resolve_symbol,', 'lsi_word': ' resolve,build,read,command,flash,', 'lsi_method': ' flash,resolve_string,read_config_file,resolve,mount_fs_writable,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Resolve the given symbol. Execute the given test.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 856, 'parent': 1074, 'tfidf_word': 'EP: 856, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 954, 'parent': 1074, 'tfidf_word': 'symbol module mount string shell fail build read get resolve ', 'tfidf_method': 'exec_shell execute read_config_file flash build read_modules should_build get fail get ', 'lda_word': ' resolve,read,execute,build,shell,', 'lda_method': ' get,exec_shell,resolve,mount_fs_writable,execute,', 'lsi_word': ' resolve,read,build,get,module,', 'lsi_method': ' get,mount_fs_writable,exec_shell,read_modules,resolve,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 43, 'parent': 957, 'tfidf_word': 'EP: 43, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 45, 'parent': 957, 'tfidf_word': 'EP: 45, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 41, 'parent': 940, 'tfidf_word': 'EP: 41, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 939, 'parent': 940, 'tfidf_word': 'create command symbol execute shell build abspath basename log resolve ', 'tfidf_method': 'execute print_command create_testing_environment main build_modules build get log abspath basename ', 'lda_word': ' resolve,mount,create,build,string,', 'lda_method': ' resolve,execute,build,exec_shell,main,', 'lsi_word': ' resolve,build,command,create,print,', 'lsi_method': ' create_testing_environment,exec_shell,resolve,mount_fs_writable,execute,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the shell command. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 46, 'parent': 1122, 'tfidf_word': 'EP: 46, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 956, 'parent': 1122, 'tfidf_word': 'writable f execute exec environment create fail get build resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute create_testing_environment main build_modules build get fail get ', 'lda_word': ' resolve,build,get,writable,shell,', 'lda_method': ' get,resolve_string,mount_fs_writable,resolve,create_testing_environment,', 'lsi_word': ' resolve,build,get,create,execute,', 'lsi_method': ' get,main,build,mount_fs_writable,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute the shell command. Build all the modules and save the artifacts.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 784, 'parent': 970, 'tfidf_word': 'EP: 784, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 786, 'parent': 970, 'tfidf_word': 'EP: 786, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 782, 'parent': 950, 'tfidf_word': 'EP: 782, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 949, 'parent': 950, 'tfidf_word': 'execute exec config command file build log basename abspath resolve ', 'tfidf_method': 'execute print_command read_config_file flash build_modules build get log abspath basename ', 'lda_word': ' resolve,build,config,exec,read,', 'lda_method': ' flash,print_command,resolve,resolve_symbol,get,', 'lsi_word': ' resolve,build,read,print,flash,', 'lsi_method': ' build,resolve,execute,mount_fs_writable,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Read JSON based configuration file. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 787, 'parent': 1123, 'tfidf_word': 'EP: 787, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 969, 'parent': 1123, 'tfidf_word': 'symbol module mount read string shell fail build get resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute read_config_file flash build_modules build get fail get ', 'lda_word': ' build,resolve,get,execute,read,', 'lda_method': ' build_modules,resolve_symbol,flash,read_config_file,execute,', 'lsi_word': ' resolve,build,get,writable,file,', 'lsi_method': ' get,build,exec_shell,resolve,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 239, 'parent': 1043, 'tfidf_word': 'EP: 239, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1042, 'parent': 1043, 'tfidf_word': 'file main module string symbol testing abspath join read resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file create_testing_environment main build read_modules abspath join ', 'lda_word': ' resolve,read,environment,file,create,', 'lda_method': ' build,create_testing_environment,resolve_symbol,read_modules,read_config_file,', 'lsi_word': ' resolve,read,config,file,environment,', 'lsi_method': ' build,create_testing_environment,resolve_string,read_config_file,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 248, 'parent': 1064, 'tfidf_word': 'EP: 248, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 947, 'parent': 1064, 'tfidf_word': 'environment create copy config f writable exist dirname read resolve ', 'tfidf_method': 'copy execute read_config_file create_testing_environment main build read_modules get dirname exists ', 'lda_word': ' resolve,read,config,copy,symbol,', 'lda_method': ' copy,mount_fs_writable,build,resolve,get,', 'lsi_word': ' resolve,read,copy,create,mount,', 'lsi_method': ' get,execute,mount_fs_writable,read_modules,read_config_file,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Remount the file system as writable. Collect buildable modules and their build instructions. Read JSON based configuration file.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 934, 'parent': 1239, 'tfidf_word': 'build symbol execute shell read abspath relpath basename log resolve ', 'tfidf_method': 'execute resolve_symbol resolve_string resolve exec_shell get basename abspath relpath log ', 'lda_word': ' resolve,basename,read,testing,writable,', 'lda_method': ' print_command,get,exec_shell,read_modules,resolve_symbol,', 'lsi_word': ' resolve,read,create,build,module,', 'lsi_method': ' build,resolve,resolve_symbol,print_command,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1073, 'parent': 1239, 'tfidf_word': 'create config exec shell read get merge dicts fail resolve ', 'tfidf_method': 'read_config_file create_testing_environment main build read_modules get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,read,get,build,environment,', 'lda_method': ' mount_fs_writable,get,create_testing_environment,read_config_file,resolve_symbol,', 'lsi_word': ' resolve,read,get,testing,environment,', 'lsi_method': ' get,build,resolve_symbol,read_modules,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 147, 'parent': 1155, 'tfidf_word': 'EP: 147, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1009, 'parent': 1155, 'tfidf_word': 'get main mount string symbol testing writable dirname exist resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol copy execute create_testing_environment main get dirname exists ', 'lda_word': ' resolve,testing,writable,symbol,mount,', 'lda_method': ' create_testing_environment,copy,resolve_symbol,resolve_string,execute,', 'lsi_word': ' resolve,create,environment,get,testing,', 'lsi_method': ' copy,mount_fs_writable,resolve_symbol,resolve_string,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 990, 'parent': 1340, 'tfidf_word': 'main mount print string shell abspath relpath basename log resolve ', 'tfidf_method': 'exec_shell execute print_command create_testing_environment main get log abspath basename relpath ', 'lda_word': ' resolve,get,main,mount,create,', 'lda_method': ' resolve,create_testing_environment,exec_shell,mount_fs_writable,main,', 'lsi_word': ' resolve,create,get,environment,string,', 'lsi_method': ' create_testing_environment,execute,resolve,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1179, 'parent': 1340, 'tfidf_word': 'environment f writable exec shell get fail merge dicts resolve ', 'tfidf_method': 'resolve_string resolve_symbol execute create_testing_environment main get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,mount,exec,testing,main,', 'lda_method': ' create_testing_environment,get,main,mount_fs_writable,execute,', 'lsi_word': ' resolve,get,testing,writable,string,', 'lsi_method': ' get,main,execute,resolve_symbol,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 885, 'parent': 1157, 'tfidf_word': 'EP: 885, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1024, 'parent': 1157, 'tfidf_word': 'flash get mount read string symbol writable dirname exist resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol copy execute read_config_file flash get dirname exists ', 'lda_word': ' resolve,mount,symbol,flash,get,', 'lda_method': ' mount_fs_writable,get,resolve_string,read_config_file,resolve,', 'lsi_word': ' resolve,string,symbol,flash,mount,', 'lsi_method': ' resolve_symbol,resolve,read_config_file,resolve_string,get,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; copy(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Remount the file system as writable. Read JSON based configuration file.', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '125': 'copy(utils.py)', '128': 'dirname(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1002, 'parent': 1341, 'tfidf_word': 'execute exec config command file log relpath basename abspath resolve ', 'tfidf_method': 'exec_shell execute print_command read_config_file flash get log abspath basename relpath ', 'lda_word': ' resolve,execute,symbol,shell,relpath,', 'lda_method': ' print_command,exec_shell,resolve,mount_fs_writable,get,', 'lsi_word': ' resolve,command,flash,execute,writable,', 'lsi_method': ' read_config_file,resolve_symbol,execute,resolve,mount_fs_writable,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Return a relative filepath to path from the start directory. Recursively replace the symbols in the given string. Recursively loop on the given node, and resolve all the. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1181, 'parent': 1341, 'tfidf_word': 'f execute file exec shell get fail merge dicts resolve ', 'tfidf_method': 'resolve_string resolve_symbol execute read_config_file flash get exec_shell fail merge_dicts get ', 'lda_word': ' resolve,get,string,config,writable,', 'lda_method': ' execute,read_config_file,resolve,get,resolve_string,', 'lsi_word': ' resolve,get,file,symbol,read,', 'lsi_method': ' get,execute,mount_fs_writable,flash,read_config_file,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 483, 'parent': 1295, 'tfidf_word': 'EP: 483, Name: __init__ &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1288, 'parent': 1295, 'tfidf_word': 'builtin exec execute fail get config freya genromfs init internet ', 'tfidf_method': 'fail exec_builtin execute get init_freya_config config_internet genromfs ', 'lda_word': ' execute,get,exec,builtin,fail,', 'lda_method': ' get,fail,execute,exec_builtin,config_internet,', 'lsi_word': ' builtin,exec,execute,get,fail,', 'lsi_method': ' execute,get,fail,exec_builtin,genromfs,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the built-in command.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 500, 'parent': 1301, 'tfidf_word': 'EP: 500, Name: run &rarr; parse_coverage_info &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 539, 'parent': 1301, 'tfidf_word': 'EP: 539, Name: save &rarr; parse_coverage_info &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 892, 'parent': 1509, 'tfidf_word': 'EP: 892, Name: main &rarr; __init__ &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1500, 'parent': 1509, 'tfidf_word': 'command exception exec open timeout main data load map run ', 'tfidf_method': 'TimeoutException exec_command open main run main load_map_data ', 'lda_word': ' main,exception,exec,command,open,', 'lda_method': ' timeoutexception,open,exec_command,run,main,', 'lsi_word': ' command,timeout,exec,exception,open,', 'lsi_method': ' open,timeoutexception,exec_command,main,load_map_data,', 'spm_method': ' ', 'text_summary': 'Execute the given command.', 'files_count': 5, 'files': ['lumpy.py', 'serialcom.py', 'utils.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 342, 'parent': 1284, 'tfidf_word': 'EP: 342, Name: genromfs &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 355, 'parent': 1284, 'tfidf_word': 'EP: 355, Name: config_internet &rarr; execute &rarr; copy &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 653, 'parent': 1314, 'tfidf_word': 'EP: 653, Name: execute &rarr; login &rarr; exec_command &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 654, 'parent': 1314, 'tfidf_word': 'EP: 654, Name: execute &rarr; login &rarr; exec_command &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 927, 'parent': 1415, 'tfidf_word': 'EP: 927, Name: main &rarr; exec_command &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1414, 'parent': 1415, 'tfidf_word': 'exec main print basename relpath command ', 'tfidf_method': 'exec_command main print_command basename relpath ', 'lda_word': ' command,print,exec,main,basename,', 'lda_method': ' exec_command,main,print_command,relpath,basename,', 'lsi_word': ' command,exec,main,print,basename,', 'lsi_method': ' print_command,main,exec_command,basename,relpath,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the given command.', 'files_count': 2, 'files': ['travis_script.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1399, 'parent': 1673, 'tfidf_word': 'exec execute print command abspath basename relpath ', 'tfidf_method': 'execute exec_command print_command abspath basename relpath ', 'lda_word': ' command,execute,print,basename,exec,', 'lda_method': ' execute,exec_command,print_command,relpath,abspath,', 'lsi_word': ' command,print,execute,exec,basename,', 'lsi_method': ' exec_command,execute,print_command,basename,relpath,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the given command.', 'files_count': 3, 'files': ['stm32f4dis.py', 'travis_script.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 1408, 'parent': 1673, 'tfidf_word': 'build exec info iotjs print command abspath basename relpath ', 'tfidf_method': 'iotjs_build_info exec_command print_command abspath basename relpath ', 'lda_word': ' command,build,print,info,iotjs,', 'lda_method': ' exec_command,print_command,iotjs_build_info,abspath,relpath,', 'lsi_word': ' command,exec,print,iotjs,info,', 'lsi_method': ' exec_command,iotjs_build_info,print_command,abspath,basename,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['device_base.py', 'travis_script.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '123': 'abspath(utils.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 15, 'parent': 1473, 'tfidf_word': 'EP: 15, Name: upload &rarr; create_result &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 477, 'parent': 1473, 'tfidf_word': 'EP: 477, Name: read_testsets &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 722, 'parent': 1316, 'tfidf_word': 'EP: 722, Name: __init__ &rarr; __init__ &rarr; login &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 729, 'parent': 1316, 'tfidf_word': 'EP: 729, Name: __init__ &rarr; __init__ &rarr; login &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 10, 'parent': 1472, 'tfidf_word': 'EP: 10, Name: upload &rarr; create_result &rarr; write_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 535, 'parent': 1472, 'tfidf_word': 'EP: 535, Name: save &rarr; write_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1394, 'parent': 1662, 'tfidf_word': 'coverage fail info open parse run save ', 'tfidf_method': 'fail open parse_coverage_info run save ', 'lda_word': ' parse,open,fail,info,coverage,', 'lda_method': ' open,fail,parse_coverage_info,save,run,', 'lsi_word': ' open,info,parse,fail,coverage,', 'lsi_method': ' parse_coverage_info,open,fail,save,run,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['testrunner.py', 'utils.py', 'telnetcom.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '245': 'save(testrunner.py)'}}, {'key': 1620, 'parent': 1662, 'tfidf_word': 'fail open main data load map run ', 'tfidf_method': 'fail open main run main load_map_data ', 'lda_word': ' map,fail,open,load,data,', 'lda_method': ' open,fail,main,run,load_map_data,', 'lsi_word': ' open,fail,main,load,map,', 'lsi_method': ' fail,open,main,load_map_data,run,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['lumpy.py', 'telnetcom.py', 'console.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 270, 'parent': 1508, 'tfidf_word': 'EP: 270, Name: main &rarr; create_testing_environment &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1474, 'parent': 1508, 'tfidf_word': 'file json open create result testsets upload read ', 'tfidf_method': 'read_json_file open read_until create_result upload read_testsets ', 'lda_word': ' read,file,open,json,testsets,', 'lda_method': ' read_json_file,open,read_until,read_testsets,upload,', 'lsi_word': ' read,open,json,file,testsets,', 'lsi_method': ' open,read_json_file,read_until,upload,create_result,', 'spm_method': ' ', 'text_summary': 'Read JSON file. Create a final JSON result file from the build and test information.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'sshcom.py', 'testrunner.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '146': 'read_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '241': 'read_testsets(testrunner.py)'}}, {'key': 668, 'parent': 1506, 'tfidf_word': 'EP: 668, Name: iotjs_build_info &rarr; login &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1317, 'parent': 1506, 'tfidf_word': 'login open read init ', 'tfidf_method': 'open read_until login __init__ __init__ __init__ ', 'lda_word': ' init,login,read,open,', 'lda_method': ' init,open,login,read_until,', 'lsi_word': ' init,open,read,login,', 'lsi_method': ' init,open,read_until,login,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Open the ssh port.', 'files_count': 5, 'files': ['rpi2.py', 'ssh_device.py', 'device_base.py', 'sshcom.py', 'rpi3.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '213': 'login(device_base.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '218': '__init__(rpi3.py)'}}, {'key': 1471, 'parent': 1671, 'tfidf_word': 'file json open read write create result save upload ', 'tfidf_method': 'write_json_file open read_until create_result upload save ', 'lda_word': ' write,open,read,save,file,', 'lda_method': ' open,write_json_file,read_until,upload,create_result,', 'lsi_word': ' write,open,json,file,read,', 'lsi_method': ' open,read_until,write_json_file,upload,create_result,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'sshcom.py', 'testrunner.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '245': 'save(testrunner.py)'}}, {'key': 1661, 'parent': 1671, 'tfidf_word': 'read main coverage info parse run data load map save ', 'tfidf_method': 'open read_until parse_coverage_info main run run save main load_map_data ', 'lda_word': ' info,coverage,parse,open,read,', 'lda_method': ' run,read_until,open,parse_coverage_info,main,', 'lsi_word': ' read,open,main,info,coverage,', 'lsi_method': ' open,read_until,main,parse_coverage_info,run,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Main method to run IoT.js or JerryScript tests.', 'files_count': 6, 'files': ['testrunner.py', 'utils.py', 'sshcom.py', 'lumpy.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '245': 'save(testrunner.py)', '88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 909, 'parent': 1616, 'tfidf_word': 'EP: 909, Name: main &rarr; process_messages &rarr; send_breakpoint &rarr; send_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1571, 'parent': 1616, 'tfidf_word': 'get main process breakpoint message ', 'tfidf_method': 'main process_messages _get_breakpoint get_message ', 'lda_word': ' message,get,main,process,breakpoint,', 'lda_method': ' process_messages,main,get_message,get_breakpoint,', 'lsi_word': ' message,get,process,main,breakpoint,', 'lsi_method': ' main,process_messages,get_message,get_breakpoint,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '54': 'get_message(coverage_client.py)', '49': '_get_breakpoint(coverage_client.py)'}}, {'key': 1490, 'parent': 1680, 'tfidf_word': 'bytecode cp main process function parse release source message send ', 'tfidf_method': 'main process_messages send_bytecode_cp send_message _parse_source _release_function ', 'lda_word': ' send,cp,message,bytecode,main,', 'lda_method': ' main,send_bytecode_cp,send_message,release_function,process_messages,', 'lsi_word': ' message,send,process,cp,main,', 'lsi_method': ' process_messages,send_bytecode_cp,send_message,main,release_function,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '59': 'send_message(coverage_client.py)', '51': '_release_function(coverage_client.py)'}}, {'key': 1592, 'parent': 1680, 'tfidf_word': 'process source message append jerry breakpoint function get insert init ', 'tfidf_method': 'main _parse_source process_messages append __init__ JerryBreakpoint JerryFunction __init__ get_message insert ', 'lda_word': ' message,parse,process,source,main,', 'lda_method': ' process_messages,parse_source,main,init,append,', 'lsi_word': ' message,main,process,source,parse,', 'lsi_method': ' main,parse_source,process_messages,init,append,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['coverage_client.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '54': 'get_message(coverage_client.py)'}}, {'key': 1436, 'parent': 1785, 'tfidf_word': 'json open run command join fail exec exception timeout read ', 'tfidf_method': 'run_testset read_json_file fail TimeoutException join exec_command open open read_until open ', 'lda_word': ' run,read,contain,test,descriptor,', 'lda_method': ' run_testset,run,contain,read_test_descriptor,find_in_skiplist,', 'lsi_word': ' read,run,contain,descriptor,test,', 'lsi_method': ' contain,find_in_skiplist,run,run_testset,read_test_descriptor,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Run all the tests that are in the given testset. Skip tests by the skiplists. Main method to run IoT.js or JerryScript tests.', 'files_count': 7, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1636, 'parent': 1785, 'tfidf_word': 'testset skip timeout append contain exception fail iotjs pass test ', 'tfidf_method': 'log report_fail report_pass report_skip report_testset report_timeout TimeoutException append _skip_iotjs_test contains ', 'lda_word': ' run,testset,report,log,timeout,', 'lda_method': ' run_testset,log,run,report_skip,report_testset,', 'lsi_word': ' run,testset,log,report,skip,', 'lsi_method': ' run_testset,run,log,report_timeout,report_testset,', 'spm_method': ' ', 'text_summary': 'Run all the tests that are in the given testset.', 'files_count': 6, 'files': ['testrunner.py', 'skiplist.py', 'reporter.py', 'console.py', 'utils.py', 'testresult.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '238': '_skip_iotjs_test(skiplist.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1793, 'parent': 1830, 'tfidf_word': 'read upload current data date exception flash send timeout get ', 'tfidf_method': 'get exec_command login current_date TimeoutException read_until send _read_data execute flash ', 'lda_word': ' login,execute,fail,exec,command,', 'lda_method': ' get,get_environment,upload,fail,flash,', 'lsi_word': ' login,execute,get,fail,command,', 'lsi_method': ' login,execute,fail,exec_command,get,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the given command.', 'files_count': 11, 'files': ['testresult.py', 'utils.py', 'coverage_client.py', 'artik053.py', 'flasher.py', 'builtins.py', 'console.py', 'stm32f4dis.py', 'serial_device.py', 'sshcom.py', 'telnetcom.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '169': 'flash(flasher.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)'}}, {'key': 1829, 'parent': 1830, 'tfidf_word': 'info close exist init section remove send read environment device ', 'tfidf_method': 'current_date read_until parse_arguments basename readline is_executable report_final parse_arguments report_coverage execute ', 'lda_word': ' exist,fail,remove,upload,main,', 'lda_method': ' init,exec_command,main,iotjs_build_info,exist,', 'lsi_word': ' init,read,fail,check,args,', 'lsi_method': ' init,fail,check_args,main,open,', 'spm_method': ' ', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Read JSON file. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['ssh_device.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py', 'stm32f4dis.py', 'artik053.py', 'lumpy.py', 'testresult.py', 'tester.py', 'utils.py', 'testrunner.py', 'builtins.py', 'console.py', 'serial_device.py', 'rpi2.py', 'rpi3.py', 'coverage_client.py', 'skiplist.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py'], 'execution_path_count': 167, 'function_id_to_name_file': {'226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '232': 'execute(stm32f4dis.py)', '183': 'execute(artik053.py)', '88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '137': 'join(utils.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '126': 'current_date(utils.py)', '107': 'log(console.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '200': 'read_until(sshcom.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 620, 'parent': 1146, 'tfidf_word': 'EP: 620, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 621, 'parent': 1146, 'tfidf_word': 'EP: 621, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 703, 'parent': 1149, 'tfidf_word': 'EP: 703, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 704, 'parent': 1149, 'tfidf_word': 'EP: 704, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 334, 'parent': 1280, 'tfidf_word': 'EP: 334, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 347, 'parent': 1280, 'tfidf_word': 'EP: 347, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 609, 'parent': 1216, 'tfidf_word': 'EP: 609, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1215, 'parent': 1216, 'tfidf_word': 'command coverage exec print run script shell basename log execute ', 'tfidf_method': 'exec_shell execute print_command execute run_coverage_script log basename ', 'lda_word': ' execute,script,run,shell,print,', 'lda_method': ' execute,print_command,exec_shell,run_coverage_script,log,', 'lsi_word': ' execute,run,coverage,shell,exec,', 'lsi_method': ' execute,exec_shell,run_coverage_script,print_command,log,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 692, 'parent': 1223, 'tfidf_word': 'EP: 692, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1222, 'parent': 1223, 'tfidf_word': 'command coverage exec print run script shell basename log execute ', 'tfidf_method': 'exec_shell execute print_command execute run_coverage_script log basename ', 'lda_word': ' execute,coverage,script,exec,print,', 'lda_method': ' execute,print_command,run_coverage_script,exec_shell,basename,', 'lsi_word': ' execute,command,run,shell,coverage,', 'lsi_method': ' execute,exec_shell,print_command,run_coverage_script,log,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 488, 'parent': 1298, 'tfidf_word': 'EP: 488, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1297, 'parent': 1298, 'tfidf_word': 'command exec execute init print shell basename log ', 'tfidf_method': 'exec_shell execute print_command __init__ log basename ', 'lda_word': ' shell,execute,exec,print,command,', 'lda_method': ' execute,print_command,init,exec_shell,basename,', 'lsi_word': ' print,execute,exec,init,command,', 'lsi_method': ' exec_shell,init,execute,print_command,log,', 'spm_method': ' ', 'text_summary': 'Execute the shell command.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 366, 'parent': 1292, 'tfidf_word': 'EP: 366, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1291, 'parent': 1292, 'tfidf_word': 'config exec execute freya init print shell abspath basename log ', 'tfidf_method': 'init_freya_config exec_shell execute print_command log abspath basename ', 'lda_word': ' freya,command,init,config,exec,', 'lda_method': ' execute,exec_shell,print_command,init_freya_config,log,', 'lsi_word': ' shell,exec,print,init,config,', 'lsi_method': ' execute,exec_shell,print_command,init_freya_config,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 362, 'parent': 1387, 'tfidf_word': 'EP: 362, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 367, 'parent': 1387, 'tfidf_word': 'EP: 367, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1283, 'parent': 1597, 'tfidf_word': 'command exec execute genromfs print shell abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command genromfs log abspath basename relpath ', 'lda_word': ' execute,exec,command,shell,print,', 'lda_method': ' print_command,execute,genromfs,exec_shell,basename,', 'lsi_word': ' genromfs,command,exec,shell,print,', 'lsi_method': ' genromfs,print_command,execute,exec_shell,log,', 'spm_method': ' ', 'text_summary': 'Return a relative filepath to path from the start directory. Execute the shell command. Execute the given test. Return the absolute path.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1383, 'parent': 1597, 'tfidf_word': 'exec execute genromfs shell fail get ', 'tfidf_method': 'exec_shell execute genromfs fail get ', 'lda_word': ' exec,shell,genromfs,fail,execute,', 'lda_method': ' genromfs,get,exec_shell,execute,fail,', 'lsi_word': ' execute,genromfs,shell,exec,fail,', 'lsi_method': ' exec_shell,execute,genromfs,get,fail,', 'spm_method': ' ', 'text_summary': 'Create a romfs_img from the source directory that is. Execute the given test.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 1287, 'parent': 1598, 'tfidf_word': 'config exec execute internet print shell abspath basename log relpath ', 'tfidf_method': 'exec_shell execute print_command config_internet log abspath basename relpath ', 'lda_word': ' shell,config,execute,internet,exec,', 'lda_method': ' exec_shell,config_internet,execute,print_command,log,', 'lsi_word': ' exec,config,shell,print,internet,', 'lsi_method': ' print_command,execute,exec_shell,config_internet,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'97': 'config_internet(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 1385, 'parent': 1598, 'tfidf_word': 'config exec execute internet shell fail get ', 'tfidf_method': 'exec_shell execute config_internet fail get ', 'lda_word': ' execute,shell,internet,exec,get,', 'lda_method': ' execute,config_internet,fail,exec_shell,get,', 'lsi_word': ' config,shell,execute,exec,internet,', 'lsi_method': ' exec_shell,execute,config_internet,fail,get,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out. Execute the given test.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'97': 'config_internet(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 761, 'parent': 1229, 'tfidf_word': 'EP: 761, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 762, 'parent': 1229, 'tfidf_word': 'EP: 762, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 760, 'parent': 1321, 'tfidf_word': 'EP: 760, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 765, 'parent': 1321, 'tfidf_word': 'EP: 765, Name: flash &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 553, 'parent': 1209, 'tfidf_word': 'EP: 553, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1208, 'parent': 1209, 'tfidf_word': 'command exec print reset shell basename log execute ', 'tfidf_method': 'exec_shell execute print_command execute reset log basename ', 'lda_word': ' execute,reset,exec,command,basename,', 'lda_method': ' reset,execute,print_command,exec_shell,basename,', 'lsi_word': ' execute,print,shell,exec,reset,', 'lsi_method': ' execute,print_command,reset,exec_shell,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['stm32f4dis.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 549, 'parent': 1428, 'tfidf_word': 'EP: 549, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1308, 'parent': 1428, 'tfidf_word': 'exec reset shell fail get execute ', 'tfidf_method': 'exec_shell execute execute reset fail get ', 'lda_word': ' execute,exec,shell,reset,fail,', 'lda_method': ' execute,exec_shell,fail,reset,get,', 'lsi_word': ' execute,exec,reset,shell,fail,', 'lsi_method': ' execute,reset,exec_shell,get,fail,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 4, 'files': ['stm32f4dis.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '233': 'reset(stm32f4dis.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 590, 'parent': 1212, 'tfidf_word': 'EP: 590, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1211, 'parent': 1212, 'tfidf_word': 'command exec print reset shell basename log execute ', 'tfidf_method': 'exec_shell execute print_command execute reset log basename ', 'lda_word': ' execute,reset,shell,command,log,', 'lda_method': ' execute,print_command,reset,exec_shell,log,', 'lsi_word': ' execute,command,exec,shell,print,', 'lsi_method': ' execute,print_command,reset,exec_shell,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 586, 'parent': 1430, 'tfidf_word': 'EP: 586, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1310, 'parent': 1430, 'tfidf_word': 'exec reset shell fail get execute ', 'tfidf_method': 'exec_shell execute execute reset fail get ', 'lda_word': ' execute,shell,exec,reset,fail,', 'lda_method': ' execute,exec_shell,reset,fail,get,', 'lsi_word': ' execute,exec,reset,shell,fail,', 'lsi_method': ' execute,reset,exec_shell,fail,get,', 'spm_method': ' ', 'text_summary': 'Reset the device to create clean environment. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '185': 'reset(artik053.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 320, 'parent': 1095, 'tfidf_word': 'EP: 320, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 321, 'parent': 1095, 'tfidf_word': 'EP: 321, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 319, 'parent': 1134, 'tfidf_word': 'EP: 319, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 324, 'parent': 1134, 'tfidf_word': 'EP: 324, Name: main &rarr; finalize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 275, 'parent': 1088, 'tfidf_word': 'EP: 275, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 276, 'parent': 1088, 'tfidf_word': 'EP: 276, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 274, 'parent': 1132, 'tfidf_word': 'EP: 274, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 279, 'parent': 1132, 'tfidf_word': 'EP: 279, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 301, 'parent': 1185, 'tfidf_word': 'EP: 301, Name: main &rarr; finalize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 302, 'parent': 1185, 'tfidf_word': 'EP: 302, Name: main &rarr; finalize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 287, 'parent': 1184, 'tfidf_word': 'EP: 287, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; is_broken_symlink', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1183, 'parent': 1184, 'tfidf_word': 'config finalize main module restore exist file remove ', 'tfidf_method': 'remove restore_file config_modules finalize main exists remove_file ', 'lda_word': ' file,restore,finalize,remove,main,', 'lda_method': ' restore_file,config_modules,main,remove,exist,', 'lsi_word': ' file,remove,module,restore,main,', 'lsi_method': ' finalize,main,remove,restore_file,config_modules,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Public method to restore the project files.', 'files_count': 3, 'files': ['__main__.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '148': 'remove(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 377, 'parent': 1098, 'tfidf_word': 'EP: 377, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 378, 'parent': 1098, 'tfidf_word': 'EP: 378, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 376, 'parent': 1136, 'tfidf_word': 'EP: 376, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 381, 'parent': 1136, 'tfidf_word': 'EP: 381, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 403, 'parent': 1189, 'tfidf_word': 'EP: 403, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 404, 'parent': 1189, 'tfidf_word': 'EP: 404, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; symlink &rarr; remove &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 389, 'parent': 1188, 'tfidf_word': 'EP: 389, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; is_broken_symlink', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1187, 'parent': 1188, 'tfidf_word': 'config init initialize module restore exist file remove ', 'tfidf_method': 'remove restore_file config_modules initialize __init__ exists remove_file ', 'lda_word': ' remove,config,initialize,file,init,', 'lda_method': ' restore_file,init,initialize,remove,exist,', 'lsi_word': ' file,remove,config,restore,module,', 'lsi_method': ' restore_file,remove,init,initialize,config_modules,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Restore the modified project files.', 'files_count': 3, 'files': ['builder.py', '__init__.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '150': 'restore_file(utils.py)', '148': 'remove(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 436, 'parent': 1140, 'tfidf_word': 'EP: 436, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 437, 'parent': 1140, 'tfidf_word': 'EP: 437, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 434, 'parent': 1356, 'tfidf_word': 'EP: 434, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1202, 'parent': 1356, 'tfidf_word': 'exec execute fetch init initialize module shell fail get ', 'tfidf_method': 'exec_shell execute fetch_modules initialize __init__ fail get ', 'lda_word': ' init,execute,get,fetch,exec,', 'lda_method': ' init,execute,exec_shell,initialize,fetch_modules,', 'lsi_word': ' fetch,shell,module,initialize,init,', 'lsi_method': ' exec_shell,init,initialize,fetch_modules,execute,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '171': 'fetch_modules(__init__.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 424, 'parent': 1106, 'tfidf_word': 'EP: 424, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1105, 'parent': 1106, 'tfidf_word': 'exec execute init initialize module print shell basename log patch ', 'tfidf_method': 'exec_shell execute patch print_command initialize patch_modules __init__ log basename ', 'lda_word': ' patch,initialize,module,exec,command,', 'lda_method': ' patch,execute,print_command,initialize,init,', 'lsi_word': ' patch,execute,command,module,initialize,', 'lsi_method': ' init,patch,patch_modules,print_command,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 420, 'parent': 1272, 'tfidf_word': 'EP: 420, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1138, 'parent': 1272, 'tfidf_word': 'exec execute init initialize module shell fail get patch ', 'tfidf_method': 'exec_shell execute patch initialize patch_modules __init__ fail get ', 'lda_word': ' patch,init,shell,initialize,execute,', 'lda_method': ' execute,exec_shell,patch_modules,patch,initialize,', 'lsi_word': ' patch,exec,init,execute,shell,', 'lsi_method': ' patch,patch_modules,initialize,init,execute,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; patch(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '143': 'patch(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 50, 'parent': 958, 'tfidf_word': 'EP: 50, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 51, 'parent': 958, 'tfidf_word': 'EP: 51, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 55, 'parent': 983, 'tfidf_word': 'EP: 55, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 57, 'parent': 983, 'tfidf_word': 'EP: 57, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 791, 'parent': 971, 'tfidf_word': 'EP: 791, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 792, 'parent': 971, 'tfidf_word': 'EP: 792, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 796, 'parent': 995, 'tfidf_word': 'EP: 796, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 798, 'parent': 995, 'tfidf_word': 'EP: 798, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 116, 'parent': 1030, 'tfidf_word': 'EP: 116, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 117, 'parent': 1030, 'tfidf_word': 'EP: 117, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 62, 'parent': 1161, 'tfidf_word': 'EP: 62, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 63, 'parent': 1161, 'tfidf_word': 'EP: 63, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 91, 'parent': 1006, 'tfidf_word': 'EP: 91, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_fill', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1005, 'parent': 1006, 'tfidf_word': 'create symbol section append memory line get entry map resolve ', 'tfidf_method': 'create_testing_environment main build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry try_match_symbol ', 'lda_word': ' resolve,create,append,build,section,', 'lda_method': ' append,create_build_info,build,parse_to_sections,calculate_section_sizes,', 'lsi_word': ' resolve,section,build,create,symbol,', 'lsi_method': ' build,parse_to_sections,calculate_section_sizes,resolve_symbol,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Load the resource infromation that all modules define. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 85, 'parent': 1196, 'tfidf_word': 'EP: 85, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 86, 'parent': 1196, 'tfidf_word': 'EP: 86, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; load_map_data &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1029, 'parent': 1337, 'tfidf_word': 'string symbol testing build create section exist hoist join resolve ', 'tfidf_method': 'resolve_string resolve_symbol create_testing_environment main build calculate_section_sizes create_build_info exists join hoist_section ', 'lda_word': ' resolve,create,environment,build,info,', 'lda_method': ' resolve,create_build_info,resolve_symbol,calculate_section_sizes,create_testing_environment,', 'lsi_word': ' resolve,build,create,section,string,', 'lsi_method': ' build,resolve,resolve_symbol,resolve_string,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '134': 'exists(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)'}}, {'key': 1080, 'parent': 1337, 'tfidf_word': 'main string symbol testing current date join build create resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main build create_build_info current_date join ', 'lda_word': ' create,resolve,environment,build,testing,', 'lda_method': ' resolve,resolve_string,main,create_testing_environment,resolve_symbol,', 'lsi_word': ' resolve,build,create,string,environment,', 'lsi_method': ' build,create_build_info,resolve_symbol,resolve_string,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Resolve the given symbol.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '137': 'join(utils.py)', '126': 'current_date(utils.py)'}}, {'key': 831, 'parent': 1020, 'tfidf_word': 'EP: 831, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_symbol', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1019, 'parent': 1020, 'tfidf_word': 'section append line match map get entry memory try resolve ', 'tfidf_method': 'resolve_symbol read_config_file flash build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry ', 'lda_word': ' resolve,section,build,symbol,size,', 'lda_method': ' resolve_string,resolve_symbol,read_config_file,flash,build,', 'lsi_word': ' resolve,build,section,calculate,flash,', 'lsi_method': ' read_config_file,parse_to_sections,build,create_build_info,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 824, 'parent': 1060, 'tfidf_word': 'EP: 824, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1059, 'parent': 1060, 'tfidf_word': 'info read size string symbol hoist join build section resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol read_config_file flash build calculate_section_sizes create_build_info join hoist_section ', 'lda_word': ' resolve,build,section,create,file,', 'lda_method': ' calculate_section_sizes,read_config_file,build,create_build_info,flash,', 'lsi_word': ' resolve,build,section,size,calculate,', 'lsi_method': ' build,read_config_file,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Write binary size and commit information into a file.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)'}}, {'key': 802, 'parent': 1108, 'tfidf_word': 'EP: 802, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 808, 'parent': 1108, 'tfidf_word': 'EP: 808, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; current_date', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 98, 'parent': 942, 'tfidf_word': 'EP: 98, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 941, 'parent': 942, 'tfidf_word': 'command calculate string execute section basename log create build resolve ', 'tfidf_method': 'execute print_command create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs log basename ', 'lda_word': ' resolve,create,build,libs,exec,', 'lda_method': ' calculate_section_sizes,resolve,create_testing_environment,execute,main,', 'lsi_word': ' resolve,build,create,execute,section,', 'lsi_method': ' build,execute,main,resolve,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Return the sizes of the main sections. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 94, 'parent': 1067, 'tfidf_word': 'EP: 94, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 964, 'parent': 1067, 'tfidf_word': 'execute exec environment calculate info get fail create build resolve ', 'tfidf_method': 'exec_shell execute create_testing_environment main build calculate_section_sizes create_build_info read_objects_from_libs fail get ', 'lda_word': ' build,resolve,create,object,libs,', 'lda_method': ' exec_shell,execute,calculate_section_sizes,create_build_info,build,', 'lsi_word': ' resolve,create,build,calculate,info,', 'lsi_method': ' build,execute,resolve,read_objects_from_libs,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Public method to build the module by the given build_info object. Read all the names of the object files that are.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 839, 'parent': 952, 'tfidf_word': 'EP: 839, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 951, 'parent': 952, 'tfidf_word': 'create config command calculate file log basename read build resolve ', 'tfidf_method': 'execute print_command read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs log basename ', 'lda_word': ' resolve,build,file,execute,info,', 'lda_method': ' calculate_section_sizes,print_command,resolve_symbol,build,exec_shell,', 'lsi_word': ' resolve,read,build,section,shell,', 'lsi_method': ' build,flash,read_config_file,resolve_string,create_build_info,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Read all the names of the object files that are. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read JSON based configuration file. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 835, 'parent': 1070, 'tfidf_word': 'EP: 835, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 977, 'parent': 1070, 'tfidf_word': 'info libs object shell section get fail read build resolve ', 'tfidf_method': 'exec_shell execute read_config_file flash build calculate_section_sizes create_build_info read_objects_from_libs fail get ', 'lda_word': ' resolve,libs,read,build,file,', 'lda_method': ' flash,read_objects_from_libs,resolve,execute,calculate_section_sizes,', 'lsi_word': ' resolve,build,read,calculate,size,', 'lsi_method': ' build,resolve,resolve_symbol,read_config_file,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; read_objects_from_libs(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Read all the names of the object files that are. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '96': 'read_objects_from_libs(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 814, 'parent': 975, 'tfidf_word': 'EP: 814, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 974, 'parent': 975, 'tfidf_word': 'create config commit command execute log basename info build resolve ', 'tfidf_method': 'exec_shell execute last_commit_info print_command read_config_file flash build create_build_info log basename ', 'lda_word': ' resolve,build,info,print,string,', 'lda_method': ' print_command,resolve_string,last_commit_info,exec_shell,flash,', 'lsi_word': ' resolve,info,build,string,command,', 'lsi_method': ' build,last_commit_info,resolve,read_config_file,print_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 810, 'parent': 1120, 'tfidf_word': 'EP: 810, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 998, 'parent': 1120, 'tfidf_word': 'execute exec create config commit get fail info build resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute last_commit_info read_config_file flash build create_build_info fail get ', 'lda_word': ' resolve,info,build,create,string,', 'lda_method': ' execute,read_config_file,resolve_string,flash,exec_shell,', 'lsi_word': ' resolve,build,info,file,symbol,', 'lsi_method': ' last_commit_info,resolve_symbol,read_config_file,resolve_string,flash,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Write binary size and commit information into a file. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 76, 'parent': 985, 'tfidf_word': 'EP: 76, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 78, 'parent': 985, 'tfidf_word': 'EP: 78, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 74, 'parent': 963, 'tfidf_word': 'EP: 74, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 962, 'parent': 963, 'tfidf_word': 'symbol last main info create build basename log abspath resolve ', 'tfidf_method': 'execute last_commit_info print_command create_testing_environment main build create_build_info log abspath basename ', 'lda_word': ' info,build,create,resolve,environment,', 'lda_method': ' resolve_string,create_testing_environment,exec_shell,resolve,main,', 'lsi_word': ' resolve,build,create,info,symbol,', 'lsi_method': ' create_build_info,main,execute,resolve,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the shell command. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 79, 'parent': 1177, 'tfidf_word': 'EP: 79, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1112, 'parent': 1177, 'tfidf_word': 'shell string symbol testing fail get build create info resolve ', 'tfidf_method': 'exec_shell execute last_commit_info create_testing_environment main build create_build_info fail get get ', 'lda_word': ' resolve,info,create,build,execute,', 'lda_method': ' resolve_symbol,resolve,last_commit_info,build,exec_shell,', 'lsi_word': ' resolve,info,create,build,commit,', 'lsi_method': ' create_build_info,main,last_commit_info,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; fail(console.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute the given test. Load the resource infromation that all modules define. Public method to build the module by the given build_info object.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 211, 'parent': 1013, 'tfidf_word': 'EP: 211, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 212, 'parent': 1013, 'tfidf_word': 'EP: 212, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 210, 'parent': 1040, 'tfidf_word': 'EP: 210, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 215, 'parent': 1040, 'tfidf_word': 'EP: 215, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 205, 'parent': 1129, 'tfidf_word': 'EP: 205, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_symbol', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1128, 'parent': 1129, 'tfidf_word': 'create section append memory line map get entry match try ', 'tfidf_method': 'create_testing_environment main build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry ', 'lda_word': ' build,section,create,memory,map,', 'lda_method': ' calculate_section_sizes,parse_to_sections,create_build_info,create_testing_environment,build,', 'lsi_word': ' build,section,create,calculate,testing,', 'lsi_method': ' create_testing_environment,main,parse_to_sections,build,calculate_section_sizes,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Return the sizes of the main sections. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 196, 'parent': 1198, 'tfidf_word': 'EP: 196, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; hoist_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 197, 'parent': 1198, 'tfidf_word': 'EP: 197, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 180, 'parent': 1370, 'tfidf_word': 'EP: 180, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1343, 'parent': 1370, 'tfidf_word': 'info json main testing write dirname exist mkdir build create ', 'tfidf_method': 'write_json_file create_testing_environment main build create_build_info dirname exists mkdir ', 'lda_word': ' build,create,file,write,environment,', 'lda_method': ' build,mkdir,create_build_info,create_testing_environment,write_json_file,', 'lsi_word': ' build,create,write,testing,main,', 'lsi_method': ' build,main,create_testing_environment,write_json_file,create_build_info,', 'spm_method': ' ', 'text_summary': 'Write binary size and commit information into a file. Write a JSON file from the given data.', 'files_count': 4, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 176, 'parent': 1276, 'tfidf_word': 'EP: 176, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 182, 'parent': 1276, 'tfidf_word': 'EP: 182, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; current_date', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 165, 'parent': 1034, 'tfidf_word': 'EP: 165, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 166, 'parent': 1034, 'tfidf_word': 'EP: 166, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 155, 'parent': 1011, 'tfidf_word': 'EP: 155, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1010, 'parent': 1011, 'tfidf_word': 'writable execute exec environment create command f log basename build ', 'tfidf_method': 'exec_shell execute print_command create_testing_environment main build_modules build get log basename ', 'lda_word': ' basename,build,module,testing,get,', 'lda_method': ' main,create_testing_environment,build,print_command,get,', 'lsi_word': ' build,create,module,main,mount,', 'lsi_method': ' build,build_modules,print_command,mount_fs_writable,get,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the given test. Public method to build the module by the given build_info object. Print a message with the given color.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 152, 'parent': 1032, 'tfidf_word': 'EP: 152, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 157, 'parent': 1032, 'tfidf_word': 'EP: 157, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 258, 'parent': 1044, 'tfidf_word': 'EP: 258, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 259, 'parent': 1044, 'tfidf_word': 'EP: 259, Name: main &rarr; create_testing_environment &rarr; build &rarr; init_modules &rarr; execute_config_command &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 231, 'parent': 1200, 'tfidf_word': 'EP: 231, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 232, 'parent': 1200, 'tfidf_word': 'EP: 232, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 749, 'parent': 1152, 'tfidf_word': 'EP: 749, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 750, 'parent': 1152, 'tfidf_word': 'EP: 750, Name: flash &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 642, 'parent': 1026, 'tfidf_word': 'EP: 642, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1025, 'parent': 1026, 'tfidf_word': 'f login mount print shell writable basename log execute get ', 'tfidf_method': 'mount_fs_writable exec_shell execute get_environment print_command execute login get log basename ', 'lda_word': ' get,execute,login,environment,print,', 'lda_method': ' execute,print_command,get,exec_shell,login,', 'lsi_word': ' get,execute,command,exec,mount,', 'lsi_method': ' execute,exec_shell,get_environment,login,print_command,', 'spm_method': '  &#187; execute(artik053.py) &rarr; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; login(artik053.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 639, 'parent': 1075, 'tfidf_word': 'EP: 639, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 644, 'parent': 1075, 'tfidf_word': 'EP: 644, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 21, 'parent': 1078, 'tfidf_word': 'EP: 21, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1077, 'parent': 1078, 'tfidf_word': 'execute f mount print shell upload writable basename log get ', 'tfidf_method': 'mount_fs_writable exec_shell execute get_environment print_command upload get log basename ', 'lda_word': ' environment,get,execute,print,upload,', 'lda_method': ' mount_fs_writable,execute,get,exec_shell,get_environment,', 'lsi_word': ' get,command,mount,shell,print,', 'lsi_method': ' exec_shell,print_command,get,mount_fs_writable,get_environment,', 'spm_method': '  &#187; upload(testresult.py) &rarr; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; get_environment(utils.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 18, 'parent': 1124, 'tfidf_word': 'EP: 18, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 23, 'parent': 1124, 'tfidf_word': 'EP: 23, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 292, 'parent': 1048, 'tfidf_word': 'EP: 292, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1047, 'parent': 1048, 'tfidf_word': 'finalize get main module mount print shell writable basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command config_modules finalize main get log basename ', 'lda_word': ' finalize,exec,mount,config,main,', 'lda_method': ' execute,get,config_modules,basename,exec_shell,', 'lsi_word': ' command,module,main,mount,get,', 'lsi_method': ' config_modules,finalize,get,main,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 289, 'parent': 1091, 'tfidf_word': 'EP: 289, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 294, 'parent': 1091, 'tfidf_word': 'EP: 294, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 309, 'parent': 1051, 'tfidf_word': 'EP: 309, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1050, 'parent': 1051, 'tfidf_word': 'get main module mount patch print shell writable basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command finalize patch_modules main get log basename ', 'lda_word': ' print,writable,exec,finalize,mount,', 'lda_method': ' execute,patch_modules,print_command,exec_shell,get,', 'lsi_word': ' exec,get,mount,module,print,', 'lsi_method': ' exec_shell,main,get,mount_fs_writable,print_command,', 'spm_method': '  &#187; main(__main__.py) &rarr; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; finalize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['__main__.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '172': 'finalize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 306, 'parent': 1093, 'tfidf_word': 'EP: 306, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 311, 'parent': 1093, 'tfidf_word': 'EP: 311, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 394, 'parent': 1054, 'tfidf_word': 'EP: 394, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1053, 'parent': 1054, 'tfidf_word': 'get init initialize module mount print shell writable basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command config_modules initialize __init__ get log basename ', 'lda_word': ' exec,mount,command,initialize,shell,', 'lda_method': ' exec_shell,execute,initialize,mount_fs_writable,init,', 'lsi_word': ' init,config,mount,module,writable,', 'lsi_method': ' config_modules,execute,get,mount_fs_writable,print_command,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; config_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '170': 'config_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 391, 'parent': 1101, 'tfidf_word': 'EP: 391, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 396, 'parent': 1101, 'tfidf_word': 'EP: 396, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 411, 'parent': 1057, 'tfidf_word': 'EP: 411, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1056, 'parent': 1057, 'tfidf_word': 'init initialize module mount patch print shell writable basename log ', 'tfidf_method': 'mount_fs_writable exec_shell execute print_command initialize patch_modules __init__ get log basename ', 'lda_word': ' init,module,command,shell,print,', 'lda_method': ' execute,exec_shell,print_command,init,get,', 'lsi_word': ' command,exec,patch,initialize,mount,', 'lsi_method': ' initialize,execute,init,patch_modules,mount_fs_writable,', 'spm_method': '  &#187; __init__(builder.py) &rarr; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; initialize(__init__.py) &rarr; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; patch_modules(__init__.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 5, 'files': ['builder.py', '__init__.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'80': '__init__(builder.py)', '173': 'initialize(__init__.py)', '174': 'patch_modules(__init__.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 408, 'parent': 1103, 'tfidf_word': 'EP: 408, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 413, 'parent': 1103, 'tfidf_word': 'EP: 413, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 222, 'parent': 991, 'tfidf_word': 'EP: 222, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 223, 'parent': 991, 'tfidf_word': 'EP: 223, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 109, 'parent': 930, 'tfidf_word': 'EP: 109, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 929, 'parent': 930, 'tfidf_word': 'f execute exec environment create command log basename build resolve ', 'tfidf_method': 'execute print_command create_testing_environment main build read_modules should_build get log basename ', 'lda_word': ' resolve,build,shell,print,string,', 'lda_method': ' resolve_symbol,mount_fs_writable,exec_shell,create_testing_environment,print_command,', 'lsi_word': ' resolve,build,exec,string,shell,', 'lsi_method': ' build,resolve_symbol,resolve,print_command,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Execute the given test. Resolve the given symbol.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 106, 'parent': 944, 'tfidf_word': 'EP: 106, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 111, 'parent': 944, 'tfidf_word': 'EP: 111, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 850, 'parent': 936, 'tfidf_word': 'EP: 850, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 935, 'parent': 936, 'tfidf_word': 'execute exec config command file log basename read build resolve ', 'tfidf_method': 'execute print_command read_config_file flash build read_modules should_build get log basename ', 'lda_word': ' resolve,read,build,shell,mount,', 'lda_method': ' build,resolve_string,flash,resolve_symbol,mount_fs_writable,', 'lsi_word': ' resolve,read,build,command,exec,', 'lsi_method': ' exec_shell,execute,resolve_string,resolve,read_modules,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; should_build(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Read JSON based configuration file. Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol. Execute the given test.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '83': 'should_build(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 847, 'parent': 954, 'tfidf_word': 'EP: 847, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 852, 'parent': 954, 'tfidf_word': 'EP: 852, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 40, 'parent': 939, 'tfidf_word': 'EP: 40, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 938, 'parent': 939, 'tfidf_word': 'main module mount print string shell basename log build resolve ', 'tfidf_method': 'exec_shell execute print_command create_testing_environment main build_modules build get log basename ', 'lda_word': ' resolve,build,execute,writable,mount,', 'lda_method': ' build,resolve_string,print_command,resolve_symbol,get,', 'lsi_word': ' resolve,build,get,execute,shell,', 'lsi_method': ' build,mount_fs_writable,main,print_command,get,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute the shell command. Helper function to print commands. Build all the modules and save the artifacts.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 37, 'parent': 956, 'tfidf_word': 'EP: 37, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 42, 'parent': 956, 'tfidf_word': 'EP: 42, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 781, 'parent': 949, 'tfidf_word': 'EP: 781, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 948, 'parent': 949, 'tfidf_word': 'f execute exec config command flash log basename build resolve ', 'tfidf_method': 'exec_shell execute print_command read_config_file flash build_modules build get log basename ', 'lda_word': ' resolve,build,writable,mount,flash,', 'lda_method': ' print_command,resolve_string,mount_fs_writable,resolve_symbol,flash,', 'lsi_word': ' resolve,build,file,symbol,config,', 'lsi_method': ' build,build_modules,read_config_file,get,print_command,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build_modules(builder.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol. Read JSON based configuration file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '77': 'build_modules(builder.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 778, 'parent': 969, 'tfidf_word': 'EP: 778, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 783, 'parent': 969, 'tfidf_word': 'EP: 783, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 237, 'parent': 1042, 'tfidf_word': 'EP: 237, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 238, 'parent': 1042, 'tfidf_word': 'EP: 238, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 247, 'parent': 947, 'tfidf_word': 'EP: 247, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 249, 'parent': 947, 'tfidf_word': 'EP: 249, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 245, 'parent': 934, 'tfidf_word': 'EP: 245, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 933, 'parent': 934, 'tfidf_word': 'create config command build f read log basename abspath resolve ', 'tfidf_method': 'print_command read_config_file create_testing_environment main build read_modules get log abspath basename ', 'lda_word': ' resolve,read,string,print,symbol,', 'lda_method': ' create_testing_environment,execute,get,mount_fs_writable,log,', 'lsi_word': ' resolve,read,exec,create,string,', 'lsi_method': ' build,read_config_file,resolve,read_modules,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Resolve the given symbol. Public method to build the module by the given build_info object.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 250, 'parent': 1073, 'tfidf_word': 'EP: 250, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 946, 'parent': 1073, 'tfidf_word': 'execute exec environment create config file fail read get resolve ', 'tfidf_method': 'exec_shell execute read_config_file create_testing_environment main build read_modules get fail get ', 'lda_word': ' resolve,read,create,get,exec,', 'lda_method': ' get,main,build,execute,read_modules,', 'lsi_word': ' resolve,read,get,file,mount,', 'lsi_method': ' get,build,exec_shell,resolve,resolve_string,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Public method to build the module by the given build_info object. Resolve the given symbol.', 'files_count': 8, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 146, 'parent': 1009, 'tfidf_word': 'EP: 146, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 148, 'parent': 1009, 'tfidf_word': 'EP: 148, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 144, 'parent': 990, 'tfidf_word': 'EP: 144, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 989, 'parent': 990, 'tfidf_word': 'testing main mount print string shell abspath basename log resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute print_command create_testing_environment main get log abspath basename ', 'lda_word': ' resolve,create,log,environment,symbol,', 'lda_method': ' print_command,resolve_string,get,mount_fs_writable,main,', 'lsi_word': ' resolve,testing,exec,command,execute,', 'lsi_method': ' create_testing_environment,get,resolve,print_command,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 149, 'parent': 1179, 'tfidf_word': 'EP: 149, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1008, 'parent': 1179, 'tfidf_word': 'main mount shell string symbol testing writable fail get resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol exec_shell execute create_testing_environment main get fail get ', 'lda_word': ' resolve,get,shell,main,create,', 'lda_method': ' resolve,resolve_symbol,execute,mount_fs_writable,main,', 'lsi_word': ' resolve,get,environment,string,mount,', 'lsi_method': ' get,exec_shell,create_testing_environment,mount_fs_writable,resolve,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute the shell command. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 884, 'parent': 1024, 'tfidf_word': 'EP: 884, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 886, 'parent': 1024, 'tfidf_word': 'EP: 886, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; copy &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 882, 'parent': 1002, 'tfidf_word': 'EP: 882, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1001, 'parent': 1002, 'tfidf_word': 'f execute exec config command file log basename abspath resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute print_command read_config_file flash get log abspath basename ', 'lda_word': ' resolve,print,config,get,shell,', 'lda_method': ' resolve,flash,get,resolve_symbol,exec_shell,', 'lsi_word': ' resolve,string,mount,read,get,', 'lsi_method': ' get,flash,print_command,read_config_file,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Return the base name of pathname path. Resolve the given symbol.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 887, 'parent': 1181, 'tfidf_word': 'EP: 887, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1023, 'parent': 1181, 'tfidf_word': 'flash mount read shell string symbol writable fail get resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol exec_shell execute read_config_file flash get fail get ', 'lda_word': ' resolve,exec,mount,fail,get,', 'lda_method': ' get,flash,mount_fs_writable,execute,read_config_file,', 'lsi_word': ' resolve,get,flash,file,shell,', 'lsi_method': ' get,read_config_file,resolve_string,resolve,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 360, 'parent': 1288, 'tfidf_word': 'EP: 360, Name: init_freya_config &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1279, 'parent': 1288, 'tfidf_word': 'builtin exec execute fail get config genromfs internet ', 'tfidf_method': 'fail exec_builtin execute get config_internet genromfs ', 'lda_word': ' execute,fail,get,builtin,exec,', 'lda_method': ' execute,fail,get,exec_builtin,genromfs,', 'lsi_word': ' builtin,get,fail,execute,exec,', 'lsi_method': ' exec_builtin,execute,fail,get,genromfs,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '129': 'exec_builtin(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '97': 'config_internet(builtins.py)'}}, {'key': 447, 'parent': 1500, 'tfidf_word': 'EP: 447, Name: main &rarr; load_map_data &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1390, 'parent': 1500, 'tfidf_word': 'command exception exec open timeout main run ', 'tfidf_method': 'TimeoutException exec_command open run main main ', 'lda_word': ' exception,open,main,command,exec,', 'lda_method': ' main,timeoutexception,open,exec_command,run,', 'lsi_word': ' command,exec,timeout,exception,open,', 'lsi_method': ' open,timeoutexception,exec_command,main,run,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 5, 'files': ['coverage_client.py', 'serialcom.py', 'utils.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '88': 'main(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 925, 'parent': 1414, 'tfidf_word': 'EP: 925, Name: main &rarr; exec_command &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 926, 'parent': 1414, 'tfidf_word': 'EP: 926, Name: main &rarr; exec_command &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 578, 'parent': 1399, 'tfidf_word': 'EP: 578, Name: execute &rarr; exec_command &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1398, 'parent': 1399, 'tfidf_word': 'exec execute print basename relpath command ', 'tfidf_method': 'execute exec_command print_command basename relpath ', 'lda_word': ' command,print,execute,exec,relpath,', 'lda_method': ' exec_command,execute,relpath,print_command,basename,', 'lsi_word': ' command,exec,execute,print,relpath,', 'lsi_method': ' exec_command,execute,print_command,relpath,basename,', 'spm_method': ' ', 'text_summary': 'Execute the given command.', 'files_count': 3, 'files': ['stm32f4dis.py', 'travis_script.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 679, 'parent': 1408, 'tfidf_word': 'EP: 679, Name: iotjs_build_info &rarr; exec_command &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1407, 'parent': 1408, 'tfidf_word': 'build exec info iotjs print basename relpath command ', 'tfidf_method': 'iotjs_build_info exec_command print_command basename relpath ', 'lda_word': ' iotjs,command,info,exec,basename,', 'lda_method': ' iotjs_build_info,print_command,exec_command,relpath,basename,', 'lsi_word': ' command,iotjs,build,print,info,', 'lsi_method': ' print_command,iotjs_build_info,exec_command,basename,relpath,', 'spm_method': ' ', 'text_summary': 'Execute the given command.', 'files_count': 3, 'files': ['device_base.py', 'travis_script.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '264': 'exec_command(travis_script.py)', '268': 'print_command(travis_script.py)', '147': 'relpath(utils.py)', '124': 'basename(utils.py)'}}, {'key': 502, 'parent': 1394, 'tfidf_word': 'EP: 502, Name: run &rarr; parse_coverage_info &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 541, 'parent': 1394, 'tfidf_word': 'EP: 541, Name: save &rarr; parse_coverage_info &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 448, 'parent': 1620, 'tfidf_word': 'EP: 448, Name: main &rarr; load_map_data &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1525, 'parent': 1620, 'tfidf_word': 'fail open main run ', 'tfidf_method': 'fail open run main main ', 'lda_word': ' open,fail,main,run,', 'lda_method': ' open,fail,main,run,', 'lsi_word': ' fail,open,main,run,', 'lsi_method': ' fail,open,main,run,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['coverage_client.py', 'telnetcom.py', 'console.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '88': 'main(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 16, 'parent': 1474, 'tfidf_word': 'EP: 16, Name: upload &rarr; create_result &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 478, 'parent': 1474, 'tfidf_word': 'EP: 478, Name: read_testsets &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 724, 'parent': 1317, 'tfidf_word': 'EP: 724, Name: __init__ &rarr; __init__ &rarr; login &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 731, 'parent': 1317, 'tfidf_word': 'EP: 731, Name: __init__ &rarr; __init__ &rarr; login &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 9, 'parent': 1471, 'tfidf_word': 'EP: 9, Name: upload &rarr; create_result &rarr; write_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 534, 'parent': 1471, 'tfidf_word': 'EP: 534, Name: save &rarr; write_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1393, 'parent': 1661, 'tfidf_word': 'coverage info open parse read run save ', 'tfidf_method': 'open read_until parse_coverage_info run save ', 'lda_word': ' open,coverage,read,run,info,', 'lda_method': ' parse_coverage_info,open,save,read_until,run,', 'lsi_word': ' info,read,parse,open,coverage,', 'lsi_method': ' parse_coverage_info,open,read_until,save,run,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '245': 'save(testrunner.py)'}}, {'key': 1621, 'parent': 1661, 'tfidf_word': 'open read main data load map run ', 'tfidf_method': 'open read_until main run main load_map_data ', 'lda_word': ' main,open,read,run,data,', 'lda_method': ' open,read_until,run,main,load_map_data,', 'lsi_word': ' open,read,main,data,map,', 'lsi_method': ' open,read_until,main,load_map_data,run,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 4, 'files': ['lumpy.py', 'sshcom.py', 'coverage_client.py', 'twisted_server.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '87': 'load_map_data(lumpy.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '43': 'main(coverage_client.py)', '161': 'run(twisted_server.py)'}}, {'key': 899, 'parent': 1571, 'tfidf_word': 'EP: 899, Name: main &rarr; process_messages &rarr; get_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 900, 'parent': 1571, 'tfidf_word': 'EP: 900, Name: main &rarr; process_messages &rarr; _get_breakpoint', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 908, 'parent': 1490, 'tfidf_word': 'EP: 908, Name: main &rarr; process_messages &rarr; _parse_source &rarr; send_bytecode_cp &rarr; send_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1411, 'parent': 1490, 'tfidf_word': 'bytecode cp function main process release parse source message send ', 'tfidf_method': 'main _release_function process_messages send_bytecode_cp send_message _parse_source ', 'lda_word': ' send,main,message,function,process,', 'lda_method': ' release_function,main,process_messages,send_bytecode_cp,send_message,', 'lsi_word': ' send,message,bytecode,cp,release,', 'lsi_method': ' main,process_messages,release_function,send_message,send_bytecode_cp,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '51': '_release_function(coverage_client.py)', '57': 'send_bytecode_cp(coverage_client.py)', '59': 'send_message(coverage_client.py)', '50': '_parse_source(coverage_client.py)'}}, {'key': 1323, 'parent': 1592, 'tfidf_word': 'main message parse process source breakpoint jerry init ', 'tfidf_method': 'main _parse_source process_messages __init__ JerryBreakpoint __init__ ', 'lda_word': ' main,process,message,source,parse,', 'lda_method': ' init,parse_source,process_messages,main,jerrybreakpoint,', 'lsi_word': ' init,main,parse,process,source,', 'lsi_method': ' init,parse_source,process_messages,main,jerrybreakpoint,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '60': '__init__(coverage_client.py)', '38': 'JerryBreakpoint(coverage_client.py)', '46': '__init__(coverage_client.py)'}}, {'key': 1501, 'parent': 1592, 'tfidf_word': 'main parse process source append message function get insert jerry ', 'tfidf_method': 'main _parse_source process_messages append JerryFunction get_message insert ', 'lda_word': ' message,parse,source,main,process,', 'lda_method': ' parse_source,process_messages,main,get_message,append,', 'lsi_word': ' message,process,parse,main,source,', 'lsi_method': ' main,parse_source,process_messages,append,insert,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['coverage_client.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '65': 'insert(coverage_client.py)', '177': 'append(testresult.py)', '40': 'JerryFunction(coverage_client.py)', '54': 'get_message(coverage_client.py)'}}, {'key': 512, 'parent': 1436, 'tfidf_word': 'EP: 512, Name: run &rarr; run_testset &rarr; contains &rarr; _find_in_skiplist &rarr; _read_test_descriptor &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1427, 'parent': 1436, 'tfidf_word': 'skiplist test testset run command exception exec fail timeout read ', 'tfidf_method': 'contains run run_testset fail TimeoutException exec_command open open read_until open ', 'lda_word': ' read,run,contain,descriptor,open,', 'lda_method': ' read_json_file,open,run_testset,find_in_skiplist,run,', 'lsi_word': ' read,run,contain,json,file,', 'lsi_method': ' find_in_skiplist,read_json_file,run,open,read_test_descriptor,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Run all the tests that are in the given testset. Skip tests by the skiplists. Main method to run IoT.js or JerryScript tests.', 'files_count': 7, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 516, 'parent': 1636, 'tfidf_word': 'EP: 516, Name: run &rarr; run_testset &rarr; contains &rarr; _skip_iotjs_test', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1634, 'parent': 1636, 'tfidf_word': 'log report run testset timeout append exception fail pass skip ', 'tfidf_method': 'run run_testset log report_fail report_pass report_skip report_testset report_timeout TimeoutException append ', 'lda_word': ' run,log,report,testset,skip,', 'lda_method': ' run,run_testset,log,report_skip,report_pass,', 'lsi_word': ' run,testset,log,report,timeout,', 'lsi_method': ' run_testset,run,log,report_fail,report_pass,', 'spm_method': ' ', 'text_summary': 'Run all the tests that are in the given testset. Main method to run IoT.js or JerryScript tests.', 'files_count': 5, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'testresult.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '114': 'report_skip(reporter.py)', '107': 'log(console.py)', '116': 'report_timeout(reporter.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1762, 'parent': 1793, 'tfidf_word': 'environment fail execute login upload get flash ', 'tfidf_method': 'get_environment fail get upload execute login get flash ', 'lda_word': ' get,environment,fail,login,execute,', 'lda_method': ' get_environment,execute,get,login,fail,', 'lsi_word': ' get,environment,fail,execute,login,', 'lsi_method': ' get,get_environment,fail,login,execute,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['testresult.py', 'utils.py', 'coverage_client.py', 'artik053.py', 'flasher.py', 'builtins.py', 'console.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '169': 'flash(flasher.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)'}}, {'key': 1766, 'parent': 1793, 'tfidf_word': 'exec fail login read current data date exception send timeout ', 'tfidf_method': 'fail exec_command exec_command login TimeoutException current_date read_until send _read_data execute ', 'lda_word': ' execute,command,exec,login,exception,', 'lda_method': ' login,execute,exec_command,fail,timeoutexception,', 'lsi_word': ' login,execute,exec,command,fail,', 'lsi_method': ' login,execute,exec_command,fail,read_data,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Execute the given test. Execute the given command.', 'files_count': 7, 'files': ['stm32f4dis.py', 'serial_device.py', 'console.py', 'artik053.py', 'sshcom.py', 'utils.py', 'telnetcom.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '126': 'current_date(utils.py)'}}, {'key': 1801, 'parent': 1829, 'tfidf_word': 'logout execute close del ', 'tfidf_method': 'logout close close close execute __del__ execute ', 'lda_word': ' close,logout,del,execute,', 'lda_method': ' close,execute,logout,del,', 'lsi_word': ' close,logout,execute,del,', 'lsi_method': ' close,logout,execute,del,', 'spm_method': ' ', 'text_summary': 'Close the ssh port.', 'files_count': 7, 'files': ['ssh_device.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py', 'stm32f4dis.py', 'artik053.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '232': 'execute(stm32f4dis.py)', '183': 'execute(artik053.py)'}}, {'key': 1827, 'parent': 1829, 'tfidf_word': 'pi2 info exist init section remove send read environment device ', 'tfidf_method': 'current_date putc parse_arguments basename is_executable report_final parse_arguments ARTIK053Device rmtree execute ', 'lda_word': ' read,init,join,test,file,', 'lda_method': ' main,join,run,parse_to_sections,parse_coverage_info,', 'lsi_word': ' init,read,fail,check,args,', 'lsi_method': ' init,fail,check_args,main,open,', 'spm_method': ' ', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['lumpy.py', 'testresult.py', 'tester.py', 'utils.py', 'artik053.py', 'ssh_device.py', 'testrunner.py', 'builtins.py', 'console.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'device_base.py', 'rpi2.py', 'rpi3.py', 'sshcom.py', 'coverage_client.py', 'skiplist.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py'], 'execution_path_count': 155, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '137': 'join(utils.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '255': 'execute(tester.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '126': 'current_date(utils.py)', '107': 'log(console.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 607, 'parent': 1215, 'tfidf_word': 'EP: 607, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 608, 'parent': 1215, 'tfidf_word': 'EP: 608, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 690, 'parent': 1222, 'tfidf_word': 'EP: 690, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 691, 'parent': 1222, 'tfidf_word': 'EP: 691, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 486, 'parent': 1297, 'tfidf_word': 'EP: 486, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 487, 'parent': 1297, 'tfidf_word': 'EP: 487, Name: __init__ &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 365, 'parent': 1291, 'tfidf_word': 'EP: 365, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1290, 'parent': 1291, 'tfidf_word': 'command config exec execute freya init print shell basename log ', 'tfidf_method': 'init_freya_config exec_shell execute print_command log basename ', 'lda_word': ' init,execute,command,exec,shell,', 'lda_method': ' init_freya_config,exec_shell,print_command,execute,log,', 'lsi_word': ' exec,init,shell,print,freya,', 'lsi_method': ' exec_shell,execute,init_freya_config,print_command,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 339, 'parent': 1283, 'tfidf_word': 'EP: 339, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1282, 'parent': 1283, 'tfidf_word': 'command exec execute genromfs print shell abspath basename log ', 'tfidf_method': 'exec_shell execute print_command genromfs log abspath basename ', 'lda_word': ' print,command,shell,execute,genromfs,', 'lda_method': ' print_command,execute,exec_shell,genromfs,log,', 'lsi_word': ' exec,print,execute,shell,command,', 'lsi_method': ' print_command,genromfs,execute,exec_shell,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 335, 'parent': 1383, 'tfidf_word': 'EP: 335, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 340, 'parent': 1383, 'tfidf_word': 'EP: 340, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 352, 'parent': 1287, 'tfidf_word': 'EP: 352, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1286, 'parent': 1287, 'tfidf_word': 'command config exec execute internet print shell abspath basename log ', 'tfidf_method': 'exec_shell execute print_command config_internet log abspath basename ', 'lda_word': ' shell,exec,internet,print,command,', 'lda_method': ' config_internet,exec_shell,execute,print_command,basename,', 'lsi_word': ' exec,internet,config,shell,command,', 'lsi_method': ' print_command,execute,exec_shell,config_internet,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'97': 'config_internet(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '123': 'abspath(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 348, 'parent': 1385, 'tfidf_word': 'EP: 348, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 353, 'parent': 1385, 'tfidf_word': 'EP: 353, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 551, 'parent': 1208, 'tfidf_word': 'EP: 551, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 552, 'parent': 1208, 'tfidf_word': 'EP: 552, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 550, 'parent': 1308, 'tfidf_word': 'EP: 550, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 555, 'parent': 1308, 'tfidf_word': 'EP: 555, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 588, 'parent': 1211, 'tfidf_word': 'EP: 588, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 589, 'parent': 1211, 'tfidf_word': 'EP: 589, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 587, 'parent': 1310, 'tfidf_word': 'EP: 587, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 592, 'parent': 1310, 'tfidf_word': 'EP: 592, Name: execute &rarr; reset &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 285, 'parent': 1183, 'tfidf_word': 'EP: 285, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 286, 'parent': 1183, 'tfidf_word': 'EP: 286, Name: main &rarr; finalize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 387, 'parent': 1187, 'tfidf_word': 'EP: 387, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 388, 'parent': 1187, 'tfidf_word': 'EP: 388, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; restore_file &rarr; remove &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 435, 'parent': 1202, 'tfidf_word': 'EP: 435, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 440, 'parent': 1202, 'tfidf_word': 'EP: 440, Name: __init__ &rarr; initialize &rarr; fetch_modules &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 422, 'parent': 1105, 'tfidf_word': 'EP: 422, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 423, 'parent': 1105, 'tfidf_word': 'EP: 423, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 421, 'parent': 1138, 'tfidf_word': 'EP: 421, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 426, 'parent': 1138, 'tfidf_word': 'EP: 426, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; patch &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 90, 'parent': 1005, 'tfidf_word': 'EP: 90, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_symbol', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1004, 'parent': 1005, 'tfidf_word': 'section append map match line get entry memory try resolve ', 'tfidf_method': 'resolve_symbol create_testing_environment main build parse_to_sections calculate_section_sizes create_build_info append get_memory_map_lines try_match_entry ', 'lda_word': ' resolve,build,create,section,string,', 'lda_method': ' resolve_symbol,main,resolve,create_build_info,resolve_string,', 'lsi_word': ' resolve,build,create,section,testing,', 'lsi_method': ' resolve_symbol,create_testing_environment,resolve_string,resolve,create_build_info,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Return the sizes of the main sections.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 83, 'parent': 1029, 'tfidf_word': 'EP: 83, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1028, 'parent': 1029, 'tfidf_word': 'size string symbol testing hoist join build create section resolve ', 'tfidf_method': 'resolve resolve_string resolve_symbol create_testing_environment main build calculate_section_sizes create_build_info join hoist_section ', 'lda_word': ' resolve,create,build,testing,info,', 'lda_method': ' resolve_symbol,build,join,resolve,resolve_string,', 'lsi_word': ' resolve,create,build,section,calculate,', 'lsi_method': ' build,main,create_testing_environment,resolve,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Load the resource infromation that all modules define. Public method to build the module by the given build_info object.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '86': 'hoist_section(lumpy.py)', '137': 'join(utils.py)'}}, {'key': 61, 'parent': 1080, 'tfidf_word': 'EP: 61, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 67, 'parent': 1080, 'tfidf_word': 'EP: 67, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; current_date', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 830, 'parent': 1019, 'tfidf_word': 'EP: 830, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; get_memory_map_lines', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1018, 'parent': 1019, 'tfidf_word': 'symbol read parse append entry match try section build resolve ', 'tfidf_method': 'resolve_string resolve_symbol read_config_file flash build parse_to_sections calculate_section_sizes create_build_info append try_match_entry ', 'lda_word': ' resolve,build,section,calculate,read,', 'lda_method': ' parse_to_sections,flash,calculate_section_sizes,resolve,build,', 'lsi_word': ' resolve,build,section,info,string,', 'lsi_method': ' parse_to_sections,resolve_string,resolve,calculate_section_sizes,resolve_symbol,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Recursively replace the symbols in the given string. Write binary size and commit information into a file.', 'files_count': 6, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builder.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 822, 'parent': 1059, 'tfidf_word': 'EP: 822, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; hoist_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 823, 'parent': 1059, 'tfidf_word': 'EP: 823, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 96, 'parent': 941, 'tfidf_word': 'EP: 96, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 97, 'parent': 941, 'tfidf_word': 'EP: 97, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 95, 'parent': 964, 'tfidf_word': 'EP: 95, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 100, 'parent': 964, 'tfidf_word': 'EP: 100, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 837, 'parent': 951, 'tfidf_word': 'EP: 837, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 838, 'parent': 951, 'tfidf_word': 'EP: 838, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 836, 'parent': 977, 'tfidf_word': 'EP: 836, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 841, 'parent': 977, 'tfidf_word': 'EP: 841, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; read_objects_from_libs &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 812, 'parent': 974, 'tfidf_word': 'EP: 812, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 813, 'parent': 974, 'tfidf_word': 'EP: 813, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 811, 'parent': 998, 'tfidf_word': 'EP: 811, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 816, 'parent': 998, 'tfidf_word': 'EP: 816, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 73, 'parent': 962, 'tfidf_word': 'EP: 73, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 961, 'parent': 962, 'tfidf_word': 'symbol last print main basename log create build info resolve ', 'tfidf_method': 'exec_shell execute last_commit_info print_command create_testing_environment main build create_build_info log basename ', 'lda_word': ' resolve,info,build,execute,create,', 'lda_method': ' resolve_string,create_testing_environment,exec_shell,print_command,last_commit_info,', 'lsi_word': ' resolve,info,create,build,command,', 'lsi_method': ' create_build_info,last_commit_info,resolve,main,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Execute the shell command. Helper function to print commands.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 69, 'parent': 1112, 'tfidf_word': 'EP: 69, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 984, 'parent': 1112, 'tfidf_word': 'shell string symbol testing fail get build create info resolve ', 'tfidf_method': 'resolve_symbol exec_shell execute last_commit_info create_testing_environment main build create_build_info fail get ', 'lda_word': ' resolve,create,build,info,environment,', 'lda_method': ' execute,resolve,main,last_commit_info,resolve_string,', 'lsi_word': ' resolve,info,create,build,commit,', 'lsi_method': ' build,create_build_info,last_commit_info,execute,main,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; last_commit_info(utils.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute the shell command. Load the resource infromation that all modules define. Execute the given test.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'console.py', 'coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '138': 'last_commit_info(utils.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '105': 'fail(console.py)', '64': 'get(coverage_client.py)'}}, {'key': 204, 'parent': 1128, 'tfidf_word': 'EP: 204, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; get_memory_map_lines', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1127, 'parent': 1128, 'tfidf_word': 'parse size testing append entry match try build create section ', 'tfidf_method': 'create_testing_environment main build parse_to_sections calculate_section_sizes create_build_info append try_match_entry ', 'lda_word': ' build,create,section,size,testing,', 'lda_method': ' calculate_section_sizes,main,create_testing_environment,build,parse_to_sections,', 'lsi_word': ' create,section,build,calculate,parse,', 'lsi_method': ' create_testing_environment,create_build_info,calculate_section_sizes,main,parse_to_sections,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Write binary size and commit information into a file. Return the sizes of the main sections.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 177, 'parent': 1343, 'tfidf_word': 'EP: 177, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 178, 'parent': 1343, 'tfidf_word': 'EP: 178, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; write_json_file &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 153, 'parent': 1010, 'tfidf_word': 'EP: 153, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 154, 'parent': 1010, 'tfidf_word': 'EP: 154, Name: main &rarr; create_testing_environment &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 640, 'parent': 1025, 'tfidf_word': 'EP: 640, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 641, 'parent': 1025, 'tfidf_word': 'EP: 641, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 19, 'parent': 1077, 'tfidf_word': 'EP: 19, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 20, 'parent': 1077, 'tfidf_word': 'EP: 20, Name: upload &rarr; get_environment &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 290, 'parent': 1047, 'tfidf_word': 'EP: 290, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 291, 'parent': 1047, 'tfidf_word': 'EP: 291, Name: main &rarr; finalize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 307, 'parent': 1050, 'tfidf_word': 'EP: 307, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 308, 'parent': 1050, 'tfidf_word': 'EP: 308, Name: main &rarr; finalize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 392, 'parent': 1053, 'tfidf_word': 'EP: 392, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 393, 'parent': 1053, 'tfidf_word': 'EP: 393, Name: __init__ &rarr; initialize &rarr; config_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 409, 'parent': 1056, 'tfidf_word': 'EP: 409, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 410, 'parent': 1056, 'tfidf_word': 'EP: 410, Name: __init__ &rarr; initialize &rarr; patch_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 107, 'parent': 929, 'tfidf_word': 'EP: 107, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 108, 'parent': 929, 'tfidf_word': 'EP: 108, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 848, 'parent': 935, 'tfidf_word': 'EP: 848, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 849, 'parent': 935, 'tfidf_word': 'EP: 849, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; read_modules &rarr; should_build &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 38, 'parent': 938, 'tfidf_word': 'EP: 38, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 39, 'parent': 938, 'tfidf_word': 'EP: 39, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 779, 'parent': 948, 'tfidf_word': 'EP: 779, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 780, 'parent': 948, 'tfidf_word': 'EP: 780, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; build_modules &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 244, 'parent': 933, 'tfidf_word': 'EP: 244, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 932, 'parent': 933, 'tfidf_word': 'create config command build f shell basename log read resolve ', 'tfidf_method': 'execute print_command read_config_file create_testing_environment main build read_modules get log basename ', 'lda_word': ' resolve,read,print,symbol,build,', 'lda_method': ' mount_fs_writable,resolve,create_testing_environment,read_modules,main,', 'lsi_word': ' resolve,read,exec,main,command,', 'lsi_method': ' print_command,resolve,read_modules,resolve_string,resolve_symbol,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; build(builder.py) &rarr; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_modules(builder.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol. Read JSON based configuration file.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'builder.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '81': 'build(builder.py)', '82': 'read_modules(builder.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 241, 'parent': 946, 'tfidf_word': 'EP: 241, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 246, 'parent': 946, 'tfidf_word': 'EP: 246, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 143, 'parent': 989, 'tfidf_word': 'EP: 143, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 988, 'parent': 989, 'tfidf_word': 'testing main mount print symbol shell string basename log resolve ', 'tfidf_method': 'resolve_string resolve_symbol exec_shell execute print_command create_testing_environment main get log basename ', 'lda_word': ' resolve,string,shell,testing,exec,', 'lda_method': ' resolve_symbol,main,create_testing_environment,print_command,get,', 'lsi_word': ' resolve,command,environment,get,print,', 'lsi_method': ' exec_shell,main,resolve_symbol,resolve_string,mount_fs_writable,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Resolve the given symbol. Execute the shell command. Helper function to print commands.', 'files_count': 6, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 140, 'parent': 1008, 'tfidf_word': 'EP: 140, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 145, 'parent': 1008, 'tfidf_word': 'EP: 145, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 881, 'parent': 1001, 'tfidf_word': 'EP: 881, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1000, 'parent': 1001, 'tfidf_word': 'file f execute exec config command flash log basename resolve ', 'tfidf_method': 'resolve_string resolve_symbol exec_shell execute print_command read_config_file flash get log basename ', 'lda_word': ' resolve,get,string,execute,read,', 'lda_method': ' exec_shell,flash,execute,resolve_symbol,resolve,', 'lsi_word': ' resolve,read,string,shell,writable,', 'lsi_method': ' get,mount_fs_writable,resolve_symbol,read_config_file,resolve_string,', 'spm_method': '  &#187; flash(flasher.py) &rarr; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; read_config_file(utils.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br> &#187; resolve_symbol(symbol_resolver.py) &rarr; get(builtins.py) &rarr; mount_fs_writable(builtins.py) &rarr; execute(utils.py) &rarr; exec_shell(utils.py) &rarr; print_command(utils.py) . <br>', 'text_summary': 'Recursively loop on the given node, and resolve all the. Recursively replace the symbols in the given string. Resolve the given symbol. Read JSON based configuration file.', 'files_count': 5, 'files': ['flasher.py', 'utils.py', 'symbol_resolver.py', 'builtins.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '145': 'read_config_file(utils.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '99': 'get(builtins.py)', '101': 'mount_fs_writable(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 878, 'parent': 1023, 'tfidf_word': 'EP: 878, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 883, 'parent': 1023, 'tfidf_word': 'EP: 883, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 333, 'parent': 1279, 'tfidf_word': 'EP: 333, Name: genromfs &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 346, 'parent': 1279, 'tfidf_word': 'EP: 346, Name: config_internet &rarr; execute &rarr; exec_builtin &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 912, 'parent': 1390, 'tfidf_word': 'EP: 912, Name: main &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1389, 'parent': 1390, 'tfidf_word': 'command exception exec open timeout main run ', 'tfidf_method': 'TimeoutException exec_command open run main ', 'lda_word': ' exec,timeout,exception,open,command,', 'lda_method': ' exec_command,timeoutexception,open,main,run,', 'lsi_word': ' timeout,exception,open,exec,command,', 'lsi_method': ' exec_command,open,timeoutexception,run,main,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 4, 'files': ['lumpy.py', 'serialcom.py', 'utils.py', 'twisted_server.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '161': 'run(twisted_server.py)'}}, {'key': 576, 'parent': 1398, 'tfidf_word': 'EP: 576, Name: execute &rarr; exec_command &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 577, 'parent': 1398, 'tfidf_word': 'EP: 577, Name: execute &rarr; exec_command &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 677, 'parent': 1407, 'tfidf_word': 'EP: 677, Name: iotjs_build_info &rarr; exec_command &rarr; print_command &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 678, 'parent': 1407, 'tfidf_word': 'EP: 678, Name: iotjs_build_info &rarr; exec_command &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 915, 'parent': 1525, 'tfidf_word': 'EP: 915, Name: main &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1524, 'parent': 1525, 'tfidf_word': 'fail open main run ', 'tfidf_method': 'fail open run main ', 'lda_word': ' fail,run,open,main,', 'lda_method': ' open,fail,main,run,', 'lsi_word': ' fail,open,main,run,', 'lsi_method': ' open,fail,run,main,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['lumpy.py', 'telnetcom.py', 'console.py', 'twisted_server.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '161': 'run(twisted_server.py)'}}, {'key': 501, 'parent': 1393, 'tfidf_word': 'EP: 501, Name: run &rarr; parse_coverage_info &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 540, 'parent': 1393, 'tfidf_word': 'EP: 540, Name: save &rarr; parse_coverage_info &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 449, 'parent': 1621, 'tfidf_word': 'EP: 449, Name: main &rarr; load_map_data &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1527, 'parent': 1621, 'tfidf_word': 'open read main run ', 'tfidf_method': 'open read_until run main main ', 'lda_word': ' read,open,main,run,', 'lda_method': ' read_until,open,main,run,', 'lsi_word': ' open,read,main,run,', 'lsi_method': ' open,read_until,main,run,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 4, 'files': ['coverage_client.py', 'sshcom.py', 'lumpy.py', 'twisted_server.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '88': 'main(lumpy.py)', '161': 'run(twisted_server.py)'}}, {'key': 898, 'parent': 1411, 'tfidf_word': 'EP: 898, Name: main &rarr; process_messages &rarr; _release_function &rarr; send_bytecode_cp &rarr; send_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 901, 'parent': 1411, 'tfidf_word': 'EP: 901, Name: main &rarr; process_messages &rarr; _parse_source &rarr; _release_function &rarr; send_bytecode_cp &rarr; send_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 905, 'parent': 1323, 'tfidf_word': 'EP: 905, Name: main &rarr; process_messages &rarr; _parse_source &rarr; __init__ &rarr; JerryBreakpoint', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 906, 'parent': 1323, 'tfidf_word': 'EP: 906, Name: main &rarr; process_messages &rarr; _parse_source &rarr; __init__ &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 907, 'parent': 1501, 'tfidf_word': 'EP: 907, Name: main &rarr; process_messages &rarr; _parse_source &rarr; insert &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1413, 'parent': 1501, 'tfidf_word': 'main parse process source message append function get jerry ', 'tfidf_method': 'main _parse_source process_messages append JerryFunction get_message ', 'lda_word': ' message,source,process,parse,main,', 'lda_method': ' parse_source,main,process_messages,jerryfunction,append,', 'lsi_word': ' message,parse,source,main,process,', 'lsi_method': ' parse_source,process_messages,main,jerryfunction,append,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 2, 'files': ['coverage_client.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '40': 'JerryFunction(coverage_client.py)', '54': 'get_message(coverage_client.py)', '177': 'append(testresult.py)'}}, {'key': 513, 'parent': 1427, 'tfidf_word': 'EP: 513, Name: run &rarr; run_testset &rarr; contains &rarr; _find_in_skiplist &rarr; _read_test_descriptor &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1353, 'parent': 1427, 'tfidf_word': 'file find json open skiplist test testset fail run read ', 'tfidf_method': 'read_json_file _find_in_skiplist _read_test_descriptor contains run run_testset fail open read_until open ', 'lda_word': ' run,read,contain,open,descriptor,', 'lda_method': ' read_json_file,run_testset,run,open,read_test_descriptor,', 'lsi_word': ' read,run,contain,open,json,', 'lsi_method': ' read_json_file,read_test_descriptor,run_testset,run,contain,', 'spm_method': '  &#187; run(testrunner.py) &rarr; run_testset(testrunner.py) &rarr; contains(skiplist.py) &rarr; _find_in_skiplist(skiplist.py) &rarr; _read_test_descriptor(skiplist.py) &rarr; read_json_file(utils.py) . <br>', 'text_summary': 'Skip tests by the skiplists. Main method to run IoT.js or JerryScript tests. Read the local skiplists.', 'files_count': 6, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '239': 'contains(skiplist.py)', '236': '_find_in_skiplist(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 511, 'parent': 1634, 'tfidf_word': 'EP: 511, Name: run &rarr; run_testset &rarr; report_skip &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1628, 'parent': 1634, 'tfidf_word': 'log report run testset timeout append exception fail pass ', 'tfidf_method': 'run run_testset log report_fail report_pass report_testset report_timeout TimeoutException append ', 'lda_word': ' run,testset,report,log,timeout,', 'lda_method': ' run_testset,run,log,timeoutexception,append,', 'lsi_word': ' run,testset,report,log,timeout,', 'lsi_method': ' run,run_testset,log,report_timeout,report_testset,', 'spm_method': ' ', 'text_summary': 'Run all the tests that are in the given testset.', 'files_count': 5, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '116': 'report_timeout(reporter.py)', '107': 'log(console.py)', '111': 'report_fail(reporter.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1606, 'parent': 1762, 'tfidf_word': 'environment execute login upload get ', 'tfidf_method': 'get_environment get upload execute login ', 'lda_word': ' get,upload,environment,execute,login,', 'lda_method': ' get,get_environment,upload,execute,login,', 'lsi_word': ' get,environment,execute,login,upload,', 'lsi_method': ' get,get_environment,execute,login,upload,', 'spm_method': ' ', 'text_summary': 'Get environment value.', 'files_count': 4, 'files': ['testresult.py', 'utils.py', 'coverage_client.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '64': 'get(coverage_client.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 1650, 'parent': 1762, 'tfidf_word': 'fail environment get execute flash login upload ', 'tfidf_method': 'fail get get_environment flash upload execute login ', 'lda_word': ' get,fail,environment,flash,upload,', 'lda_method': ' get,get_environment,fail,upload,flash,', 'lsi_word': ' get,fail,environment,execute,login,', 'lsi_method': ' fail,get,get_environment,execute,login,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['flasher.py', 'builtins.py', 'console.py', 'testresult.py', 'utils.py', 'artik053.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 1608, 'parent': 1766, 'tfidf_word': 'execute fail login ', 'tfidf_method': 'fail login execute login execute ', 'lda_word': ' fail,execute,login,', 'lda_method': ' fail,execute,login,', 'lsi_word': ' login,fail,execute,', 'lsi_method': ' login,fail,execute,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 4, 'files': ['stm32f4dis.py', 'serial_device.py', 'console.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '223': 'login(serial_device.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 1678, 'parent': 1766, 'tfidf_word': 'command exec fail read current data date exception send timeout ', 'tfidf_method': 'execute login exec_command fail exec_command TimeoutException current_date read_until send _read_data ', 'lda_word': ' command,read,exec,login,execute,', 'lda_method': ' execute,login,read_until,fail,current_date,', 'lsi_word': ' login,execute,exec,command,read,', 'lsi_method': ' execute,login,exec_command,fail,read_until,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Execute the given test.', 'files_count': 5, 'files': ['artik053.py', 'sshcom.py', 'utils.py', 'telnetcom.py', 'console.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)', '126': 'current_date(utils.py)'}}, {'key': 1644, 'parent': 1801, 'tfidf_word': 'logout execute close del ', 'tfidf_method': 'close logout close close execute __del__ execute ', 'lda_word': ' close,logout,execute,del,', 'lda_method': ' close,logout,del,execute,', 'lsi_word': ' close,logout,execute,del,', 'lsi_method': ' close,logout,execute,del,', 'spm_method': ' ', 'text_summary': 'Close the ssh port. Logout from the device.', 'files_count': 7, 'files': ['ssh_device.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py', 'stm32f4dis.py', 'artik053.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '232': 'execute(stm32f4dis.py)', '183': 'execute(artik053.py)'}}, {'key': 1742, 'parent': 1801, 'tfidf_word': 'close logout execute del ', 'tfidf_method': 'logout close close execute __del__ execute ', 'lda_word': ' close,logout,del,execute,', 'lda_method': ' execute,close,logout,del,', 'lsi_word': ' close,logout,execute,del,', 'lsi_method': ' logout,close,execute,del,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Logout from the device.', 'files_count': 6, 'files': ['ssh_device.py', 'device_base.py', 'serialcom.py', 'telnetcom.py', 'stm32f4dis.py', 'artik053.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '232': 'execute(stm32f4dis.py)', '183': 'execute(artik053.py)'}}, {'key': 1531, 'parent': 1827, 'tfidf_word': 'try section append entry fill get line map memory symbol ', 'tfidf_method': 'main parse_to_sections append get_memory_map_lines try_match_entry try_match_fill try_match_section try_match_symbol ', 'lda_word': ' main,section,parse,get,line,', 'lda_method': ' parse_to_sections,main,get_memory_map_lines,try_match_section,append,', 'lsi_word': ' section,parse,main,match,try,', 'lsi_method': ' parse_to_sections,main,try_match_fill,try_match_entry,append,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 2, 'files': ['lumpy.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1825, 'parent': 1827, 'tfidf_word': 'hoist executable info exist init remove send read environment device ', 'tfidf_method': 'readline current_date basename report_final execute parse_arguments report_coverage create_device Skiplist define_environment ', 'lda_word': ' device,exist,upload,join,file,', 'lda_method': ' execute,exec_command,timeoutexception,init,read_until,', 'lsi_word': ' init,read,fail,check,args,', 'lsi_method': ' init,fail,check_args,main,open,', 'spm_method': ' ', 'text_summary': 'Create a device object for testing. Run IoT.js Join one or more path components intelligently. Remove the given file. Run IoT.js Save data to the member variable. Execute the given test. Run IoT.js Return the absolute path. Run IoT.js Process the Freya log file to get the peak memory usage. Check whether the file is executable. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given command. Return a relative filepath to path from the start directory. Run IoT.js Execute the given test. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Read all the tests from the given folder and create a. Create a final JSON result file from the build and test information. Write a JSON file from the given data. Print a message with the given color.', 'files_count': 28, 'files': ['tester.py', 'utils.py', 'testresult.py', 'artik053.py', 'ssh_device.py', 'testrunner.py', 'builtins.py', 'console.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'device_base.py', 'rpi2.py', 'rpi3.py', 'sshcom.py', 'coverage_client.py', 'skiplist.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py'], 'execution_path_count': 149, 'function_id_to_name_file': {'258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '137': 'join(utils.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '177': 'append(testresult.py)', '255': 'execute(tester.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '126': 'current_date(utils.py)', '107': 'log(console.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 363, 'parent': 1290, 'tfidf_word': 'EP: 363, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 364, 'parent': 1290, 'tfidf_word': 'EP: 364, Name: init_freya_config &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 338, 'parent': 1282, 'tfidf_word': 'EP: 338, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1281, 'parent': 1282, 'tfidf_word': 'command exec execute genromfs print shell basename log ', 'tfidf_method': 'exec_shell execute print_command genromfs log basename ', 'lda_word': ' genromfs,execute,exec,shell,command,', 'lda_method': ' exec_shell,print_command,execute,genromfs,basename,', 'lsi_word': ' print,genromfs,execute,exec,shell,', 'lsi_method': ' execute,genromfs,print_command,exec_shell,log,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 351, 'parent': 1286, 'tfidf_word': 'EP: 351, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1285, 'parent': 1286, 'tfidf_word': 'command config exec execute internet print shell basename log ', 'tfidf_method': 'exec_shell execute print_command config_internet log basename ', 'lda_word': ' config,shell,command,execute,exec,', 'lda_method': ' execute,config_internet,exec_shell,print_command,basename,', 'lsi_word': ' command,print,shell,internet,config,', 'lsi_method': ' execute,exec_shell,print_command,config_internet,basename,', 'spm_method': ' ', 'text_summary': 'Execute the shell command. Execute the given test.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'97': 'config_internet(builtins.py)', '131': 'execute(utils.py)', '130': 'exec_shell(utils.py)', '144': 'print_command(utils.py)', '107': 'log(console.py)', '124': 'basename(utils.py)'}}, {'key': 89, 'parent': 1004, 'tfidf_word': 'EP: 89, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; get_memory_map_lines', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1003, 'parent': 1004, 'tfidf_word': 'testing parse append match entry try section create build resolve ', 'tfidf_method': 'resolve_string resolve_symbol create_testing_environment main build parse_to_sections calculate_section_sizes create_build_info append try_match_entry ', 'lda_word': ' section,resolve,create,build,match,', 'lda_method': ' calculate_section_sizes,create_build_info,resolve,build,create_testing_environment,', 'lsi_word': ' resolve,create,section,build,environment,', 'lsi_method': ' build,resolve_string,resolve,resolve_symbol,parse_to_sections,', 'spm_method': '  &#187; main(__main__.py) &rarr; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; create_testing_environment(__init__.py) &rarr; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve(symbol_resolver.py) &rarr; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br> &#187; resolve_string(symbol_resolver.py) &rarr; resolve_symbol(symbol_resolver.py) &rarr; build(builder.py) &rarr; create_build_info(utils.py) &rarr; calculate_section_sizes(utils.py) &rarr; parse_to_sections(lumpy.py) . <br>', 'text_summary': 'Resolve the given symbol. Write binary size and commit information into a file. Return the sizes of the main sections.', 'files_count': 7, 'files': ['__main__.py', '__init__.py', 'symbol_resolver.py', 'builder.py', 'utils.py', 'lumpy.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '67': 'create_testing_environment(__init__.py)', '117': 'resolve(symbol_resolver.py)', '120': 'resolve_string(symbol_resolver.py)', '121': 'resolve_symbol(symbol_resolver.py)', '81': 'build(builder.py)', '95': 'create_build_info(utils.py)', '94': 'calculate_section_sizes(utils.py)', '89': 'parse_to_sections(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 81, 'parent': 1028, 'tfidf_word': 'EP: 81, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; hoist_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 82, 'parent': 1028, 'tfidf_word': 'EP: 82, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 828, 'parent': 1018, 'tfidf_word': 'EP: 828, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_entry', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 829, 'parent': 1018, 'tfidf_word': 'EP: 829, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 71, 'parent': 961, 'tfidf_word': 'EP: 71, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 72, 'parent': 961, 'tfidf_word': 'EP: 72, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 70, 'parent': 984, 'tfidf_word': 'EP: 70, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 75, 'parent': 984, 'tfidf_word': 'EP: 75, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; last_commit_info &rarr; execute &rarr; exec_shell &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 202, 'parent': 1127, 'tfidf_word': 'EP: 202, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_entry', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 203, 'parent': 1127, 'tfidf_word': 'EP: 203, Name: main &rarr; create_testing_environment &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 242, 'parent': 932, 'tfidf_word': 'EP: 242, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 243, 'parent': 932, 'tfidf_word': 'EP: 243, Name: main &rarr; create_testing_environment &rarr; build &rarr; read_modules &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 141, 'parent': 988, 'tfidf_word': 'EP: 141, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 142, 'parent': 988, 'tfidf_word': 'EP: 142, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 879, 'parent': 1000, 'tfidf_word': 'EP: 879, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 880, 'parent': 1000, 'tfidf_word': 'EP: 880, Name: flash &rarr; read_config_file &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; get &rarr; mount_fs_writable &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 456, 'parent': 1389, 'tfidf_word': 'EP: 456, Name: main &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 467, 'parent': 1389, 'tfidf_word': 'EP: 467, Name: run &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 458, 'parent': 1524, 'tfidf_word': 'EP: 458, Name: main &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 469, 'parent': 1524, 'tfidf_word': 'EP: 469, Name: run &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 914, 'parent': 1527, 'tfidf_word': 'EP: 914, Name: main &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1526, 'parent': 1527, 'tfidf_word': 'open read main run ', 'tfidf_method': 'open read_until run main ', 'lda_word': ' read,open,run,main,', 'lda_method': ' open,read_until,run,main,', 'lsi_word': ' open,read,main,run,', 'lsi_method': ' open,read_until,run,main,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern.', 'files_count': 3, 'files': ['lumpy.py', 'sshcom.py', 'twisted_server.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '161': 'run(twisted_server.py)'}}, {'key': 904, 'parent': 1413, 'tfidf_word': 'EP: 904, Name: main &rarr; process_messages &rarr; _parse_source &rarr; JerryFunction', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1412, 'parent': 1413, 'tfidf_word': 'main parse process source append get message ', 'tfidf_method': 'main _parse_source process_messages append get_message ', 'lda_word': ' message,process,main,parse,source,', 'lda_method': ' main,parse_source,append,process_messages,get_message,', 'lsi_word': ' message,source,parse,main,process,', 'lsi_method': ' parse_source,process_messages,main,append,get_message,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 2, 'files': ['coverage_client.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '55': 'process_messages(coverage_client.py)', '50': '_parse_source(coverage_client.py)', '54': 'get_message(coverage_client.py)', '177': 'append(testresult.py)'}}, {'key': 514, 'parent': 1353, 'tfidf_word': 'EP: 514, Name: run &rarr; run_testset &rarr; contains &rarr; _find_in_skiplist &rarr; _read_test_descriptor &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 515, 'parent': 1353, 'tfidf_word': 'EP: 515, Name: run &rarr; run_testset &rarr; contains &rarr; _find_in_skiplist &rarr; _read_test_descriptor &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 510, 'parent': 1628, 'tfidf_word': 'EP: 510, Name: run &rarr; run_testset &rarr; report_timeout &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1626, 'parent': 1628, 'tfidf_word': 'log report run testset append exception fail pass timeout ', 'tfidf_method': 'run run_testset log report_fail report_pass report_testset TimeoutException append ', 'lda_word': ' run,testset,timeout,exception,log,', 'lda_method': ' run,run_testset,log,append,timeoutexception,', 'lsi_word': ' run,testset,report,log,fail,', 'lsi_method': ' run_testset,run,log,report_fail,report_testset,', 'spm_method': ' ', 'text_summary': 'Run all the tests that are in the given testset.', 'files_count': 5, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'testresult.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '111': 'report_fail(reporter.py)', '107': 'log(console.py)', '113': 'report_pass(reporter.py)', '115': 'report_testset(reporter.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 28, 'parent': 1606, 'tfidf_word': 'EP: 28, Name: upload &rarr; get_environment &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 649, 'parent': 1606, 'tfidf_word': 'EP: 649, Name: execute &rarr; login &rarr; get_environment &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 747, 'parent': 1650, 'tfidf_word': 'EP: 747, Name: flash &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1475, 'parent': 1650, 'tfidf_word': 'environment fail execute login upload get ', 'tfidf_method': 'fail get_environment get upload execute login ', 'lda_word': ' get,fail,upload,environment,login,', 'lda_method': ' login,fail,get_environment,get,execute,', 'lsi_word': ' get,fail,environment,login,execute,', 'lsi_method': ' get,get_environment,fail,login,execute,', 'spm_method': ' ', 'text_summary': 'Upload the results of the testrunner to the Firebase database. Execute the given test.', 'files_count': 5, 'files': ['testresult.py', 'utils.py', 'builtins.py', 'console.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '135': 'get_environment(utils.py)', '99': 'get(builtins.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '184': 'login(artik053.py)'}}, {'key': 572, 'parent': 1608, 'tfidf_word': 'EP: 572, Name: execute &rarr; login &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 635, 'parent': 1608, 'tfidf_word': 'EP: 635, Name: execute &rarr; login &rarr; login &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1405, 'parent': 1678, 'tfidf_word': 'command exec execute login exception read send timeout ', 'tfidf_method': 'execute login exec_command TimeoutException read_until send ', 'lda_word': ' login,execute,command,exec,send,', 'lda_method': ' login,exec_command,execute,read_until,timeoutexception,', 'lsi_word': ' command,login,execute,exec,timeout,', 'lsi_method': ' exec_command,execute,login,send,timeoutexception,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Execute the given command.', 'files_count': 3, 'files': ['artik053.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1653, 'parent': 1678, 'tfidf_word': 'execute login command exec fail current data date read ', 'tfidf_method': 'execute login fail exec_command current_date _read_data ', 'lda_word': ' login,execute,current,date,fail,', 'lda_method': ' login,execute,fail,exec_command,current_date,', 'lsi_word': ' execute,login,command,exec,fail,', 'lsi_method': ' execute,login,exec_command,fail,read_data,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['artik053.py', 'telnetcom.py', 'console.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)', '126': 'current_date(utils.py)'}}, {'key': 1409, 'parent': 1644, 'tfidf_word': 'del logout close ', 'tfidf_method': 'close logout __del__ close close ', 'lda_word': ' close,del,logout,', 'lda_method': ' close,del,logout,', 'lsi_word': ' close,del,logout,', 'lsi_method': ' close,del,logout,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['ssh_device.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)'}}, {'key': 1643, 'parent': 1644, 'tfidf_word': 'execute logout close ', 'tfidf_method': 'close logout execute close close execute ', 'lda_word': ' close,execute,logout,', 'lda_method': ' close,execute,logout,', 'lsi_word': ' close,execute,logout,', 'lsi_method': ' close,execute,logout,', 'spm_method': ' ', 'text_summary': 'Close the ssh port.', 'files_count': 6, 'files': ['stm32f4dis.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py', 'artik053.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '183': 'execute(artik053.py)'}}, {'key': 1557, 'parent': 1742, 'tfidf_word': 'close del logout ', 'tfidf_method': 'logout __del__ close close ', 'lda_word': ' logout,close,del,', 'lda_method': ' del,logout,close,', 'lsi_word': ' del,logout,close,', 'lsi_method': ' close,del,logout,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['ssh_device.py', 'device_base.py', 'serialcom.py', 'telnetcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'226': '__del__(ssh_device.py)', '214': 'logout(device_base.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)'}}, {'key': 1741, 'parent': 1742, 'tfidf_word': 'close execute logout ', 'tfidf_method': 'logout execute close close execute ', 'lda_word': ' close,logout,execute,', 'lda_method': ' logout,execute,close,', 'lsi_word': ' execute,logout,close,', 'lsi_method': ' execute,logout,close,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 5, 'files': ['stm32f4dis.py', 'device_base.py', 'serialcom.py', 'telnetcom.py', 'artik053.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '214': 'logout(device_base.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)', '183': 'execute(artik053.py)'}}, {'key': 1515, 'parent': 1531, 'tfidf_word': 'main match parse try fill section ', 'tfidf_method': 'main parse_to_sections try_match_fill try_match_section ', 'lda_word': ' section,parse,main,try,match,', 'lda_method': ' parse_to_sections,main,try_match_fill,try_match_section,', 'lsi_word': ' section,try,main,match,parse,', 'lsi_method': ' parse_to_sections,main,try_match_section,try_match_fill,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['lumpy.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '91': 'try_match_fill(lumpy.py)', '92': 'try_match_section(lumpy.py)'}}, {'key': 1530, 'parent': 1531, 'tfidf_word': 'section match try append entry get line map memory symbol ', 'tfidf_method': 'main parse_to_sections append get_memory_map_lines try_match_entry try_match_symbol ', 'lda_word': ' main,parse,section,try,match,', 'lda_method': ' main,parse_to_sections,append,try_match_symbol,get_memory_map_lines,', 'lsi_word': ' main,parse,section,match,try,', 'lsi_method': ' main,parse_to_sections,get_memory_map_lines,try_match_entry,try_match_symbol,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 2, 'files': ['lumpy.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '93': 'try_match_symbol(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1659, 'parent': 1825, 'tfidf_word': 'main run freya join output process abspath append execute readable ', 'tfidf_method': 'main run_iotjs join process_freya_output abspath append execute is_readable ', 'lda_word': ' run,iotjs,main,join,process,', 'lda_method': ' run_iotjs,main,join,abspath,process_freya_output,', 'lsi_word': ' iotjs,run,main,process,freya,', 'lsi_method': ' run_iotjs,main,process_freya_output,join,is_readable,', 'spm_method': ' ', 'text_summary': 'Run IoT.js Process the Freya log file to get the peak memory usage. Run IoT.js Join one or more path components intelligently.', 'files_count': 3, 'files': ['tester.py', 'utils.py', 'testresult.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '137': 'join(utils.py)', '257': 'is_readable(tester.py)', '123': 'abspath(utils.py)', '177': 'append(testresult.py)', '255': 'execute(tester.py)'}}, {'key': 1823, 'parent': 1825, 'tfidf_word': 'recursive relpath info exist init remove send read environment device ', 'tfidf_method': 'relpath is_broken_symlink putc current_date basename report_final report_coverage execute close_pseudo_terminal define_environment ', 'lda_word': ' read,info,file,upload,command,', 'lda_method': ' init,join,execute,run,remotedevice,', 'lsi_word': ' init,read,fail,check,args,', 'lsi_method': ' init,fail,check_args,open,main,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Create a final JSON result file from the build and test information. Test whether a path exists. Read all the tests into dictionary. Check whether the file is executable. Write a JSON file from the given data. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Execute the given test. Print a message with the given color.', 'files_count': 28, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'testrunner.py', 'builtins.py', 'testresult.py', 'console.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'device_base.py', 'rpi2.py', 'rpi3.py', 'sshcom.py', 'coverage_client.py', 'skiplist.py', 'tester.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py'], 'execution_path_count': 143, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)', '179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '126': 'current_date(utils.py)', '137': 'join(utils.py)', '107': 'log(console.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '123': 'abspath(utils.py)', '245': 'save(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 336, 'parent': 1281, 'tfidf_word': 'EP: 336, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 337, 'parent': 1281, 'tfidf_word': 'EP: 337, Name: genromfs &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 349, 'parent': 1285, 'tfidf_word': 'EP: 349, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 350, 'parent': 1285, 'tfidf_word': 'EP: 350, Name: config_internet &rarr; execute &rarr; exec_shell &rarr; print_command &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 87, 'parent': 1003, 'tfidf_word': 'EP: 87, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; try_match_entry', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 88, 'parent': 1003, 'tfidf_word': 'EP: 88, Name: main &rarr; create_testing_environment &rarr; resolve &rarr; resolve_string &rarr; resolve_symbol &rarr; build &rarr; create_build_info &rarr; calculate_section_sizes &rarr; parse_to_sections &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 457, 'parent': 1526, 'tfidf_word': 'EP: 457, Name: main &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 468, 'parent': 1526, 'tfidf_word': 'EP: 468, Name: run &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 902, 'parent': 1412, 'tfidf_word': 'EP: 902, Name: main &rarr; process_messages &rarr; _parse_source &rarr; get_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 903, 'parent': 1412, 'tfidf_word': 'EP: 903, Name: main &rarr; process_messages &rarr; _parse_source &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 509, 'parent': 1626, 'tfidf_word': 'EP: 509, Name: run &rarr; run_testset &rarr; report_fail &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1623, 'parent': 1626, 'tfidf_word': 'log report run testset append exception pass timeout ', 'tfidf_method': 'run run_testset log report_pass report_testset TimeoutException append ', 'lda_word': ' run,report,pass,log,testset,', 'lda_method': ' run,run_testset,timeoutexception,log,append,', 'lsi_word': ' run,testset,log,report,pass,', 'lsi_method': ' run,run_testset,log,report_testset,report_pass,', 'spm_method': ' ', 'text_summary': 'Run all the tests that are in the given testset. Main method to run IoT.js or JerryScript tests.', 'files_count': 5, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '113': 'report_pass(reporter.py)', '107': 'log(console.py)', '115': 'report_testset(reporter.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 17, 'parent': 1475, 'tfidf_word': 'EP: 17, Name: upload &rarr; get_environment &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 638, 'parent': 1475, 'tfidf_word': 'EP: 638, Name: execute &rarr; login &rarr; get_environment &rarr; get &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 652, 'parent': 1405, 'tfidf_word': 'EP: 652, Name: execute &rarr; login &rarr; exec_command &rarr; send', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1404, 'parent': 1405, 'tfidf_word': 'command exec execute login exception read timeout ', 'tfidf_method': 'execute login exec_command TimeoutException read_until ', 'lda_word': ' login,execute,exception,exec,timeout,', 'lda_method': ' execute,login,exec_command,read_until,timeoutexception,', 'lsi_word': ' login,execute,command,exec,exception,', 'lsi_method': ' execute,login,exec_command,timeoutexception,read_until,', 'spm_method': ' ', 'text_summary': 'Login to the device. Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '198': 'exec_command(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1403, 'parent': 1653, 'tfidf_word': 'command exec execute login data fail read ', 'tfidf_method': 'execute login exec_command fail _read_data ', 'lda_word': ' exec,command,execute,login,fail,', 'lda_method': ' login,execute,exec_command,fail,read_data,', 'lsi_word': ' login,execute,command,exec,read,', 'lsi_method': ' exec_command,execute,login,read_data,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'telnetcom.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)'}}, {'key': 1552, 'parent': 1653, 'tfidf_word': 'execute login current date fail ', 'tfidf_method': 'execute login fail current_date ', 'lda_word': ' login,execute,fail,date,current,', 'lda_method': ' login,execute,fail,current_date,', 'lsi_word': ' execute,login,current,date,fail,', 'lsi_method': ' execute,login,fail,current_date,', 'spm_method': ' ', 'text_summary': 'Login to the device. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 3, 'files': ['artik053.py', 'console.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '184': 'login(artik053.py)', '105': 'fail(console.py)', '126': 'current_date(utils.py)'}}, {'key': 681, 'parent': 1409, 'tfidf_word': 'EP: 681, Name: __del__ &rarr; logout &rarr; close &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 682, 'parent': 1409, 'tfidf_word': 'EP: 682, Name: __del__ &rarr; logout &rarr; close &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1395, 'parent': 1643, 'tfidf_word': 'execute logout close ', 'tfidf_method': 'close logout execute close close ', 'lda_word': ' close,logout,execute,', 'lda_method': ' close,execute,logout,', 'lsi_word': ' close,execute,logout,', 'lsi_method': ' close,execute,logout,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Logout from the device.', 'files_count': 5, 'files': ['stm32f4dis.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)'}}, {'key': 1400, 'parent': 1643, 'tfidf_word': 'execute logout close ', 'tfidf_method': 'execute close logout close close ', 'lda_word': ' logout,close,execute,', 'lda_method': ' close,logout,execute,', 'lsi_word': ' close,execute,logout,', 'lsi_method': ' close,execute,logout,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 5, 'files': ['artik053.py', 'device_base.py', 'sshcom.py', 'serialcom.py', 'telnetcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '214': 'logout(device_base.py)', '197': 'close(sshcom.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)'}}, {'key': 680, 'parent': 1557, 'tfidf_word': 'EP: 680, Name: __del__ &rarr; logout &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 683, 'parent': 1557, 'tfidf_word': 'EP: 683, Name: __del__ &rarr; logout &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1543, 'parent': 1741, 'tfidf_word': 'close execute logout ', 'tfidf_method': 'logout execute close close ', 'lda_word': ' logout,close,execute,', 'lda_method': ' logout,execute,close,', 'lsi_word': ' close,execute,logout,', 'lsi_method': ' execute,logout,close,', 'spm_method': ' ', 'text_summary': 'Logout from the device.', 'files_count': 4, 'files': ['stm32f4dis.py', 'device_base.py', 'serialcom.py', 'telnetcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '214': 'logout(device_base.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)'}}, {'key': 1550, 'parent': 1741, 'tfidf_word': 'close execute logout ', 'tfidf_method': 'execute logout close close ', 'lda_word': ' logout,close,execute,', 'lda_method': ' logout,execute,close,', 'lsi_word': ' close,execute,logout,', 'lsi_method': ' execute,logout,close,', 'spm_method': ' ', 'text_summary': 'Close the ssh port.', 'files_count': 4, 'files': ['artik053.py', 'device_base.py', 'serialcom.py', 'telnetcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '214': 'logout(device_base.py)', '188': 'close(serialcom.py)', '206': 'close(telnetcom.py)'}}, {'key': 454, 'parent': 1515, 'tfidf_word': 'EP: 454, Name: main &rarr; parse_to_sections &rarr; try_match_fill', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 455, 'parent': 1515, 'tfidf_word': 'EP: 455, Name: main &rarr; parse_to_sections &rarr; try_match_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 453, 'parent': 1530, 'tfidf_word': 'EP: 453, Name: main &rarr; parse_to_sections &rarr; try_match_symbol', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1529, 'parent': 1530, 'tfidf_word': 'parse section append entry get line map match memory try ', 'tfidf_method': 'main parse_to_sections append get_memory_map_lines try_match_entry ', 'lda_word': ' section,parse,main,append,match,', 'lda_method': ' parse_to_sections,main,append,get_memory_map_lines,try_match_entry,', 'lsi_word': ' section,parse,main,get,line,', 'lsi_method': ' parse_to_sections,main,get_memory_map_lines,try_match_entry,append,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 2, 'files': ['lumpy.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '85': 'get_memory_map_lines(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 1410, 'parent': 1659, 'tfidf_word': 'freya iotjs main output process run join readable ', 'tfidf_method': 'main process_freya_output run_iotjs join is_readable ', 'lda_word': ' run,process,iotjs,readable,freya,', 'lda_method': ' process_freya_output,main,run_iotjs,join,is_readable,', 'lsi_word': ' main,process,run,freya,output,', 'lsi_method': ' main,process_freya_output,run_iotjs,join,is_readable,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['tester.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '260': 'process_freya_output(tester.py)', '137': 'join(utils.py)', '257': 'is_readable(tester.py)'}}, {'key': 1565, 'parent': 1659, 'tfidf_word': 'iotjs main run abspath append execute join ', 'tfidf_method': 'main run_iotjs abspath join append execute ', 'lda_word': ' iotjs,run,main,join,abspath,', 'lda_method': ' run_iotjs,main,abspath,execute,join,', 'lsi_word': ' main,run,iotjs,execute,abspath,', 'lsi_method': ' main,run_iotjs,execute,abspath,join,', 'spm_method': ' ', 'text_summary': 'Run IoT.js Execute the given test.', 'files_count': 3, 'files': ['tester.py', 'utils.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '123': 'abspath(utils.py)', '177': 'append(testresult.py)', '255': 'execute(tester.py)', '137': 'join(utils.py)'}}, {'key': 1660, 'parent': 1823, 'tfidf_word': 'merge execute config coverage init run script freya genromfs internet ', 'tfidf_method': 'execute merge_dicts run_coverage_script init_freya_config execute execute __init__ config_internet genromfs ', 'lda_word': ' execute,dicts,merge,run,script,', 'lda_method': ' merge_dicts,execute,genromfs,run_coverage_script,init_freya_config,', 'lsi_word': ' execute,dicts,merge,script,run,', 'lsi_method': ' execute,merge_dicts,run_coverage_script,genromfs,config_internet,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'testrunner.py', 'builtins.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)', '242': '__init__(testrunner.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1822, 'parent': 1823, 'tfidf_word': 'readable pi2 info exist init remove send read environment device ', 'tfidf_method': 'close_pseudo_terminal _listener rmtree relpath is_broken_symlink define_environment current_date parse_arguments Skiplist init_freya_config ', 'lda_word': ' run,join,coverage,execute,script,', 'lda_method': ' upload,create_result,exist,dirname,write_json_file,', 'lsi_word': ' init,read,fail,check,args,', 'lsi_method': ' init,fail,check_args,open,main,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Parse and create coverage information. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Create a final JSON result file from the build and test information. Test whether a path exists. Execute the given command. Execute the given test. Check whether the file is executable. Write a JSON file from the given data. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Checking resources before testing. Print a message with the given color.', 'files_count': 28, 'files': ['testresult.py', 'utils.py', 'console.py', 'artik053.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'device_base.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'sshcom.py', 'coverage_client.py', 'testrunner.py', 'skiplist.py', 'tester.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 137, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '126': 'current_date(utils.py)', '137': 'join(utils.py)', '107': 'log(console.py)', '182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '229': 'execute(ssh_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '123': 'abspath(utils.py)', '245': 'save(testrunner.py)', '242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 508, 'parent': 1623, 'tfidf_word': 'EP: 508, Name: run &rarr; run_testset &rarr; report_pass &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1615, 'parent': 1623, 'tfidf_word': 'run testset append exception log report timeout ', 'tfidf_method': 'run run_testset log report_testset TimeoutException append ', 'lda_word': ' run,testset,exception,append,report,', 'lda_method': ' run,run_testset,timeoutexception,report_testset,append,', 'lsi_word': ' run,testset,report,log,timeout,', 'lsi_method': ' run_testset,run,report_testset,log,append,', 'spm_method': ' ', 'text_summary': 'Run all the tests that are in the given testset. Print a message with the given color.', 'files_count': 5, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '115': 'report_testset(reporter.py)', '107': 'log(console.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 650, 'parent': 1404, 'tfidf_word': 'EP: 650, Name: execute &rarr; login &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 651, 'parent': 1404, 'tfidf_word': 'EP: 651, Name: execute &rarr; login &rarr; exec_command &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 630, 'parent': 1403, 'tfidf_word': 'EP: 630, Name: execute &rarr; login &rarr; exec_command &rarr; _read_data', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 631, 'parent': 1403, 'tfidf_word': 'EP: 631, Name: execute &rarr; login &rarr; exec_command &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 636, 'parent': 1552, 'tfidf_word': 'EP: 636, Name: execute &rarr; login &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 637, 'parent': 1552, 'tfidf_word': 'EP: 637, Name: execute &rarr; login &rarr; current_date', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 563, 'parent': 1395, 'tfidf_word': 'EP: 563, Name: execute &rarr; logout &rarr; close &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 564, 'parent': 1395, 'tfidf_word': 'EP: 564, Name: execute &rarr; logout &rarr; close &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 598, 'parent': 1400, 'tfidf_word': 'EP: 598, Name: execute &rarr; logout &rarr; close &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 599, 'parent': 1400, 'tfidf_word': 'EP: 599, Name: execute &rarr; logout &rarr; close &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 562, 'parent': 1543, 'tfidf_word': 'EP: 562, Name: execute &rarr; logout &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 565, 'parent': 1543, 'tfidf_word': 'EP: 565, Name: execute &rarr; logout &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 597, 'parent': 1550, 'tfidf_word': 'EP: 597, Name: execute &rarr; logout &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 600, 'parent': 1550, 'tfidf_word': 'EP: 600, Name: execute &rarr; logout &rarr; close', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 452, 'parent': 1529, 'tfidf_word': 'EP: 452, Name: main &rarr; parse_to_sections &rarr; get_memory_map_lines', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1528, 'parent': 1529, 'tfidf_word': 'main parse section append entry match try ', 'tfidf_method': 'main parse_to_sections append try_match_entry ', 'lda_word': ' section,parse,main,append,try,', 'lda_method': ' main,try_match_entry,parse_to_sections,append,', 'lsi_word': ' main,parse,section,entry,try,', 'lsi_method': ' main,parse_to_sections,try_match_entry,append,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 2, 'files': ['lumpy.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '89': 'parse_to_sections(lumpy.py)', '90': 'try_match_entry(lumpy.py)', '177': 'append(testresult.py)'}}, {'key': 734, 'parent': 1410, 'tfidf_word': 'EP: 734, Name: main &rarr; run_iotjs &rarr; process_freya_output &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 735, 'parent': 1410, 'tfidf_word': 'EP: 735, Name: main &rarr; run_iotjs &rarr; process_freya_output &rarr; is_readable', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 737, 'parent': 1565, 'tfidf_word': 'EP: 737, Name: main &rarr; run_iotjs &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1564, 'parent': 1565, 'tfidf_word': 'iotjs main run append execute join ', 'tfidf_method': 'main run_iotjs join append execute ', 'lda_word': ' iotjs,main,run,append,execute,', 'lda_method': ' run_iotjs,main,append,join,execute,', 'lsi_word': ' main,iotjs,run,join,execute,', 'lsi_method': ' main,run_iotjs,join,execute,append,', 'spm_method': ' ', 'text_summary': 'Run IoT.js Execute the given test.', 'files_count': 3, 'files': ['tester.py', 'testresult.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '177': 'append(testresult.py)', '255': 'execute(tester.py)', '137': 'join(utils.py)'}}, {'key': 1402, 'parent': 1660, 'tfidf_word': 'coverage dicts merge run script execute ', 'tfidf_method': 'execute merge_dicts run_coverage_script execute execute ', 'lda_word': ' execute,dicts,merge,coverage,script,', 'lda_method': ' execute,merge_dicts,run_coverage_script,', 'lsi_word': ' execute,dicts,merge,run,script,', 'lsi_method': ' execute,merge_dicts,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1535, 'parent': 1660, 'tfidf_word': 'dicts execute merge config init freya genromfs internet ', 'tfidf_method': 'execute merge_dicts init_freya_config __init__ config_internet genromfs ', 'lda_word': ' dicts,merge,init,execute,config,', 'lda_method': ' merge_dicts,execute,init_freya_config,config_internet,genromfs,', 'lsi_word': ' execute,merge,dicts,config,init,', 'lsi_method': ' execute,merge_dicts,init,init_freya_config,genromfs,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'builtins.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '100': 'init_freya_config(builtins.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1668, 'parent': 1822, 'tfidf_word': 'exist file json write current date dirname join log mkdir ', 'tfidf_method': 'create_result upload exists write_json_file log current_date dirname join mkdir ', 'lda_word': ' upload,create,result,log,write,', 'lda_method': ' upload,create_result,write_json_file,mkdir,dirname,', 'lsi_word': ' result,upload,create,file,write,', 'lsi_method': ' upload,create_result,write_json_file,exist,mkdir,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data.', 'files_count': 3, 'files': ['testresult.py', 'utils.py', 'console.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)', '126': 'current_date(utils.py)', '137': 'join(utils.py)', '107': 'log(console.py)'}}, {'key': 1820, 'parent': 1822, 'tfidf_word': 'create pi3 info exist init remove read send environment device ', 'tfidf_method': 'close_pseudo_terminal _listener rmtree relpath is_broken_symlink define_environment parse_arguments basename Skiplist init_freya_config ', 'lda_word': ' execute,read,command,run,coverage,', 'lda_method': ' execute,exec_command,fail,read_until,timeoutexception,', 'lsi_word': ' init,read,fail,check,args,', 'lsi_method': ' init,fail,check_args,open,main,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Test whether a path exists. Execute the given test. Check whether the file is executable. Write a JSON file from the given data. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Send data to the serial port. Check all python files in the given directory recursively. Parse the given arguments. Checking resources before testing. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 28, 'files': ['artik053.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'utils.py', 'device_base.py', 'console.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'sshcom.py', 'coverage_client.py', 'testrunner.py', 'skiplist.py', 'testresult.py', 'tester.py', '__init__.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 131, 'function_id_to_name_file': {'182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '229': 'execute(ssh_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)', '242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 507, 'parent': 1615, 'tfidf_word': 'EP: 507, Name: run &rarr; run_testset &rarr; report_testset &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1537, 'parent': 1615, 'tfidf_word': 'testset append exception timeout run ', 'tfidf_method': 'run run_testset TimeoutException append ', 'lda_word': ' run,testset,timeout,exception,append,', 'lda_method': ' run,run_testset,timeoutexception,append,', 'lsi_word': ' run,testset,exception,timeout,append,', 'lsi_method': ' run_testset,run,timeoutexception,append,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '244': 'run_testset(testrunner.py)', '122': 'TimeoutException(utils.py)', '177': 'append(testresult.py)'}}, {'key': 450, 'parent': 1528, 'tfidf_word': 'EP: 450, Name: main &rarr; parse_to_sections &rarr; try_match_entry', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 451, 'parent': 1528, 'tfidf_word': 'EP: 451, Name: main &rarr; parse_to_sections &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 736, 'parent': 1564, 'tfidf_word': 'EP: 736, Name: main &rarr; run_iotjs &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1563, 'parent': 1564, 'tfidf_word': 'iotjs main run execute join ', 'tfidf_method': 'main run_iotjs join execute ', 'lda_word': ' main,run,iotjs,join,execute,', 'lda_method': ' run_iotjs,main,execute,join,', 'lsi_word': ' main,run,iotjs,execute,join,', 'lsi_method': ' main,run_iotjs,execute,join,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['tester.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'258': 'main(tester.py)', '261': 'run_iotjs(tester.py)', '255': 'execute(tester.py)', '137': 'join(utils.py)'}}, {'key': 615, 'parent': 1402, 'tfidf_word': 'EP: 615, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 698, 'parent': 1402, 'tfidf_word': 'EP: 698, Name: execute &rarr; run_coverage_script &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 494, 'parent': 1535, 'tfidf_word': 'EP: 494, Name: __init__ &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1523, 'parent': 1535, 'tfidf_word': 'dicts execute merge config freya genromfs init internet ', 'tfidf_method': 'execute merge_dicts init_freya_config config_internet genromfs ', 'lda_word': ' dicts,execute,merge,config,internet,', 'lda_method': ' execute,merge_dicts,genromfs,config_internet,init_freya_config,', 'lsi_word': ' merge,execute,dicts,config,freya,', 'lsi_method': ' execute,merge_dicts,init_freya_config,config_internet,genromfs,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '98': 'genromfs(builtins.py)', '97': 'config_internet(builtins.py)'}}, {'key': 1470, 'parent': 1668, 'tfidf_word': 'create file json result upload write dirname exist mkdir ', 'tfidf_method': 'write_json_file create_result upload dirname exists mkdir ', 'lda_word': ' write,create,file,json,upload,', 'lda_method': ' write_json_file,create_result,upload,dirname,exist,', 'lsi_word': ' json,result,write,upload,create,', 'lsi_method': ' create_result,upload,write_json_file,exist,mkdir,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Write a JSON file from the given data.', 'files_count': 2, 'files': ['testresult.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1520, 'parent': 1668, 'tfidf_word': 'create result upload current date exist join log ', 'tfidf_method': 'create_result upload log current_date exists join ', 'lda_word': ' upload,result,create,date,exist,', 'lda_method': ' create_result,upload,current_date,exist,join,', 'lsi_word': ' create,upload,result,current,date,', 'lsi_method': ' upload,create_result,log,current_date,exist,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Join one or more path components intelligently. Upload the results of the testrunner to the Firebase database. Checks that the given path is exist.', 'files_count': 3, 'files': ['testresult.py', 'utils.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '126': 'current_date(utils.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '107': 'log(console.py)'}}, {'key': 1811, 'parent': 1820, 'tfidf_word': 'alarm exception handler serial ssh telnet timeout build info iotjs ', 'tfidf_method': 'login __init__ SSHConnection __init__ TelnetConnection alarm_handler TimeoutException SerialConnection __init__ iotjs_build_info ', 'lda_word': ' init,connection,fail,login,ssh,', 'lda_method': ' init,fail,telnetconnection,sshconnection,serialconnection,', 'lsi_word': ' init,fail,args,check,connection,', 'lsi_method': ' init,fail,check_args,alarm_handler,timeoutexception,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 12, 'files': ['artik053.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'utils.py', 'device_base.py', 'console.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'sshcom.py'], 'execution_path_count': 19, 'function_id_to_name_file': {'182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)'}}, {'key': 1817, 'parent': 1820, 'tfidf_word': 'listener readable info init exist remove read send environment device ', 'tfidf_method': 'open putc read_until readline RPi3Device check_args check_args STM32F4Device SimpleRealm RPi2Device ', 'lda_word': ' join,main,check,tool,run,', 'lda_method': ' main,init,open,fail,check_tools,', 'lsi_word': ' read,init,execute,command,file,', 'lsi_method': ' init,execute,main,exec_command,open,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Test whether a path exists. Check whether the file is executable. Write a JSON file from the given data. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Execute the given test. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 28, 'files': ['ssh_device.py', 'sshcom.py', 'utils.py', 'stm32f4dis.py', 'device_base.py', 'coverage_client.py', 'telnetcom.py', 'console.py', 'testrunner.py', 'artik053.py', 'skiplist.py', 'serialcom.py', 'testresult.py', 'tester.py', 'serial_device.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 112, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)', '43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)', '242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 505, 'parent': 1537, 'tfidf_word': 'EP: 505, Name: run &rarr; run_testset &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 506, 'parent': 1537, 'tfidf_word': 'EP: 506, Name: run &rarr; run_testset &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 732, 'parent': 1563, 'tfidf_word': 'EP: 732, Name: main &rarr; run_iotjs &rarr; execute', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 733, 'parent': 1563, 'tfidf_word': 'EP: 733, Name: main &rarr; run_iotjs &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 371, 'parent': 1523, 'tfidf_word': 'EP: 371, Name: init_freya_config &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1522, 'parent': 1523, 'tfidf_word': 'dicts execute merge config genromfs internet ', 'tfidf_method': 'execute merge_dicts config_internet genromfs ', 'lda_word': ' dicts,merge,internet,execute,config,', 'lda_method': ' execute,merge_dicts,genromfs,config_internet,', 'lsi_word': ' execute,merge,dicts,internet,config,', 'lsi_method': ' execute,merge_dicts,genromfs,config_internet,', 'spm_method': ' ', 'text_summary': 'Replace the Internet related symbols to concrete values in the NuttX config file. Execute the given test.', 'files_count': 2, 'files': ['builtins.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '131': 'execute(utils.py)', '140': 'merge_dicts(utils.py)', '97': 'config_internet(builtins.py)'}}, {'key': 6, 'parent': 1470, 'tfidf_word': 'EP: 6, Name: upload &rarr; create_result &rarr; write_json_file &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 7, 'parent': 1470, 'tfidf_word': 'EP: 7, Name: upload &rarr; create_result &rarr; write_json_file &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 13, 'parent': 1520, 'tfidf_word': 'EP: 13, Name: upload &rarr; create_result &rarr; current_date', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1519, 'parent': 1520, 'tfidf_word': 'create result upload exist join log ', 'tfidf_method': 'create_result upload log exists join ', 'lda_word': ' result,create,upload,join,exist,', 'lda_method': ' create_result,upload,exist,log,join,', 'lsi_word': ' create,result,upload,join,exist,', 'lsi_method': ' upload,create_result,join,log,exist,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Checks that the given path is exist.', 'files_count': 3, 'files': ['testresult.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '107': 'log(console.py)'}}, {'key': 1775, 'parent': 1811, 'tfidf_word': 'connection alarm exception handler serial telnet timeout init ', 'tfidf_method': '__init__ __init__ __init__ TimeoutException SerialConnection __init__ TelnetConnection alarm_handler __init__ ', 'lda_word': ' init,connection,serial,telnet,timeout,', 'lda_method': ' init,telnetconnection,serialconnection,alarm_handler,timeoutexception,', 'lsi_word': ' init,connection,exception,handler,timeout,', 'lsi_method': ' init,timeoutexception,alarm_handler,serialconnection,telnetconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['artik053.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py', 'stm32f4dis.py', 'utils.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)', '231': '__init__(stm32f4dis.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 1802, 'parent': 1811, 'tfidf_word': 'fail args check login connection ssh init build info iotjs ', 'tfidf_method': 'check_args __init__ __init__ login SSHConnection __init__ __init__ __init__ iotjs_build_info __init__ ', 'lda_word': ' init,fail,check,login,connection,', 'lda_method': ' init,sshconnection,fail,login,check_args,', 'lsi_word': ' init,fail,args,check,login,', 'lsi_method': ' init,fail,check_args,login,sshconnection,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out. Get buildinfo from iotjs.', 'files_count': 9, 'files': ['stm32f4dis.py', 'serial_device.py', 'device_base.py', 'console.py', 'artik053.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'sshcom.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '182': '__init__(artik053.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)'}}, {'key': 1780, 'parent': 1817, 'tfidf_word': 'command exec execute build exception info iotjs read send timeout ', 'tfidf_method': 'exec_command TimeoutException read_until send iotjs_build_info execute execute ', 'lda_word': ' execute,exec,command,send,timeout,', 'lda_method': ' execute,exec_command,read_until,send,iotjs_build_info,', 'lsi_word': ' exec,command,execute,build,info,', 'lsi_method': ' exec_command,execute,timeoutexception,send,read_until,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Send data over the ssh channel. Execute the given test.', 'files_count': 5, 'files': ['ssh_device.py', 'sshcom.py', 'utils.py', 'stm32f4dis.py', 'device_base.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '232': 'execute(stm32f4dis.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1813, 'parent': 1817, 'tfidf_word': 'dump pi3 info init exist remove read send environment device ', 'tfidf_method': 'open putc read_until readline RPi2Device check_args check_args STM32F4Device SimpleRealm RPi3Device ', 'lda_word': ' main,parse,join,check,save,', 'lda_method': ' execute,fail,prepare_command,remotedevice,read_port_from_url,', 'lsi_word': ' read,init,file,test,open,', 'lsi_method': ' init,main,open,execute,read_test_descriptor,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Test whether a path exists. Execute the given test. Check whether the file is executable. Parse URL and return with the port number. Write a JSON file from the given data. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Checking resources before testing. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 28, 'files': ['coverage_client.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'testrunner.py', 'utils.py', 'artik053.py', 'ssh_device.py', 'skiplist.py', 'serialcom.py', 'testresult.py', 'tester.py', 'stm32f4dis.py', 'serial_device.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 103, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)', '243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)', '242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 344, 'parent': 1522, 'tfidf_word': 'EP: 344, Name: genromfs &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 357, 'parent': 1522, 'tfidf_word': 'EP: 357, Name: config_internet &rarr; execute &rarr; merge_dicts', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 12, 'parent': 1519, 'tfidf_word': 'EP: 12, Name: upload &rarr; create_result &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1518, 'parent': 1519, 'tfidf_word': 'create result upload join log ', 'tfidf_method': 'create_result upload log join ', 'lda_word': ' create,upload,result,log,join,', 'lda_method': ' upload,create_result,log,join,', 'lsi_word': ' result,upload,create,join,log,', 'lsi_method': ' create_result,upload,log,join,', 'spm_method': ' ', 'text_summary': 'Create a final JSON result file from the build and test information. Upload the results of the testrunner to the Firebase database.', 'files_count': 3, 'files': ['testresult.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '178': 'create_result(testresult.py)', '137': 'join(utils.py)', '107': 'log(console.py)'}}, {'key': 1549, 'parent': 1775, 'tfidf_word': 'connection serial telnet init ', 'tfidf_method': '__init__ __init__ SerialConnection __init__ TelnetConnection ', 'lda_word': ' init,connection,telnet,serial,', 'lda_method': ' init,serialconnection,telnetconnection,', 'lsi_word': ' init,connection,serial,telnet,', 'lsi_method': ' init,telnetconnection,serialconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['artik053.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)'}}, {'key': 1767, 'parent': 1775, 'tfidf_word': 'alarm connection exception handler timeout serial telnet init ', 'tfidf_method': '__init__ __init__ TimeoutException alarm_handler __init__ __init__ SerialConnection __init__ TelnetConnection ', 'lda_word': ' init,handler,timeout,alarm,exception,', 'lda_method': ' init,timeoutexception,telnetconnection,alarm_handler,serialconnection,', 'lsi_word': ' init,alarm,timeout,handler,exception,', 'lsi_method': ' init,timeoutexception,alarm_handler,telnetconnection,serialconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['stm32f4dis.py', 'serial_device.py', 'telnetcom.py', 'utils.py', 'artik053.py', 'serialcom.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '182': '__init__(artik053.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)'}}, {'key': 1633, 'parent': 1802, 'tfidf_word': 'args check fail init ', 'tfidf_method': 'fail __init__ check_args __init__ __init__ __init__ __init__ __init__ __init__ ', 'lda_word': ' init,fail,args,check,', 'lda_method': ' init,fail,check_args,', 'lsi_word': ' init,args,check,fail,', 'lsi_method': ' init,check_args,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 8, 'files': ['stm32f4dis.py', 'serial_device.py', 'device_base.py', 'console.py', 'artik053.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '182': '__init__(artik053.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)'}}, {'key': 1778, 'parent': 1802, 'tfidf_word': 'fail login connection ssh build info iotjs init ', 'tfidf_method': '__init__ fail login __init__ __init__ SSHConnection __init__ iotjs_build_info ', 'lda_word': ' init,login,fail,ssh,connection,', 'lda_method': ' init,login,sshconnection,fail,iotjs_build_info,', 'lsi_word': ' init,fail,login,ssh,connection,', 'lsi_method': ' init,login,fail,sshconnection,iotjs_build_info,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out. Get buildinfo from iotjs.', 'files_count': 6, 'files': ['device_base.py', 'console.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py', 'sshcom.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)'}}, {'key': 1560, 'parent': 1780, 'tfidf_word': 'command exec execute exception read send timeout ', 'tfidf_method': 'exec_command execute TimeoutException read_until send ', 'lda_word': ' command,execute,exec,timeout,exception,', 'lda_method': ' execute,exec_command,read_until,timeoutexception,send,', 'lsi_word': ' command,execute,exec,timeout,exception,', 'lsi_method': ' execute,exec_command,timeoutexception,send,read_until,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Send data over the ssh channel.', 'files_count': 3, 'files': ['ssh_device.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1779, 'parent': 1780, 'tfidf_word': 'command exec build execute info iotjs exception read send timeout ', 'tfidf_method': 'exec_command iotjs_build_info execute TimeoutException read_until send ', 'lda_word': ' info,build,iotjs,exec,command,', 'lda_method': ' iotjs_build_info,exec_command,read_until,execute,send,', 'lsi_word': ' exec,command,info,build,iotjs,', 'lsi_method': ' exec_command,execute,iotjs_build_info,send,read_until,', 'spm_method': ' ', 'text_summary': 'Execute the given command.', 'files_count': 4, 'files': ['stm32f4dis.py', 'sshcom.py', 'utils.py', 'device_base.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1624, 'parent': 1813, 'tfidf_word': 'main open init fail message multimap read send ', 'tfidf_method': 'main __init__ fail open read_until open Multimap send_message __init__ ', 'lda_word': ' init,main,open,multimap,message,', 'lda_method': ' main,init,multimap,send_message,open,', 'lsi_word': ' init,main,open,fail,read,', 'lsi_method': ' init,main,open,read_until,fail,', 'spm_method': ' ', 'text_summary': 'Open the ssh port.', 'files_count': 4, 'files': ['coverage_client.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)'}}, {'key': 1810, 'parent': 1813, 'tfidf_word': 'readline create info exist init remove read send environment device ', 'tfidf_method': 'close_pseudo_terminal _listener rmtree relpath is_broken_symlink define_environment basename read_until SimpleSession init_freya_config ', 'lda_word': ' main,check,join,init,execute,', 'lda_method': ' main,check_tools,join,process_output,iotjs_build_info,', 'lsi_word': ' read,init,file,test,execute,', 'lsi_method': ' execute,main,run_coverage_script,init,join,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Test whether a path exists. Execute the given test. Check whether the file is executable. Write a JSON file from the given data. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Checking resources before testing. Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 28, 'files': ['testrunner.py', 'utils.py', 'console.py', 'artik053.py', 'ssh_device.py', 'skiplist.py', 'serialcom.py', 'telnetcom.py', 'sshcom.py', 'testresult.py', 'tester.py', 'stm32f4dis.py', 'serial_device.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 98, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)', '242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '246': 'parse_coverage_info(utils.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 5, 'parent': 1518, 'tfidf_word': 'EP: 5, Name: upload &rarr; create_result &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 11, 'parent': 1518, 'tfidf_word': 'EP: 11, Name: upload &rarr; create_result &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 584, 'parent': 1549, 'tfidf_word': 'EP: 584, Name: __init__ &rarr; __init__ &rarr; TelnetConnection', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1548, 'parent': 1549, 'tfidf_word': 'connection serial init ', 'tfidf_method': '__init__ __init__ SerialConnection __init__ ', 'lda_word': ' init,connection,serial,', 'lda_method': ' init,serialconnection,', 'lsi_word': ' init,connection,serial,', 'lsi_method': ' init,serialconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['artik053.py', 'serial_device.py', 'serialcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'182': '__init__(artik053.py)', '220': '__init__(serial_device.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)'}}, {'key': 1306, 'parent': 1767, 'tfidf_word': 'alarm exception handler timeout init ', 'tfidf_method': 'TimeoutException alarm_handler __init__ __init__ __init__ __init__ ', 'lda_word': ' init,handler,exception,timeout,alarm,', 'lda_method': ' init,alarm_handler,timeoutexception,', 'lsi_word': ' init,alarm,handler,exception,timeout,', 'lsi_method': ' init,timeoutexception,alarm_handler,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['stm32f4dis.py', 'serial_device.py', 'telnetcom.py', 'utils.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '204': '__init__(telnetcom.py)', '203': 'alarm_handler(telnetcom.py)', '122': 'TimeoutException(utils.py)', '182': '__init__(artik053.py)'}}, {'key': 1541, 'parent': 1767, 'tfidf_word': 'connection serial telnet init ', 'tfidf_method': '__init__ __init__ SerialConnection __init__ TelnetConnection ', 'lda_word': ' init,connection,telnet,serial,', 'lda_method': ' init,serialconnection,telnetconnection,', 'lsi_word': ' init,connection,telnet,serial,', 'lsi_method': ' init,telnetconnection,serialconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['stm32f4dis.py', 'serial_device.py', 'telnetcom.py', 'serialcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '202': 'TelnetConnection(telnetcom.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)'}}, {'key': 1307, 'parent': 1633, 'tfidf_word': 'args check fail init ', 'tfidf_method': 'fail __init__ check_args __init__ __init__ __init__ ', 'lda_word': ' init,args,fail,check,', 'lda_method': ' init,check_args,fail,', 'lsi_word': ' init,args,fail,check,', 'lsi_method': ' init,check_args,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['stm32f4dis.py', 'serial_device.py', 'device_base.py', 'console.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '182': '__init__(artik053.py)'}}, {'key': 1320, 'parent': 1633, 'tfidf_word': 'args check fail init ', 'tfidf_method': 'fail __init__ check_args __init__ __init__ __init__ ', 'lda_word': ' init,fail,args,check,', 'lda_method': ' init,fail,check_args,', 'lsi_word': ' init,args,check,fail,', 'lsi_method': ' init,check_args,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['rpi2.py', 'ssh_device.py', 'device_base.py', 'console.py', 'rpi3.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '210': '__init__(device_base.py)', '211': 'check_args(device_base.py)', '105': 'fail(console.py)', '218': '__init__(rpi3.py)'}}, {'key': 1638, 'parent': 1778, 'tfidf_word': 'fail login build info iotjs init ', 'tfidf_method': 'fail login __init__ iotjs_build_info __init__ __init__ ', 'lda_word': ' init,fail,login,build,iotjs,', 'lda_method': ' fail,login,init,iotjs_build_info,', 'lsi_word': ' init,login,fail,info,iotjs,', 'lsi_method': ' init,fail,login,iotjs_build_info,', 'spm_method': ' ', 'text_summary': 'Login to the device. Raises an error containing msg, which __main.py__ can catch and print out.', 'files_count': 5, 'files': ['device_base.py', 'console.py', 'rpi2.py', 'ssh_device.py', 'rpi3.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '213': 'login(device_base.py)', '105': 'fail(console.py)', '216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '218': '__init__(rpi3.py)'}}, {'key': 1743, 'parent': 1778, 'tfidf_word': 'connection ssh init ', 'tfidf_method': '__init__ SSHConnection __init__ __init__ __init__ ', 'lda_word': ' init,ssh,connection,', 'lda_method': ' init,sshconnection,', 'lsi_word': ' init,ssh,connection,', 'lsi_method': ' init,sshconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['rpi2.py', 'ssh_device.py', 'sshcom.py', 'rpi3.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)', '218': '__init__(rpi3.py)'}}, {'key': 716, 'parent': 1560, 'tfidf_word': 'EP: 716, Name: execute &rarr; exec_command &rarr; send', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1559, 'parent': 1560, 'tfidf_word': 'command exec execute exception read timeout ', 'tfidf_method': 'exec_command execute TimeoutException read_until ', 'lda_word': ' command,exec,read,execute,timeout,', 'lda_method': ' exec_command,execute,timeoutexception,read_until,', 'lsi_word': ' exec,execute,command,exception,timeout,', 'lsi_method': ' exec_command,execute,read_until,timeoutexception,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['ssh_device.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '198': 'exec_command(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1547, 'parent': 1779, 'tfidf_word': 'command exec execute exception read send timeout ', 'tfidf_method': 'exec_command execute TimeoutException read_until send ', 'lda_word': ' command,execute,exec,read,send,', 'lda_method': ' execute,exec_command,send,timeoutexception,read_until,', 'lsi_word': ' command,exec,execute,timeout,exception,', 'lsi_method': ' exec_command,execute,send,timeoutexception,read_until,', 'spm_method': ' ', 'text_summary': 'Send data over the ssh channel. Execute the given test.', 'files_count': 3, 'files': ['stm32f4dis.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1556, 'parent': 1779, 'tfidf_word': 'build command exec info iotjs exception read send timeout ', 'tfidf_method': 'exec_command iotjs_build_info TimeoutException read_until send ', 'lda_word': ' build,exec,info,iotjs,command,', 'lda_method': ' iotjs_build_info,exec_command,send,read_until,timeoutexception,', 'lsi_word': ' build,info,exec,iotjs,command,', 'lsi_method': ' exec_command,iotjs_build_info,timeoutexception,send,read_until,', 'spm_method': ' ', 'text_summary': 'Get buildinfo from iotjs.', 'files_count': 3, 'files': ['device_base.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '198': 'exec_command(sshcom.py)', '201': 'send(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 895, 'parent': 1624, 'tfidf_word': 'EP: 895, Name: main &rarr; __init__ &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1622, 'parent': 1624, 'tfidf_word': 'main init message multimap open read send ', 'tfidf_method': 'main __init__ open read_until Multimap send_message __init__ ', 'lda_word': ' main,init,open,send,message,', 'lda_method': ' main,multimap,init,send_message,open,', 'lsi_word': ' init,main,open,send,message,', 'lsi_method': ' init,main,open,read_until,multimap,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['coverage_client.py', 'sshcom.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)'}}, {'key': 1792, 'parent': 1810, 'tfidf_word': 'log last abspath save join file json write dirname info ', 'tfidf_method': 'log exists last_commit_info mkdir abspath join write_json_file save dirname run ', 'lda_word': ' script,coverage,run,execute,info,', 'lda_method': ' run_coverage_script,execute,join,exist,mkdir,', 'lsi_word': ' run,script,execute,coverage,info,', 'lsi_method': ' run_coverage_script,execute,last_commit_info,log,info,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist. Execute the given test. Print a message with the given color. Return the absolute path.', 'files_count': 5, 'files': ['testrunner.py', 'utils.py', 'console.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1808, 'parent': 1810, 'tfidf_word': 'hoist pi2 listener init exist remove read send environment device ', 'tfidf_method': 'read_until putc open exec_command ARTIK053Device create_device set_prompt requestAvatar Skiplist RPi3Device ', 'lda_word': ' command,execute,join,read,fail,', 'lda_method': ' join,init,main,read_test_descriptor,read_json_file,', 'lsi_word': ' read,init,test,file,descriptor,', 'lsi_method': ' init,main,read_test_descriptor,open,read_json_file,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Read line from the serial port. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Read JSON file. Test whether a path exists. Execute the given test. Check whether the file is executable. Parse URL and return with the port number. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Checking resources before testing. Print a message with the given color.', 'files_count': 28, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py', 'testresult.py', 'tester.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'ssh_device.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'reporter.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 87, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)', '241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '183': 'execute(artik053.py)', '229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '245': 'save(testrunner.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 582, 'parent': 1548, 'tfidf_word': 'EP: 582, Name: __init__ &rarr; __init__ &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 583, 'parent': 1548, 'tfidf_word': 'EP: 583, Name: __init__ &rarr; __init__ &rarr; SerialConnection', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 543, 'parent': 1306, 'tfidf_word': 'EP: 543, Name: __init__ &rarr; __init__ &rarr; __init__ &rarr; alarm_handler &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 580, 'parent': 1306, 'tfidf_word': 'EP: 580, Name: __init__ &rarr; __init__ &rarr; __init__ &rarr; alarm_handler &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 547, 'parent': 1541, 'tfidf_word': 'EP: 547, Name: __init__ &rarr; __init__ &rarr; TelnetConnection', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1540, 'parent': 1541, 'tfidf_word': 'connection serial init ', 'tfidf_method': '__init__ __init__ SerialConnection __init__ ', 'lda_word': ' init,connection,serial,', 'lda_method': ' init,serialconnection,', 'lsi_word': ' init,connection,serial,', 'lsi_method': ' init,serialconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['stm32f4dis.py', 'serial_device.py', 'serialcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'231': '__init__(stm32f4dis.py)', '220': '__init__(serial_device.py)', '187': '__init__(serialcom.py)', '186': 'SerialConnection(serialcom.py)'}}, {'key': 544, 'parent': 1307, 'tfidf_word': 'EP: 544, Name: __init__ &rarr; __init__ &rarr; __init__ &rarr; check_args &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 581, 'parent': 1307, 'tfidf_word': 'EP: 581, Name: __init__ &rarr; __init__ &rarr; __init__ &rarr; check_args &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 719, 'parent': 1320, 'tfidf_word': 'EP: 719, Name: __init__ &rarr; __init__ &rarr; __init__ &rarr; check_args &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 726, 'parent': 1320, 'tfidf_word': 'EP: 726, Name: __init__ &rarr; __init__ &rarr; __init__ &rarr; check_args &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 667, 'parent': 1638, 'tfidf_word': 'EP: 667, Name: iotjs_build_info &rarr; login &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1406, 'parent': 1638, 'tfidf_word': 'fail login init ', 'tfidf_method': 'fail login __init__ __init__ __init__ ', 'lda_word': ' init,login,fail,', 'lda_method': ' init,login,fail,', 'lsi_word': ' init,fail,login,', 'lsi_method': ' init,fail,login,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['rpi2.py', 'ssh_device.py', 'device_base.py', 'console.py', 'rpi3.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '213': 'login(device_base.py)', '105': 'fail(console.py)', '218': '__init__(rpi3.py)'}}, {'key': 1561, 'parent': 1743, 'tfidf_word': 'connection ssh init ', 'tfidf_method': '__init__ __init__ SSHConnection __init__ ', 'lda_word': ' init,connection,ssh,', 'lda_method': ' init,sshconnection,', 'lsi_word': ' init,connection,ssh,', 'lsi_method': ' init,sshconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['rpi2.py', 'ssh_device.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'216': '__init__(rpi2.py)', '227': '__init__(ssh_device.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)'}}, {'key': 1562, 'parent': 1743, 'tfidf_word': 'connection ssh init ', 'tfidf_method': '__init__ __init__ SSHConnection __init__ ', 'lda_word': ' init,connection,ssh,', 'lda_method': ' init,sshconnection,', 'lsi_word': ' init,connection,ssh,', 'lsi_method': ' init,sshconnection,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['rpi3.py', 'ssh_device.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'218': '__init__(rpi3.py)', '227': '__init__(ssh_device.py)', '195': 'SSHConnection(sshcom.py)', '196': '__init__(sshcom.py)'}}, {'key': 714, 'parent': 1559, 'tfidf_word': 'EP: 714, Name: execute &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 715, 'parent': 1559, 'tfidf_word': 'EP: 715, Name: execute &rarr; exec_command &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 575, 'parent': 1547, 'tfidf_word': 'EP: 575, Name: execute &rarr; exec_command &rarr; send', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1546, 'parent': 1547, 'tfidf_word': 'command exec execute exception read timeout ', 'tfidf_method': 'exec_command execute TimeoutException read_until ', 'lda_word': ' exec,read,execute,command,exception,', 'lda_method': ' exec_command,execute,timeoutexception,read_until,', 'lsi_word': ' command,exec,execute,timeout,exception,', 'lsi_method': ' exec_command,execute,read_until,timeoutexception,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['stm32f4dis.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '198': 'exec_command(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 676, 'parent': 1556, 'tfidf_word': 'EP: 676, Name: iotjs_build_info &rarr; exec_command &rarr; send', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1555, 'parent': 1556, 'tfidf_word': 'build command exec info iotjs exception read timeout ', 'tfidf_method': 'exec_command iotjs_build_info TimeoutException read_until ', 'lda_word': ' exec,info,build,command,iotjs,', 'lda_method': ' iotjs_build_info,exec_command,timeoutexception,read_until,', 'lsi_word': ' info,exec,iotjs,command,build,', 'lsi_method': ' exec_command,iotjs_build_info,timeoutexception,read_until,', 'spm_method': ' ', 'text_summary': 'Get buildinfo from iotjs.', 'files_count': 3, 'files': ['device_base.py', 'sshcom.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '198': 'exec_command(sshcom.py)', '122': 'TimeoutException(utils.py)', '200': 'read_until(sshcom.py)'}}, {'key': 894, 'parent': 1622, 'tfidf_word': 'EP: 894, Name: main &rarr; __init__ &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1570, 'parent': 1622, 'tfidf_word': 'main init message multimap send ', 'tfidf_method': 'main __init__ Multimap send_message __init__ ', 'lda_word': ' init,main,multimap,message,send,', 'lda_method': ' init,main,send_message,multimap,', 'lsi_word': ' init,main,send,message,multimap,', 'lsi_method': ' init,main,send_message,multimap,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '61': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)'}}, {'key': 1504, 'parent': 1792, 'tfidf_word': 'commit last log run coverage execute script info ', 'tfidf_method': 'info log last_commit_info run_coverage_script execute execute run ', 'lda_word': ' info,run,commit,log,last,', 'lda_method': ' last_commit_info,log,info,run,run_coverage_script,', 'lsi_word': ' info,run,last,log,commit,', 'lsi_method': ' info,log,last_commit_info,run_coverage_script,execute,', 'spm_method': ' ', 'text_summary': 'Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 5, 'files': ['testrunner.py', 'utils.py', 'console.py', 'artik053.py', 'ssh_device.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1781, 'parent': 1792, 'tfidf_word': 'script exist mkdir abspath file join json save write dirname ', 'tfidf_method': 'run_coverage_script exists mkdir execute execute abspath join write_json_file save dirname ', 'lda_word': ' write,save,json,file,dirname,', 'lda_method': ' run_coverage_script,execute,abspath,mkdir,exist,', 'lsi_word': ' coverage,execute,run,script,mkdir,', 'lsi_method': ' execute,run_coverage_script,mkdir,exist,join,', 'spm_method': ' ', 'text_summary': 'Write a JSON file from the given data. Checks that the given path is exist. Return the absolute path. Join one or more path components intelligently. Return the folder name.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'testrunner.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '229': 'execute(ssh_device.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 1580, 'parent': 1808, 'tfidf_word': 'json open init command exception exec fail join timeout read ', 'tfidf_method': '__init__ read_json_file fail TimeoutException join exec_command open open read_until open ', 'lda_word': ' read,init,open,test,file,', 'lda_method': ' init,read_test_descriptor,open,read_json_file,join,', 'lsi_word': ' read,init,descriptor,test,open,', 'lsi_method': ' init,read_test_descriptor,read_json_file,open,timeoutexception,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '137': 'join(utils.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1807, 'parent': 1808, 'tfidf_word': 'warning final f4 freya read exist remove send environment device ', 'tfidf_method': 'Skiplist relpath is_broken_symlink define_environment basename abspath TimeoutException execute _listener init_freya_config ', 'lda_word': ' device,remote,jerry,ssh,main,', 'lda_method': ' remotedevice,run,sshdevice,serialdevice,init,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' main,join,execute,check_tools,log,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Read all the tests from the given folder and create a. Return a relative filepath to path from the start directory. Test whether a path exists. Execute the given test. Check whether the file is executable. Parse URL and return with the port number. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Checking resources before testing. Print a message with the given color.', 'files_count': 28, 'files': ['testrunner.py', 'utils.py', 'testresult.py', 'tester.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'ssh_device.py', 'console.py', 'telnetcom.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 83, 'function_id_to_name_file': {'241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)', '258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '183': 'execute(artik053.py)', '229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '245': 'save(testrunner.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 545, 'parent': 1540, 'tfidf_word': 'EP: 545, Name: __init__ &rarr; __init__ &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 546, 'parent': 1540, 'tfidf_word': 'EP: 546, Name: __init__ &rarr; __init__ &rarr; SerialConnection', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 723, 'parent': 1406, 'tfidf_word': 'EP: 723, Name: __init__ &rarr; __init__ &rarr; login &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 730, 'parent': 1406, 'tfidf_word': 'EP: 730, Name: __init__ &rarr; __init__ &rarr; login &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 718, 'parent': 1561, 'tfidf_word': 'EP: 718, Name: __init__ &rarr; __init__ &rarr; SSHConnection', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 720, 'parent': 1561, 'tfidf_word': 'EP: 720, Name: __init__ &rarr; __init__ &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 725, 'parent': 1562, 'tfidf_word': 'EP: 725, Name: __init__ &rarr; __init__ &rarr; SSHConnection', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 727, 'parent': 1562, 'tfidf_word': 'EP: 727, Name: __init__ &rarr; __init__ &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 573, 'parent': 1546, 'tfidf_word': 'EP: 573, Name: execute &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 574, 'parent': 1546, 'tfidf_word': 'EP: 574, Name: execute &rarr; exec_command &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 674, 'parent': 1555, 'tfidf_word': 'EP: 674, Name: iotjs_build_info &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 675, 'parent': 1555, 'tfidf_word': 'EP: 675, Name: iotjs_build_info &rarr; exec_command &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 893, 'parent': 1570, 'tfidf_word': 'EP: 893, Name: main &rarr; __init__ &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1569, 'parent': 1570, 'tfidf_word': 'init main message multimap send ', 'tfidf_method': 'main __init__ Multimap send_message ', 'lda_word': ' init,main,message,multimap,send,', 'lda_method': ' init,main,multimap,send_message,', 'lsi_word': ' init,main,message,send,multimap,', 'lsi_method': ' init,main,send_message,multimap,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['coverage_client.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '48': '__init__(coverage_client.py)', '59': 'send_message(coverage_client.py)', '41': 'Multimap(coverage_client.py)'}}, {'key': 530, 'parent': 1504, 'tfidf_word': 'EP: 530, Name: run &rarr; last_commit_info &rarr; info &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1305, 'parent': 1504, 'tfidf_word': 'commit coverage execute last log run script info ', 'tfidf_method': 'info log last_commit_info run_coverage_script execute execute ', 'lda_word': ' info,execute,log,run,last,', 'lda_method': ' info,execute,log,run_coverage_script,last_commit_info,', 'lsi_word': ' info,commit,run,last,execute,', 'lsi_method': ' info,last_commit_info,log,run_coverage_script,execute,', 'spm_method': ' ', 'text_summary': 'Print a message with the given color. Print debug message to the screen with green color.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'console.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '138': 'last_commit_info(utils.py)', '106': 'info(console.py)', '107': 'log(console.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1738, 'parent': 1781, 'tfidf_word': 'coverage execute run script abspath join ', 'tfidf_method': 'run_coverage_script abspath join execute execute ', 'lda_word': ' script,execute,coverage,run,abspath,', 'lda_method': ' execute,run_coverage_script,join,abspath,', 'lsi_word': ' run,execute,script,coverage,abspath,', 'lsi_method': ' run_coverage_script,execute,join,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1756, 'parent': 1781, 'tfidf_word': 'mkdir coverage execute file json run save script write dirname ', 'tfidf_method': 'exists mkdir write_json_file save run_coverage_script dirname execute execute ', 'lda_word': ' coverage,run,execute,mkdir,script,', 'lda_method': ' save,write_json_file,dirname,exist,mkdir,', 'lsi_word': ' exist,mkdir,coverage,execute,script,', 'lsi_method': ' exist,mkdir,run_coverage_script,execute,write_json_file,', 'spm_method': ' ', 'text_summary': 'Write a JSON file from the given data. Save the current testresults into JSON format. Execute the given test.', 'files_count': 4, 'files': ['artik053.py', 'utils.py', 'ssh_device.py', 'testrunner.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)', '245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 479, 'parent': 1580, 'tfidf_word': 'EP: 479, Name: __init__ &rarr; __init__ &rarr; _read_test_descriptor &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1502, 'parent': 1580, 'tfidf_word': 'json open test init command exception exec fail timeout read ', 'tfidf_method': '__init__ _read_test_descriptor __init__ fail TimeoutException exec_command open open read_until open ', 'lda_word': ' read,init,test,json,descriptor,', 'lda_method': ' init,read_json_file,open,read_test_descriptor,timeoutexception,', 'lsi_word': ' read,init,json,file,open,', 'lsi_method': ' init,read_test_descriptor,read_json_file,open,exec_command,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'serialcom.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '191': 'open(serialcom.py)', '189': 'exec_command(serialcom.py)', '122': 'TimeoutException(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 1534, 'parent': 1807, 'tfidf_word': 'file test testsets read abspath append join relpath ', 'tfidf_method': 'read_testsets read_test_files abspath join relpath append ', 'lda_word': ' read,testsets,file,test,abspath,', 'lda_method': ' read_test_files,read_testsets,abspath,append,relpath,', 'lsi_word': ' read,file,testsets,test,abspath,', 'lsi_method': ' read_test_files,read_testsets,abspath,append,relpath,', 'spm_method': ' ', 'text_summary': 'Read all the tests into dictionary.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '147': 'relpath(utils.py)', '123': 'abspath(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1806, 'parent': 1807, 'tfidf_word': 'define readable readline print warning exist remove environment send device ', 'tfidf_method': 'Skiplist rmtree is_broken_symlink define_environment basename TimeoutException execute report_final report_coverage init_freya_config ', 'lda_word': ' exist,main,remove,check,tool,', 'lda_method': ' run,exist,log,iotjs_build_info,process_output,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' main,execute,join,check_tools,log,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Execute the given test. Test whether a path exists. Save data to the member variable. Check whether the file is executable. Parse URL and return with the port number. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Checking resources before testing. Print a message with the given color.', 'files_count': 28, 'files': ['tester.py', 'utils.py', 'testresult.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'ssh_device.py', 'console.py', 'testrunner.py', 'telnetcom.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 79, 'function_id_to_name_file': {'258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '137': 'join(utils.py)', '134': 'exists(utils.py)', '179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '177': 'append(testresult.py)', '183': 'execute(artik053.py)', '229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '245': 'save(testrunner.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 890, 'parent': 1569, 'tfidf_word': 'EP: 890, Name: main &rarr; __init__ &rarr; send_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 891, 'parent': 1569, 'tfidf_word': 'EP: 891, Name: main &rarr; __init__ &rarr; Multimap', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 629, 'parent': 1305, 'tfidf_word': 'EP: 629, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; info &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 712, 'parent': 1305, 'tfidf_word': 'EP: 712, Name: execute &rarr; run_coverage_script &rarr; last_commit_info &rarr; info &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1551, 'parent': 1738, 'tfidf_word': 'coverage execute run script abspath join ', 'tfidf_method': 'execute run_coverage_script abspath join ', 'lda_word': ' coverage,run,script,execute,join,', 'lda_method': ' run_coverage_script,execute,abspath,join,', 'lsi_word': ' execute,run,script,coverage,join,', 'lsi_method': ' execute,run_coverage_script,join,abspath,', 'spm_method': ' ', 'text_summary': 'Join one or more path components intelligently. Return the absolute path.', 'files_count': 2, 'files': ['artik053.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1558, 'parent': 1738, 'tfidf_word': 'coverage execute run script abspath join ', 'tfidf_method': 'execute run_coverage_script abspath join ', 'lda_word': ' run,execute,script,coverage,join,', 'lda_method': ' execute,run_coverage_script,abspath,join,', 'lsi_word': ' coverage,script,execute,run,abspath,', 'lsi_method': ' run_coverage_script,execute,join,abspath,', 'spm_method': ' ', 'text_summary': 'Execute the given test. Return the absolute path.', 'files_count': 2, 'files': ['ssh_device.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '250': 'run_coverage_script(utils.py)', '137': 'join(utils.py)', '123': 'abspath(utils.py)'}}, {'key': 1401, 'parent': 1756, 'tfidf_word': 'coverage execute exist mkdir run script ', 'tfidf_method': 'exists mkdir run_coverage_script execute execute ', 'lda_word': ' execute,mkdir,coverage,script,run,', 'lda_method': ' exist,run_coverage_script,mkdir,execute,', 'lsi_word': ' coverage,execute,exist,mkdir,run,', 'lsi_method': ' execute,exist,mkdir,run_coverage_script,', 'spm_method': ' ', 'text_summary': 'Start the client script. Create directory.', 'files_count': 3, 'files': ['artik053.py', 'utils.py', 'ssh_device.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '250': 'run_coverage_script(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '229': 'execute(ssh_device.py)'}}, {'key': 1607, 'parent': 1756, 'tfidf_word': 'file json save write dirname exist mkdir ', 'tfidf_method': 'write_json_file save dirname exists mkdir ', 'lda_word': ' file,write,save,json,dirname,', 'lda_method': ' save,write_json_file,dirname,exist,mkdir,', 'lsi_word': ' write,json,file,save,mkdir,', 'lsi_method': ' save,write_json_file,mkdir,exist,dirname,', 'spm_method': ' ', 'text_summary': 'Write a JSON file from the given data.', 'files_count': 2, 'files': ['testrunner.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'245': 'save(testrunner.py)', '155': 'write_json_file(utils.py)', '141': 'mkdir(utils.py)', '134': 'exists(utils.py)', '128': 'dirname(utils.py)'}}, {'key': 480, 'parent': 1502, 'tfidf_word': 'EP: 480, Name: __init__ &rarr; __init__ &rarr; _read_test_descriptor &rarr; read_json_file &rarr; open &rarr; exec_command &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1454, 'parent': 1502, 'tfidf_word': 'descriptor file json open test fail init read ', 'tfidf_method': 'read_json_file __init__ _read_test_descriptor __init__ fail open read_until open ', 'lda_word': ' read,init,descriptor,open,test,', 'lda_method': ' init,open,read_test_descriptor,read_json_file,read_until,', 'lsi_word': ' read,init,descriptor,file,open,', 'lsi_method': ' init,open,read_json_file,read_test_descriptor,fail,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'telnetcom.py', 'console.py', 'sshcom.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '235': '__init__(skiplist.py)', '237': '_read_test_descriptor(skiplist.py)', '146': 'read_json_file(utils.py)', '208': 'open(telnetcom.py)', '105': 'fail(console.py)', '199': 'open(sshcom.py)', '200': 'read_until(sshcom.py)'}}, {'key': 474, 'parent': 1534, 'tfidf_word': 'EP: 474, Name: read_testsets &rarr; read_test_files &rarr; relpath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1533, 'parent': 1534, 'tfidf_word': 'file test testsets read abspath append join ', 'tfidf_method': 'read_testsets read_test_files abspath join append ', 'lda_word': ' read,test,file,join,testsets,', 'lda_method': ' read_testsets,read_test_files,append,abspath,join,', 'lsi_word': ' read,testsets,test,file,append,', 'lsi_method': ' read_test_files,read_testsets,abspath,append,join,', 'spm_method': ' ', 'text_summary': 'Join one or more path components intelligently. Read all the tests from the given folder and create a. Return the absolute path.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '123': 'abspath(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1568, 'parent': 1806, 'tfidf_word': 'check main tool executable exist join readable ', 'tfidf_method': 'check_tools main exists join is_executable is_readable ', 'lda_word': ' main,check,tool,executable,exist,', 'lda_method': ' check_tools,main,is_executable,is_readable,join,', 'lsi_word': ' check,main,tool,executable,join,', 'lsi_method': ' check_tools,main,is_readable,exist,join,', 'spm_method': ' ', 'text_summary': 'Check whether the file is executable. Check whether the file is readable.', 'files_count': 2, 'files': ['tester.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'258': 'main(tester.py)', '254': 'check_tools(tester.py)', '257': 'is_readable(tester.py)', '256': 'is_executable(tester.py)', '137': 'join(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1803, 'parent': 1806, 'tfidf_word': 'push putc define readline realm exist remove send environment device ', 'tfidf_method': 'putc read_until readline read_until RPi2Device check_args check_args execute Skiplist RPi3Device ', 'lda_word': ' execute,read,command,fail,prepare,', 'lda_method': ' iotjs_build_info,exist,main,fail,exec_command,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' execute,main,fail,prepare_command,read_port_from_url,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Test whether a path exists. Print debug message to the screen with yellow color. Save data to the member variable. Parse URL and return with the port number. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 28, 'files': ['testresult.py', 'utils.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py', 'ssh_device.py', 'console.py', 'testrunner.py', 'telnetcom.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 75, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '177': 'append(testresult.py)', '183': 'execute(artik053.py)', '229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '137': 'join(utils.py)', '245': 'save(testrunner.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '75': 'parse_options(__main__.py)'}}, {'key': 603, 'parent': 1551, 'tfidf_word': 'EP: 603, Name: execute &rarr; run_coverage_script &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 616, 'parent': 1551, 'tfidf_word': 'EP: 616, Name: execute &rarr; run_coverage_script &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 686, 'parent': 1558, 'tfidf_word': 'EP: 686, Name: execute &rarr; run_coverage_script &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 699, 'parent': 1558, 'tfidf_word': 'EP: 699, Name: execute &rarr; run_coverage_script &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 602, 'parent': 1401, 'tfidf_word': 'EP: 602, Name: execute &rarr; run_coverage_script &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 685, 'parent': 1401, 'tfidf_word': 'EP: 685, Name: execute &rarr; run_coverage_script &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 531, 'parent': 1607, 'tfidf_word': 'EP: 531, Name: save &rarr; write_json_file &rarr; mkdir &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 532, 'parent': 1607, 'tfidf_word': 'EP: 532, Name: save &rarr; write_json_file &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 481, 'parent': 1454, 'tfidf_word': 'EP: 481, Name: __init__ &rarr; __init__ &rarr; _read_test_descriptor &rarr; read_json_file &rarr; open &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 482, 'parent': 1454, 'tfidf_word': 'EP: 482, Name: __init__ &rarr; __init__ &rarr; _read_test_descriptor &rarr; read_json_file &rarr; open &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 473, 'parent': 1533, 'tfidf_word': 'EP: 473, Name: read_testsets &rarr; read_test_files &rarr; abspath', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1532, 'parent': 1533, 'tfidf_word': 'file test testsets append join read ', 'tfidf_method': 'read_testsets read_test_files join append ', 'lda_word': ' read,testsets,file,test,append,', 'lda_method': ' read_test_files,append,read_testsets,join,', 'lsi_word': ' read,file,test,testsets,join,', 'lsi_method': ' read_testsets,read_test_files,append,join,', 'spm_method': ' ', 'text_summary': 'Read all the tests into dictionary.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'241': 'read_testsets(testrunner.py)', '249': 'read_test_files(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)'}}, {'key': 741, 'parent': 1568, 'tfidf_word': 'EP: 741, Name: main &rarr; check_tools &rarr; is_readable', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1567, 'parent': 1568, 'tfidf_word': 'check main tool executable exist join ', 'tfidf_method': 'check_tools main exists join is_executable ', 'lda_word': ' main,tool,check,executable,join,', 'lda_method': ' check_tools,main,exist,join,is_executable,', 'lsi_word': ' main,tool,check,join,executable,', 'lsi_method': ' check_tools,main,is_executable,exist,join,', 'spm_method': ' ', 'text_summary': 'Checking resources before testing.', 'files_count': 2, 'files': ['tester.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'258': 'main(tester.py)', '254': 'check_tools(tester.py)', '256': 'is_executable(tester.py)', '137': 'join(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1619, 'parent': 1803, 'tfidf_word': 'upload exist remove break file rmtree symlink ', 'tfidf_method': 'remove upload exists is_broken_symlink remove_file rmtree ', 'lda_word': ' exist,upload,remove,rmtree,break,', 'lda_method': ' upload,remove,is_broken_symlink,exist,remove_file,', 'lsi_word': ' remove,upload,exist,file,rmtree,', 'lsi_method': ' remove,upload,exist,rmtree,remove_file,', 'spm_method': ' ', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 2, 'files': ['testresult.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '148': 'remove(utils.py)', '151': 'rmtree(utils.py)', '134': 'exists(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)'}}, {'key': 1799, 'parent': 1803, 'tfidf_word': 'dump push putc define error warning exist environment send device ', 'tfidf_method': 'execute STM32F4Device _listener Skiplist define_environment basename TimeoutException report_final report_coverage init_freya_config ', 'lda_word': ' execute,command,fail,read,main,', 'lda_method': ' main,iotjs_build_info,exist,remotedevice,serialdevice,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' execute,main,fail,prepare_command,read_port_from_url,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Print debug message to the screen with yellow color. Main method to run IoT.js or JerryScript tests. Parse URL and return with the port number. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 28, 'files': ['stm32f4dis.py', 'serial_device.py', 'testresult.py', 'artik053.py', 'ssh_device.py', 'utils.py', 'console.py', 'testrunner.py', 'telnetcom.py', 'device_base.py', '__init__.py', 'rpi3.py', 'rpi2.py', '__main__.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 71, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '177': 'append(testresult.py)', '183': 'execute(artik053.py)', '229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)', '243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '137': 'join(utils.py)', '245': 'save(testrunner.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '134': 'exists(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 471, 'parent': 1532, 'tfidf_word': 'EP: 471, Name: read_testsets &rarr; read_test_files &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 472, 'parent': 1532, 'tfidf_word': 'EP: 472, Name: read_testsets &rarr; read_test_files &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 740, 'parent': 1567, 'tfidf_word': 'EP: 740, Name: main &rarr; check_tools &rarr; is_executable', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1566, 'parent': 1567, 'tfidf_word': 'check main tool exist join ', 'tfidf_method': 'check_tools main exists join ', 'lda_word': ' main,check,tool,join,exist,', 'lda_method': ' check_tools,main,join,exist,', 'lsi_word': ' check,main,tool,exist,join,', 'lsi_method': ' check_tools,main,join,exist,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist.', 'files_count': 2, 'files': ['tester.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'258': 'main(tester.py)', '254': 'check_tools(tester.py)', '137': 'join(utils.py)', '134': 'exists(utils.py)'}}, {'key': 0, 'parent': 1619, 'tfidf_word': 'EP: 0, Name: upload &rarr; remove &rarr; rmtree &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1517, 'parent': 1619, 'tfidf_word': 'upload remove break exist file symlink ', 'tfidf_method': 'remove upload exists is_broken_symlink remove_file ', 'lda_word': ' upload,remove,break,exist,file,', 'lda_method': ' upload,remove,exist,remove_file,is_broken_symlink,', 'lsi_word': ' remove,upload,file,break,symlink,', 'lsi_method': ' upload,remove,is_broken_symlink,exist,remove_file,', 'spm_method': ' ', 'text_summary': 'Remove the resource file. Remove the given file. Checks that the given path is exist.', 'files_count': 2, 'files': ['testresult.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '148': 'remove(utils.py)', '136': 'is_broken_symlink(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1768, 'parent': 1799, 'tfidf_word': 'execute command prepare fail port read url append ', 'tfidf_method': '_prepare_command fail read_port_from_url append execute execute execute ', 'lda_word': ' execute,prepare,command,url,read,', 'lda_method': ' execute,prepare_command,read_port_from_url,fail,append,', 'lsi_word': ' execute,prepare,command,read,url,', 'lsi_method': ' execute,prepare_command,fail,read_port_from_url,append,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['stm32f4dis.py', 'serial_device.py', 'testresult.py', 'artik053.py', 'ssh_device.py', 'utils.py', 'console.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '177': 'append(testresult.py)', '183': 'execute(artik053.py)', '229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)'}}, {'key': 1797, 'parent': 1799, 'tfidf_word': 'print dump push putc define pi2 exist send environment device ', 'tfidf_method': 'ARTIK053Device putc read_until readline read_until RPi2Device check_args check_args Skiplist RPi3Device ', 'lda_word': ' info,join,coverage,build,iotjs,', 'lda_method': ' main,parse_arguments,flash,iotjs_build_info,log,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' main,join,execute,log,run,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Save data to the member variable. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 28, 'files': ['testrunner.py', 'utils.py', 'testresult.py', 'stm32f4dis.py', 'telnetcom.py', 'console.py', 'device_base.py', 'serial_device.py', 'artik053.py', '__init__.py', 'rpi3.py', 'ssh_device.py', 'rpi2.py', '__main__.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 66, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)', '245': 'save(testrunner.py)', '232': 'execute(stm32f4dis.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '134': 'exists(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '110': 'report_coverage(reporter.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 738, 'parent': 1566, 'tfidf_word': 'EP: 738, Name: main &rarr; check_tools &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 739, 'parent': 1566, 'tfidf_word': 'EP: 739, Name: main &rarr; check_tools &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 3, 'parent': 1517, 'tfidf_word': 'EP: 3, Name: upload &rarr; remove &rarr; is_broken_symlink', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1516, 'parent': 1517, 'tfidf_word': 'upload exist file remove ', 'tfidf_method': 'remove upload exists remove_file ', 'lda_word': ' exist,upload,remove,file,', 'lda_method': ' upload,remove,exist,remove_file,', 'lsi_word': ' remove,upload,file,exist,', 'lsi_method': ' remove,upload,exist,remove_file,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Checks that the given path is exist.', 'files_count': 2, 'files': ['testresult.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '148': 'remove(utils.py)', '149': 'remove_file(utils.py)', '134': 'exists(utils.py)'}}, {'key': 1544, 'parent': 1768, 'tfidf_word': 'append command execute prepare ', 'tfidf_method': 'append _prepare_command execute execute ', 'lda_word': ' command,prepare,execute,append,', 'lda_method': ' execute,prepare_command,append,', 'lsi_word': ' prepare,append,command,execute,', 'lsi_method': ' execute,prepare_command,append,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['stm32f4dis.py', 'serial_device.py', 'testresult.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '177': 'append(testresult.py)', '183': 'execute(artik053.py)'}}, {'key': 1639, 'parent': 1768, 'tfidf_word': 'execute fail port read url command prepare ', 'tfidf_method': 'fail read_port_from_url _prepare_command execute execute execute ', 'lda_word': ' read,url,execute,port,fail,', 'lda_method': ' read_port_from_url,prepare_command,execute,fail,', 'lsi_word': ' read,fail,port,url,execute,', 'lsi_method': ' read_port_from_url,fail,execute,prepare_command,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out. Parse URL and return with the port number. Execute the given test.', 'files_count': 6, 'files': ['ssh_device.py', 'utils.py', 'console.py', 'stm32f4dis.py', 'serial_device.py', 'artik053.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'229': 'execute(ssh_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)', '232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '183': 'execute(artik053.py)'}}, {'key': 1739, 'parent': 1797, 'tfidf_word': 'coverage info parse append join run save ', 'tfidf_method': 'parse_coverage_info join append run save ', 'lda_word': ' join,info,parse,coverage,run,', 'lda_method': ' parse_coverage_info,append,join,run,save,', 'lsi_word': ' info,parse,coverage,join,run,', 'lsi_method': ' parse_coverage_info,run,join,append,save,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)', '245': 'save(testrunner.py)'}}, {'key': 1796, 'parent': 1797, 'tfidf_word': 'hoist upload open pi2 pi3 error exist environment send device ', 'tfidf_method': 'ARTIK053Device putc read_until readline read_until RPi2Device check_args check_args Skiplist RPi3Device ', 'lda_word': ' execute,process,output,log,check,', 'lda_method': ' remotedevice,log,sshdevice,serialdevice,iotjs_build_info,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' main,execute,join,log,adjust_options,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Execute the given command. Print debug message to the screen with yellow color. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 28, 'files': ['stm32f4dis.py', 'telnetcom.py', 'console.py', 'device_base.py', 'serial_device.py', 'artik053.py', 'utils.py', 'testrunner.py', '__init__.py', 'rpi3.py', 'ssh_device.py', 'rpi2.py', '__main__.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'testresult.py'], 'execution_path_count': 62, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)', '212': 'iotjs_build_info(device_base.py)', '230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '133': 'exist_files(utils.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1, 'parent': 1516, 'tfidf_word': 'EP: 1, Name: upload &rarr; remove &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 2, 'parent': 1516, 'tfidf_word': 'EP: 2, Name: upload &rarr; remove &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 567, 'parent': 1544, 'tfidf_word': 'EP: 567, Name: execute &rarr; _prepare_command &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 656, 'parent': 1544, 'tfidf_word': 'EP: 656, Name: execute &rarr; _prepare_command &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 713, 'parent': 1639, 'tfidf_word': 'EP: 713, Name: execute &rarr; read_port_from_url &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1396, 'parent': 1639, 'tfidf_word': 'command execute fail port prepare read url ', 'tfidf_method': 'fail _prepare_command read_port_from_url execute execute ', 'lda_word': ' fail,prepare,read,execute,port,', 'lda_method': ' read_port_from_url,execute,fail,prepare_command,', 'lsi_word': ' fail,read,port,command,prepare,', 'lsi_method': ' fail,execute,prepare_command,read_port_from_url,', 'spm_method': ' ', 'text_summary': 'Prepare the command which will be executed.', 'files_count': 5, 'files': ['stm32f4dis.py', 'serial_device.py', 'utils.py', 'console.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '221': '_prepare_command(serial_device.py)', '248': 'read_port_from_url(utils.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)'}}, {'key': 1536, 'parent': 1739, 'tfidf_word': 'coverage info parse run append join ', 'tfidf_method': 'run parse_coverage_info join append ', 'lda_word': ' coverage,parse,info,run,join,', 'lda_method': ' parse_coverage_info,run,join,append,', 'lsi_word': ' info,parse,run,coverage,join,', 'lsi_method': ' parse_coverage_info,run,join,append,', 'spm_method': ' ', 'text_summary': 'Parse and create coverage information.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1538, 'parent': 1739, 'tfidf_word': 'coverage info parse save append join ', 'tfidf_method': 'save parse_coverage_info join append ', 'lda_word': ' coverage,save,info,parse,join,', 'lda_method': ' parse_coverage_info,save,join,append,', 'lsi_word': ' info,parse,save,coverage,append,', 'lsi_method': ' parse_coverage_info,save,append,join,', 'spm_method': ' ', 'text_summary': 'Save the current testresults into JSON format. Parse and create coverage information.', 'files_count': 3, 'files': ['testrunner.py', 'utils.py', 'testresult.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'245': 'save(testrunner.py)', '246': 'parse_coverage_info(utils.py)', '137': 'join(utils.py)', '177': 'append(testresult.py)'}}, {'key': 1740, 'parent': 1796, 'tfidf_word': 'command exec build data execute fail info iotjs read ', 'tfidf_method': 'exec_command fail _read_data iotjs_build_info execute ', 'lda_word': ' command,exec,execute,read,build,', 'lda_method': ' execute,exec_command,read_data,iotjs_build_info,fail,', 'lsi_word': ' command,exec,build,info,iotjs,', 'lsi_method': ' exec_command,read_data,execute,fail,iotjs_build_info,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['stm32f4dis.py', 'telnetcom.py', 'console.py', 'device_base.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)', '212': 'iotjs_build_info(device_base.py)'}}, {'key': 1777, 'parent': 1796, 'tfidf_word': 'pi3 print define push putc dump exist send environment device ', 'tfidf_method': 'STM32F4Device execute Skiplist define_environment basename TimeoutException save report_final RPi2Device init_freya_config ', 'lda_word': ' device,remote,read,execute,serial,', 'lda_method': ' main,join,execute,iotjs_build_info,debuggerprompt,', 'lsi_word': ' device,remote,ssh,serial,init,', 'lsi_method': ' main,join,log,execute,adjust_options,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Print debug message to the screen with yellow color. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 27, 'files': ['stm32f4dis.py', 'serial_device.py', 'device_base.py', 'artik053.py', 'utils.py', 'testrunner.py', '__init__.py', 'rpi3.py', 'ssh_device.py', 'rpi2.py', '__main__.py', 'console.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'sshcom.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'testresult.py'], 'execution_path_count': 58, 'function_id_to_name_file': {'230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)', '212': 'iotjs_build_info(device_base.py)', '133': 'exist_files(utils.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 568, 'parent': 1396, 'tfidf_word': 'EP: 568, Name: execute &rarr; _prepare_command &rarr; read_port_from_url &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 657, 'parent': 1396, 'tfidf_word': 'EP: 657, Name: execute &rarr; _prepare_command &rarr; read_port_from_url &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 498, 'parent': 1536, 'tfidf_word': 'EP: 498, Name: run &rarr; parse_coverage_info &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 499, 'parent': 1536, 'tfidf_word': 'EP: 499, Name: run &rarr; parse_coverage_info &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 537, 'parent': 1538, 'tfidf_word': 'EP: 537, Name: save &rarr; parse_coverage_info &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 538, 'parent': 1538, 'tfidf_word': 'EP: 538, Name: save &rarr; parse_coverage_info &rarr; append', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1542, 'parent': 1740, 'tfidf_word': 'command exec execute data fail read ', 'tfidf_method': 'exec_command execute fail _read_data ', 'lda_word': ' exec,command,execute,read,fail,', 'lda_method': ' exec_command,execute,read_data,fail,', 'lsi_word': ' exec,execute,command,data,read,', 'lsi_method': ' exec_command,execute,read_data,fail,', 'spm_method': ' ', 'text_summary': 'Raises an error containing msg, which __main.py__ can catch and print out. Waiting for the prompt and removing that characters from the output.', 'files_count': 3, 'files': ['stm32f4dis.py', 'telnetcom.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)'}}, {'key': 1553, 'parent': 1740, 'tfidf_word': 'build command exec info iotjs data fail read ', 'tfidf_method': 'exec_command iotjs_build_info fail _read_data ', 'lda_word': ' info,command,exec,build,iotjs,', 'lda_method': ' exec_command,iotjs_build_info,fail,read_data,', 'lsi_word': ' exec,info,command,iotjs,build,', 'lsi_method': ' iotjs_build_info,exec_command,read_data,fail,', 'spm_method': ' ', 'text_summary': 'Get buildinfo from iotjs.', 'files_count': 3, 'files': ['device_base.py', 'telnetcom.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '207': 'exec_command(telnetcom.py)', '205': '_read_data(telnetcom.py)', '105': 'fail(console.py)'}}, {'key': 1539, 'parent': 1777, 'tfidf_word': 'remote serial artik053 f4 stm32 device ', 'tfidf_method': 'RemoteDevice SerialDevice ARTIK053Device STM32F4Device ', 'lda_word': ' device,serial,remote,f4,artik053,', 'lda_method': ' serialdevice,remotedevice,artik053device,stm32f4device,', 'lsi_word': ' device,remote,serial,f4,stm32,', 'lsi_method': ' remotedevice,serialdevice,stm32f4device,artik053device,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['stm32f4dis.py', 'serial_device.py', 'device_base.py', 'artik053.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'230': 'STM32F4Device(stm32f4dis.py)', '219': 'SerialDevice(serial_device.py)', '209': 'RemoteDevice(device_base.py)', '181': 'ARTIK053Device(artik053.py)'}}, {'key': 1776, 'parent': 1777, 'tfidf_word': 'pi2 pi3 print define push putc exist send environment device ', 'tfidf_method': 'putc read_until readline read_until RPi2Device RPi3Device check_args execute save check_args ', 'lda_word': ' join,info,build,iotjs,file,', 'lda_method': ' flash,remotedevice,sshdevice,init,rpi3device,', 'lsi_word': ' device,remote,ssh,init,pi3,', 'lsi_method': ' main,join,log,execute,adjust_options,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Print debug message to the screen with yellow color. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Checks that all files in the list exist relative to the given path. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 27, 'files': ['device_base.py', 'utils.py', 'testrunner.py', '__init__.py', 'rpi3.py', 'ssh_device.py', 'rpi2.py', '__main__.py', 'console.py', 'artik053.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py', 'stm32f4dis.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'testresult.py'], 'execution_path_count': 56, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '133': 'exist_files(utils.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)', '242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '209': 'RemoteDevice(device_base.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 560, 'parent': 1542, 'tfidf_word': 'EP: 560, Name: execute &rarr; exec_command &rarr; _read_data', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 561, 'parent': 1542, 'tfidf_word': 'EP: 561, Name: execute &rarr; exec_command &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 663, 'parent': 1553, 'tfidf_word': 'EP: 663, Name: iotjs_build_info &rarr; exec_command &rarr; _read_data', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 664, 'parent': 1553, 'tfidf_word': 'EP: 664, Name: iotjs_build_info &rarr; exec_command &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 542, 'parent': 1539, 'tfidf_word': 'EP: 542, Name: STM32F4Device &rarr; SerialDevice &rarr; RemoteDevice', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 579, 'parent': 1539, 'tfidf_word': 'EP: 579, Name: ARTIK053Device &rarr; SerialDevice &rarr; RemoteDevice', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1554, 'parent': 1776, 'tfidf_word': 'build file info iotjs join exist ', 'tfidf_method': 'exist_files iotjs_build_info exists join ', 'lda_word': ' file,exist,iotjs,build,info,', 'lda_method': ' exist_files,iotjs_build_info,join,exist,', 'lsi_word': ' exist,file,iotjs,info,build,', 'lsi_method': ' exist_files,iotjs_build_info,exist,join,', 'spm_method': ' ', 'text_summary': 'Checks that the given path is exist. Checks that all files in the list exist relative to the given path.', 'files_count': 2, 'files': ['device_base.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '133': 'exist_files(utils.py)', '134': 'exists(utils.py)', '137': 'join(utils.py)'}}, {'key': 1772, 'parent': 1776, 'tfidf_word': 'pi2 pi3 print define push putc warning environment send device ', 'tfidf_method': 'putc read_until readline read_until RPi2Device RPi3Device check_args execute save check_args ', 'lda_word': ' execute,run,log,report,process,', 'lda_method': ' main,join,adjust_options,parse_arguments,log,', 'lsi_word': ' device,remote,ssh,init,pi3,', 'lsi_method': ' main,log,join,execute,adjust_options,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Create a device object for testing. Print debug message to the screen with yellow color. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 27, 'files': ['testrunner.py', '__init__.py', 'rpi3.py', 'ssh_device.py', 'device_base.py', 'rpi2.py', '__main__.py', 'console.py', 'artik053.py', 'serialcom.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py', 'stm32f4dis.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'testresult.py'], 'execution_path_count': 54, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '209': 'RemoteDevice(device_base.py)', '215': 'RPi2Device(rpi2.py)', '74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 670, 'parent': 1554, 'tfidf_word': 'EP: 670, Name: iotjs_build_info &rarr; exist_files &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 671, 'parent': 1554, 'tfidf_word': 'EP: 671, Name: iotjs_build_info &rarr; exist_files &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1642, 'parent': 1772, 'tfidf_word': 'r remote ssh create init pi2 pi3 device ', 'tfidf_method': 'RemoteDevice SSHDevice create_device RPi2Device RPi3Device __init__ ', 'lda_word': ' device,init,pi3,create,remote,', 'lda_method': ' remotedevice,sshdevice,rpi2device,rpi3device,create_device,', 'lsi_word': ' device,remote,ssh,create,pi3,', 'lsi_method': ' remotedevice,sshdevice,rpi3device,init,create_device,', 'spm_method': ' ', 'text_summary': 'Empty', 'files_count': 6, 'files': ['testrunner.py', '__init__.py', 'rpi3.py', 'ssh_device.py', 'device_base.py', 'rpi2.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '180': 'create_device(__init__.py)', '217': 'RPi3Device(rpi3.py)', '225': 'SSHDevice(ssh_device.py)', '209': 'RemoteDevice(device_base.py)', '215': 'RPi2Device(rpi2.py)'}}, {'key': 1771, 'parent': 1772, 'tfidf_word': 'realm warning dump define print push configuration open send environment ', 'tfidf_method': 'upload putc read_until readline read_until check_args check_args Skiplist save execute ', 'lda_word': ' fail,check,send,log,run,', 'lda_method': ' join,main,flash,run,remove_file,', 'lsi_word': ' main,parse,option,log,argument,', 'lsi_method': ' main,log,join,execute,adjust_options,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Read line from the serial port. Print debug message to the screen with yellow color. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Check all python files in the given directory recursively. Parse the given arguments. Print debug message to the screen with red color. Execute the given test. Print a message with the given color.', 'files_count': 24, 'files': ['__main__.py', 'console.py', 'artik053.py', 'serialcom.py', 'device_base.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py', 'stm32f4dis.py', 'testrunner.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'testresult.py'], 'execution_path_count': 52, 'function_id_to_name_file': {'74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)', '183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '75': 'parse_options(__main__.py)'}}, {'key': 495, 'parent': 1642, 'tfidf_word': 'EP: 495, Name: __init__ &rarr; create_device &rarr; RPi3Device &rarr; SSHDevice &rarr; RemoteDevice', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 717, 'parent': 1642, 'tfidf_word': 'EP: 717, Name: RPi2Device &rarr; SSHDevice &rarr; RemoteDevice', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1641, 'parent': 1771, 'tfidf_word': 'adjust log main option error warning ', 'tfidf_method': 'log adjust_options main error warning ', 'lda_word': ' adjust,main,error,option,log,', 'lda_method': ' log,main,warning,adjust_options,error,', 'lsi_word': ' adjust,option,log,main,warning,', 'lsi_method': ' adjust_options,log,main,error,warning,', 'spm_method': ' ', 'text_summary': 'Print debug message to the screen with red color. Print a message with the given color.', 'files_count': 2, 'files': ['__main__.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'74': 'main(__main__.py)', '73': 'adjust_options(__main__.py)', '104': 'error(console.py)', '107': 'log(console.py)', '108': 'warning(console.py)'}}, {'key': 1737, 'parent': 1771, 'tfidf_word': 'exception final freya hoist timeout open print upload send environment ', 'tfidf_method': 'putc read_until readline read_until check_args check_args Skiplist __init__ SimpleSession execute ', 'lda_word': ' main,run,parse,log,argument,', 'lda_method': ' execute,main,process_output,read_until,iotjs_build_info,', 'lsi_word': ' main,parse,argument,join,execute,', 'lsi_method': ' main,join,execute,parse_arguments,recursive_check,', 'spm_method': ' ', 'text_summary': 'Remove the given file. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Check all python files in the given directory recursively. Parse the given arguments. Execute the given test. Print a message with the given color.', 'files_count': 24, 'files': ['artik053.py', 'serialcom.py', 'device_base.py', 'console.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py', 'stm32f4dis.py', 'testrunner.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'testresult.py', '__main__.py'], 'execution_path_count': 50, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '107': 'log(console.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '74': 'main(__main__.py)', '75': 'parse_options(__main__.py)'}}, {'key': 29, 'parent': 1641, 'tfidf_word': 'EP: 29, Name: main &rarr; adjust_options &rarr; error &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 30, 'parent': 1641, 'tfidf_word': 'EP: 30, Name: main &rarr; adjust_options &rarr; warning &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1733, 'parent': 1737, 'tfidf_word': 'exception final freya hoist open option dump timeout environment send ', 'tfidf_method': 'putc read_until readline read_until check_args check_args hoist_section Skiplist save execute ', 'lda_word': ' read,get,terminal,pseudo,main,', 'lda_method': ' join,main,flash,do_continue,debuggerprompt,', 'lsi_word': ' main,parse,argument,run,execute,', 'lsi_method': ' main,execute,join,parse_arguments,run_jerry,', 'spm_method': ' ', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Check all python files in the given directory recursively. Parse the given arguments. Execute the given test. Print a message with the given color.', 'files_count': 22, 'files': ['artik053.py', 'serialcom.py', 'device_base.py', 'console.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py', 'stm32f4dis.py', 'testrunner.py', 'reporter.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 46, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '107': 'log(console.py)', '245': 'save(testrunner.py)', '112': 'report_final(reporter.py)', '109': 'report_configuration(reporter.py)', '242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)'}}, {'key': 1736, 'parent': 1737, 'tfidf_word': 'file genromfs remove join main option parse upload ', 'tfidf_method': 'remove_file genromfs join upload main parse_options ', 'lda_word': ' remove,file,join,genromfs,main,', 'lda_method': ' remove_file,upload,genromfs,parse_options,main,', 'lsi_word': ' file,remove,genromfs,upload,join,', 'lsi_method': ' genromfs,remove_file,upload,join,parse_options,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'testresult.py', '__main__.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '137': 'join(utils.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '74': 'main(__main__.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1717, 'parent': 1733, 'tfidf_word': 'prompt putc command readline recursive report save dirname timeout send ', 'tfidf_method': 'dirname save run execute check_args check_args read_until readline putc get ', 'lda_word': ' main,execute,join,jerry,debugger,', 'lda_method': ' execute,main,process_output,read_until,iotjs_build_info,', 'lsi_word': ' main,parse,argument,execute,jerry,', 'lsi_method': ' main,execute,join,parse_arguments,run_jerry,', 'spm_method': ' ', 'text_summary': 'Main method to run IoT.js or JerryScript tests. Send data to the serial port. Parse the given arguments. Execute the given test. Print a message with the given color.', 'files_count': 17, 'files': ['artik053.py', 'serialcom.py', 'device_base.py', 'console.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py', 'stm32f4dis.py', 'testrunner.py', 'reporter.py'], 'execution_path_count': 28, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '107': 'log(console.py)', '245': 'save(testrunner.py)'}}, {'key': 1732, 'parent': 1733, 'tfidf_word': 'dump dirname define configuration config close basename print message environment ', 'tfidf_method': '_listener dirname define_environment basename report_final report_configuration push_environment print_message open_pseudo_terminal close_pseudo_terminal ', 'lda_word': ' read,run,testsets,log,report,', 'lda_method': ' run,log,join,report_final,report_configuration,', 'lsi_word': ' run,log,report,join,final,', 'lsi_method': ' run,log,join,report_final,report_configuration,', 'spm_method': ' ', 'text_summary': 'Print a message with the given color. Main method to run IoT.js or JerryScript tests. Checks that the given path is exist. Return the base name of pathname path.', 'files_count': 9, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 18, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '112': 'report_final(reporter.py)', '107': 'log(console.py)', '109': 'report_configuration(reporter.py)', '137': 'join(utils.py)', '242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)'}}, {'key': 345, 'parent': 1736, 'tfidf_word': 'EP: 345, Name: genromfs &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1735, 'parent': 1736, 'tfidf_word': 'file remove genromfs main option parse upload ', 'tfidf_method': 'remove_file upload main parse_options genromfs ', 'lda_word': ' file,upload,remove,option,genromfs,', 'lda_method': ' upload,remove_file,genromfs,main,parse_options,', 'lsi_word': ' file,remove,upload,genromfs,option,', 'lsi_method': ' remove_file,genromfs,upload,main,parse_options,', 'spm_method': ' ', 'text_summary': 'Remove the given file.', 'files_count': 4, 'files': ['builtins.py', 'utils.py', 'testresult.py', '__main__.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'98': 'genromfs(builtins.py)', '149': 'remove_file(utils.py)', '179': 'upload(testresult.py)', '74': 'main(__main__.py)', '75': 'parse_options(__main__.py)'}}, {'key': 1711, 'parent': 1717, 'tfidf_word': 'process output option message coverage init dirname command timeout send ', 'tfidf_method': 'check_args check_args read_until readline read_until putc dirname TimeoutException run_jerry get ', 'lda_word': ' info,build,iotjs,fail,process,', 'lda_method': ' main,join,execute,flash,recursive_check,', 'lsi_word': ' main,parse,argument,execute,jerry,', 'lsi_method': ' main,execute,join,parse_arguments,run_jerry,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test. Parse the given options. Send data to the serial port.', 'files_count': 14, 'files': ['artik053.py', 'serialcom.py', 'device_base.py', 'console.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'sshcom.py'], 'execution_path_count': 24, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '192': 'putc(serialcom.py)', '212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 1716, 'parent': 1717, 'tfidf_word': 'execute output process coverage join log report run save ', 'tfidf_method': 'process_output log report_coverage join execute execute run save ', 'lda_word': ' join,save,output,execute,process,', 'lda_method': ' process_output,execute,join,save,log,', 'lsi_word': ' output,process,execute,run,coverage,', 'lsi_method': ' process_output,execute,log,report_coverage,run,', 'spm_method': ' ', 'text_summary': '', 'files_count': 6, 'files': ['artik053.py', 'utils.py', 'stm32f4dis.py', 'testrunner.py', 'reporter.py', 'console.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '247': 'process_output(utils.py)', '232': 'execute(stm32f4dis.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '107': 'log(console.py)', '245': 'save(testrunner.py)', '137': 'join(utils.py)'}}, {'key': 504, 'parent': 1732, 'tfidf_word': 'EP: 504, Name: run &rarr; report_final &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1731, 'parent': 1732, 'tfidf_word': 'dump dirname define configuration config close basename prompt message environment ', 'tfidf_method': 'close_pseudo_terminal _listener dirname define_environment basename report_configuration push_environment print_message SimpleRealm open_pseudo_terminal ', 'lda_word': ' pseudo,terminal,open,listener,print,', 'lda_method': ' exist,read_testsets,close_pseudo_terminal,run,join,', 'lsi_word': ' run,join,log,simple,configuration,', 'lsi_method': ' run,join,log,report_configuration,dirname,', 'spm_method': ' ', 'text_summary': 'Define environment. Define the environment variables globally, not just for a process. Return the base name of pathname path. Create a pseudo terminal. Checks that the given path is exist. Print a message with the given color.', 'files_count': 9, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py'], 'execution_path_count': 17, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '109': 'report_configuration(reporter.py)', '107': 'log(console.py)', '137': 'join(utils.py)', '242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)'}}, {'key': 332, 'parent': 1735, 'tfidf_word': 'EP: 332, Name: genromfs &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1734, 'parent': 1735, 'tfidf_word': 'file main option parse remove upload ', 'tfidf_method': 'remove_file upload main parse_options ', 'lda_word': ' upload,main,parse,remove,file,', 'lda_method': ' remove_file,main,upload,parse_options,', 'lsi_word': ' file,remove,upload,main,parse,', 'lsi_method': ' upload,remove_file,main,parse_options,', 'spm_method': ' ', 'text_summary': '', 'files_count': 3, 'files': ['testresult.py', 'utils.py', '__main__.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'179': 'upload(testresult.py)', '149': 'remove_file(utils.py)', '74': 'main(__main__.py)', '75': 'parse_options(__main__.py)'}}, {'key': 658, 'parent': 1711, 'tfidf_word': 'EP: 658, Name: execute &rarr; putc', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1710, 'parent': 1711, 'tfidf_word': 'init option message exception dirname coverage command output timeout send ', 'tfidf_method': 'send_message execute parse_arguments execute process_output check_args check_args read_until readline get ', 'lda_word': ' execute,send,get,continue,command,', 'lda_method': ' fail,iotjs_build_info,check_args,main,debuggerprompt,', 'lsi_word': ' main,parse,argument,execute,jerry,', 'lsi_method': ' main,execute,join,parse_arguments,run_jerry,', 'spm_method': ' ', 'text_summary': 'Check all python files in the given directory recursively. Parse the given arguments. Execute the given test. Parse the given options.', 'files_count': 14, 'files': ['device_base.py', 'console.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py', 'serial_device.py', 'artik053.py', 'sshcom.py', 'serialcom.py'], 'execution_path_count': 23, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '183': 'execute(artik053.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 601, 'parent': 1716, 'tfidf_word': 'EP: 601, Name: execute &rarr; process_output', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1715, 'parent': 1716, 'tfidf_word': 'coverage execute join log output process report run save ', 'tfidf_method': 'log report_coverage join execute run save process_output ', 'lda_word': ' join,save,execute,output,process,', 'lda_method': ' execute,join,save,log,process_output,', 'lsi_word': ' coverage,report,run,log,process,', 'lsi_method': ' run,report_coverage,log,join,save,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['stm32f4dis.py', 'utils.py', 'testrunner.py', 'reporter.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'232': 'execute(stm32f4dis.py)', '247': 'process_output(utils.py)', '243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '107': 'log(console.py)', '245': 'save(testrunner.py)', '137': 'join(utils.py)'}}, {'key': 503, 'parent': 1731, 'tfidf_word': 'EP: 503, Name: run &rarr; report_configuration &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1730, 'parent': 1731, 'tfidf_word': 'freya dump dirname define config close basename print message environment ', 'tfidf_method': 'close_pseudo_terminal _listener dirname define_environment basename log push_environment print_message SimpleRealm open_pseudo_terminal ', 'lda_word': ' environment,pseudo,table,define,print,', 'lda_method': ' push_environment,skiplist,close_pseudo_terminal,init,define_environment,', 'lsi_word': ' run,join,simple,testsets,read,', 'lsi_method': ' run,join,simplerealm,set_prompt,dirname,', 'spm_method': ' ', 'text_summary': 'Define environment. Read all the tests into dictionary. Return the base name of pathname path. Checks that the given path is exist. Print a message with the given color.', 'files_count': 8, 'files': ['testrunner.py', 'utils.py', 'skiplist.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 16, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '137': 'join(utils.py)', '242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 4, 'parent': 1734, 'tfidf_word': 'EP: 4, Name: upload &rarr; remove_file', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 331, 'parent': 1734, 'tfidf_word': 'EP: 331, Name: main &rarr; parse_options', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1705, 'parent': 1710, 'tfidf_word': 'option args init run dirname coverage command build iotjs send ', 'tfidf_method': 'run_jerry parse_arguments execute parse_arguments execute check_args iotjs_build_info dirname parse_option get ', 'lda_word': ' fail,build,iotjs,info,dirname,', 'lda_method': ' main,execute,run_jerry,join,fail,', 'lsi_word': ' main,parse,argument,jerry,join,', 'lsi_method': ' main,join,execute,parse_arguments,recursive_check,', 'spm_method': ' ', 'text_summary': 'Check all python files in the given directory recursively. Parse the given arguments. Execute the given test. Parse the given options.', 'files_count': 10, 'files': ['device_base.py', 'console.py', 'travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'flasher.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 18, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '105': 'fail(console.py)', '266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 1709, 'parent': 1710, 'tfidf_word': 'build check exception fail info iotjs output process readline timeout ', 'tfidf_method': 'execute fail TimeoutException read_until readline read_until iotjs_build_info check_args process_output ', 'lda_word': ' args,fail,check,execute,readline,', 'lda_method': ' execute,readline,fail,check_args,read_until,', 'lsi_word': ' execute,read,timeout,exception,readline,', 'lsi_method': ' execute,read_until,timeoutexception,readline,process_output,', 'spm_method': ' ', 'text_summary': '', 'files_count': 7, 'files': ['device_base.py', 'utils.py', 'serial_device.py', 'console.py', 'artik053.py', 'sshcom.py', 'serialcom.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'212': 'iotjs_build_info(device_base.py)', '247': 'process_output(utils.py)', '222': 'check_args(serial_device.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 566, 'parent': 1715, 'tfidf_word': 'EP: 566, Name: execute &rarr; process_output', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1714, 'parent': 1715, 'tfidf_word': 'coverage join log report run save ', 'tfidf_method': 'log report_coverage join run save ', 'lda_word': ' join,save,coverage,run,log,', 'lda_method': ' save,join,run,log,report_coverage,', 'lsi_word': ' log,report,run,coverage,join,', 'lsi_method': ' report_coverage,run,log,save,join,', 'spm_method': ' ', 'text_summary': 'Save the current testresults into JSON format.', 'files_count': 4, 'files': ['testrunner.py', 'reporter.py', 'console.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'243': 'run(testrunner.py)', '110': 'report_coverage(reporter.py)', '107': 'log(console.py)', '245': 'save(testrunner.py)', '137': 'join(utils.py)'}}, {'key': 497, 'parent': 1730, 'tfidf_word': 'EP: 497, Name: run &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1729, 'parent': 1730, 'tfidf_word': 'freya dump dirname define config close basename print message environment ', 'tfidf_method': 'close_pseudo_terminal _listener dirname define_environment basename log push_environment print_message hoist_section open_pseudo_terminal ', 'lda_word': ' join,init,read,testsets,open,', 'lda_method': ' read_testsets,main,dump_section_table,push_environment,exist,', 'lsi_word': ' terminal,pseudo,exist,close,testsets,', 'lsi_method': ' run,join,simplerealm,dirname,set_prompt,', 'spm_method': ' ', 'text_summary': 'Read all the tests into dictionary. Return the base name of pathname path. Checks that the given path is exist. Main method to run IoT.js or JerryScript tests. Print a message with the given color.', 'files_count': 8, 'files': ['testrunner.py', 'skiplist.py', 'utils.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'242': '__init__(testrunner.py)', '234': 'Skiplist(skiplist.py)', '241': 'read_testsets(testrunner.py)', '137': 'join(utils.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 673, 'parent': 1705, 'tfidf_word': 'EP: 673, Name: iotjs_build_info &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1704, 'parent': 1705, 'tfidf_word': 'message args info run fail dirname coverage command init send ', 'tfidf_method': 'main run_jerry parse_arguments execute parse_arguments execute check_args dirname recursive_check get ', 'lda_word': ' join,flash,main,check,recursive,', 'lda_method': ' main,join,flash,recursive_check,get,', 'lsi_word': ' main,parse,argument,jerry,debugger,', 'lsi_method': ' main,join,execute,parse_arguments,recursive_check,', 'spm_method': ' ', 'text_summary': 'Check all python files in the given directory recursively. Parse the given arguments. Execute the given test.', 'files_count': 9, 'files': ['travis_script.py', 'check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'console.py', 'flasher.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 17, 'function_id_to_name_file': {'266': 'main(travis_script.py)', '267': 'parse_option(travis_script.py)', '35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 669, 'parent': 1709, 'tfidf_word': 'EP: 669, Name: iotjs_build_info &rarr; process_output', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1708, 'parent': 1709, 'tfidf_word': 'execute read args check exception fail readline timeout ', 'tfidf_method': 'execute fail TimeoutException read_until readline read_until check_args ', 'lda_word': ' execute,read,exception,timeout,readline,', 'lda_method': ' execute,read_until,check_args,readline,fail,', 'lsi_word': ' execute,read,exception,timeout,readline,', 'lsi_method': ' execute,read_until,timeoutexception,readline,fail,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern.', 'files_count': 6, 'files': ['serial_device.py', 'console.py', 'artik053.py', 'sshcom.py', 'serialcom.py', 'utils.py'], 'execution_path_count': 4, 'function_id_to_name_file': {'222': 'check_args(serial_device.py)', '105': 'fail(console.py)', '183': 'execute(artik053.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 517, 'parent': 1714, 'tfidf_word': 'EP: 517, Name: run &rarr; report_coverage &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 536, 'parent': 1714, 'tfidf_word': 'EP: 536, Name: save &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 496, 'parent': 1729, 'tfidf_word': 'EP: 496, Name: __init__ &rarr; Skiplist', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1728, 'parent': 1729, 'tfidf_word': 'freya dump dirname define config close basename open message environment ', 'tfidf_method': 'init_freya_config _listener dirname define_environment basename log push_environment print_message hoist_section close_pseudo_terminal ', 'lda_word': ' section,main,testsets,read,join,', 'lda_method': ' read_testsets,join,run,simplesession,simplerealm,', 'lsi_word': ' pseudo,terminal,exist,close,testsets,', 'lsi_method': ' run,join,set_prompt,dirname,simplerealm,', 'spm_method': ' ', 'text_summary': 'Close the pseudo terminal. Define environment. Define the environment variables globally, not just for a process. Return the base name of pathname path. Checks that the given path is exist. Print a message with the given color.', 'files_count': 7, 'files': ['testrunner.py', 'utils.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'241': 'read_testsets(testrunner.py)', '137': 'join(utils.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 928, 'parent': 1704, 'tfidf_word': 'EP: 928, Name: main &rarr; parse_option', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1703, 'parent': 1704, 'tfidf_word': 'message args info run fail dirname coverage command init send ', 'tfidf_method': 'send_message run_jerry parse_arguments execute parse_arguments execute check_args dirname recursive_check get ', 'lda_word': ' main,execute,get,parse,argument,', 'lda_method': ' flash,get,init,main,join,', 'lsi_word': ' main,argument,parse,jerry,debugger,', 'lsi_method': ' main,join,execute,parse_arguments,recursive_check,', 'spm_method': ' ', 'text_summary': 'Check all python files in the given directory recursively. Parse the given arguments. Execute the given test.', 'files_count': 8, 'files': ['check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'console.py', 'flasher.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 16, 'function_id_to_name_file': {'35': 'main(check_pylint.py)', '36': 'recursive_check(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 662, 'parent': 1708, 'tfidf_word': 'EP: 662, Name: check_args &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1707, 'parent': 1708, 'tfidf_word': 'execute read exception readline timeout ', 'tfidf_method': 'execute TimeoutException read_until readline read_until ', 'lda_word': ' execute,read,readline,exception,timeout,', 'lda_method': ' execute,readline,read_until,timeoutexception,', 'lsi_word': ' execute,read,exception,timeout,readline,', 'lsi_method': ' execute,read_until,timeoutexception,readline,', 'spm_method': ' ', 'text_summary': 'Receive data from the server until we get the expected pattern. Read line from the serial port.', 'files_count': 4, 'files': ['artik053.py', 'sshcom.py', 'serialcom.py', 'utils.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '200': 'read_until(sshcom.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 475, 'parent': 1728, 'tfidf_word': 'EP: 475, Name: read_testsets &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1727, 'parent': 1728, 'tfidf_word': 'freya dump dirname define config close basename open testsets environment ', 'tfidf_method': '_listener join dirname define_environment basename log push_environment print_message hoist_section close_pseudo_terminal ', 'lda_word': ' exist,pseudo,terminal,run,close,', 'lda_method': ' main,dump_section_table,hoist_section,run,exist,', 'lsi_word': ' terminal,pseudo,exist,close,open,', 'lsi_method': ' run,set_prompt,join,dirname,simplerealm,', 'spm_method': ' ', 'text_summary': 'Define environment. Read all the tests into dictionary. Return the base name of pathname path. Checks that the given path is exist. Print a message with the given color.', 'files_count': 7, 'files': ['testrunner.py', 'utils.py', 'twisted_server.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 13, 'function_id_to_name_file': {'241': 'read_testsets(testrunner.py)', '134': 'exists(utils.py)', '161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '137': 'join(utils.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 918, 'parent': 1703, 'tfidf_word': 'EP: 918, Name: main &rarr; recursive_check &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1702, 'parent': 1703, 'tfidf_word': 'init args run fail dirname coverage command check info send ', 'tfidf_method': 'run_jerry send_message parse_arguments execute parse_arguments execute check_args dirname DebuggerPrompt get ', 'lda_word': ' main,debugger,info,coverage,prompt,', 'lda_method': ' main,execute,run_jerry,do_continue,debuggerprompt,', 'lsi_word': ' main,parse,argument,jerry,debugger,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,join,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 8, 'files': ['check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'console.py', 'flasher.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 15, 'function_id_to_name_file': {'35': 'main(check_pylint.py)', '137': 'join(utils.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 661, 'parent': 1707, 'tfidf_word': 'EP: 661, Name: execute &rarr; read_until', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1706, 'parent': 1707, 'tfidf_word': 'execute exception read readline timeout ', 'tfidf_method': 'execute TimeoutException read_until readline ', 'lda_word': ' readline,execute,read,exception,timeout,', 'lda_method': ' readline,execute,timeoutexception,read_until,', 'lsi_word': ' execute,exception,read,timeout,readline,', 'lsi_method': ' execute,read_until,timeoutexception,readline,', 'spm_method': ' ', 'text_summary': 'Execute the given test.', 'files_count': 3, 'files': ['artik053.py', 'serialcom.py', 'utils.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'183': 'execute(artik053.py)', '194': 'readline(serialcom.py)', '193': 'read_until(serialcom.py)', '122': 'TimeoutException(utils.py)'}}, {'key': 470, 'parent': 1727, 'tfidf_word': 'EP: 470, Name: read_testsets &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1726, 'parent': 1727, 'tfidf_word': 'log listener join init hoist freya exist open avatar environment ', 'tfidf_method': 'join exists dirname define_environment basename log push_environment print_message hoist_section _listener ', 'lda_word': ' run,main,terminal,dirname,section,', 'lda_method': ' exist,close_pseudo_terminal,requestavatar,basename,init_freya_config,', 'lsi_word': ' environment,push,define,pseudo,terminal,', 'lsi_method': ' run,join,simplerealm,set_prompt,dirname,', 'spm_method': ' ', 'text_summary': 'Define environment. Define the environment variables globally, not just for a process. Return the base name of pathname path. Checks that the given path is exist. Print a message with the given color.', 'files_count': 6, 'files': ['twisted_server.py', 'utils.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'161': 'run(twisted_server.py)', '128': 'dirname(utils.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '137': 'join(utils.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '134': 'exists(utils.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 917, 'parent': 1702, 'tfidf_word': 'EP: 917, Name: main &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1701, 'parent': 1702, 'tfidf_word': 'init args run fail dirname coverage command check info send ', 'tfidf_method': 'send_message parse_arguments execute parse_arguments execute check_args join dirname main get ', 'lda_word': ' flash,main,debugger,continue,prompt,', 'lda_method': ' main,flash,init,get,dirname,', 'lsi_word': ' main,parse,argument,jerry,debugger,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,debuggerprompt,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 8, 'files': ['check_pylint.py', 'utils.py', 'coverage_client.py', 'ssh_device.py', 'console.py', 'flasher.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 14, 'function_id_to_name_file': {'35': 'main(check_pylint.py)', '128': 'dirname(utils.py)', '43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 659, 'parent': 1706, 'tfidf_word': 'EP: 659, Name: execute &rarr; readline', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 660, 'parent': 1706, 'tfidf_word': 'EP: 660, Name: execute &rarr; read_until &rarr; TimeoutException', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 466, 'parent': 1726, 'tfidf_word': 'EP: 466, Name: run &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1725, 'parent': 1726, 'tfidf_word': 'table log listener join init hoist freya exist dump environment ', 'tfidf_method': 'init_freya_config join exists define_environment basename log push_environment print_message _listener close_pseudo_terminal ', 'lda_word': ' terminal,pseudo,dump,open,exist,', 'lda_method': ' main,simplerealm,basename,init_freya_config,dump_section_table,', 'lsi_word': ' terminal,pseudo,environment,open,listener,', 'lsi_method': ' run,join,set_prompt,simplerealm,main,', 'spm_method': ' ', 'text_summary': 'Define the environment variables globally, not just for a process. Print a message with the given color. Checks that the given path is exist. Define environment.', 'files_count': 6, 'files': ['twisted_server.py', 'utils.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'161': 'run(twisted_server.py)', '168': 'set_prompt(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '137': 'join(utils.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '134': 'exists(utils.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 916, 'parent': 1701, 'tfidf_word': 'EP: 916, Name: main &rarr; dirname', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1700, 'parent': 1701, 'tfidf_word': 'join args info run fail coverage command check init send ', 'tfidf_method': 'run_jerry send_message parse_arguments execute parse_arguments execute check_args join DebuggerPrompt get ', 'lda_word': ' send,jerry,execute,get,continue,', 'lda_method': ' main,parse_arguments,flash,execute,init,', 'lsi_word': ' main,argument,parse,jerry,debugger,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,debuggerprompt,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 7, 'files': ['coverage_client.py', 'ssh_device.py', 'console.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 13, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '39': 'JerryDebugger(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 465, 'parent': 1725, 'tfidf_word': 'EP: 465, Name: run &rarr; set_prompt', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1724, 'parent': 1725, 'tfidf_word': 'freya exist dump define config close basename table log environment ', 'tfidf_method': 'init_freya_config join exists define_environment basename log push_environment print_message hoist_section _listener ', 'lda_word': ' terminal,pseudo,close,exist,run,', 'lda_method': ' basename,exist,simplerealm,close_pseudo_terminal,init_freya_config,', 'lsi_word': ' environment,pseudo,terminal,push,define,', 'lsi_method': ' run,simplerealm,join,dump_section_table,open_pseudo_terminal,', 'spm_method': ' ', 'text_summary': 'Print a message with the given color. Create a pseudo terminal. Checks that the given path is exist. Define environment.', 'files_count': 6, 'files': ['twisted_server.py', 'utils.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'161': 'run(twisted_server.py)', '159': 'SimpleRealm(twisted_server.py)', '137': 'join(utils.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '134': 'exists(utils.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 913, 'parent': 1700, 'tfidf_word': 'EP: 913, Name: main &rarr; JerryDebugger', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1699, 'parent': 1700, 'tfidf_word': 'init args run fail debugger coverage command check info send ', 'tfidf_method': 'run_jerry send_message parse_arguments execute parse_arguments execute check_args join DebuggerPrompt get ', 'lda_word': ' main,execute,init,flash,get,', 'lda_method': ' main,execute,parse_arguments,run_jerry,init,', 'lsi_word': ' main,argument,parse,execute,get,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,debuggerprompt,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 7, 'files': ['coverage_client.py', 'ssh_device.py', 'console.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 12, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '44': '__init__(coverage_client.py)', '228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 464, 'parent': 1724, 'tfidf_word': 'EP: 464, Name: run &rarr; SimpleRealm', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1723, 'parent': 1724, 'tfidf_word': 'freya exist dump define config close basename listener log environment ', 'tfidf_method': 'hoist_section init_freya_config exists define_environment basename log push_environment print_message join _listener ', 'lda_word': ' environment,define,push,basename,config,', 'lda_method': ' define_environment,simplesession,requestavatar,push_environment,main,', 'lsi_word': ' pseudo,terminal,open,listener,exist,', 'lsi_method': ' main,hoist_section,dump_section_table,push_environment,define_environment,', 'spm_method': ' ', 'text_summary': 'Create a pseudo terminal. Close the pseudo terminal. Checks that the given path is exist. Print a message with the given color.', 'files_count': 6, 'files': ['twisted_server.py', 'utils.py', 'pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'161': 'run(twisted_server.py)', '137': 'join(utils.py)', '163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '134': 'exists(utils.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 911, 'parent': 1699, 'tfidf_word': 'EP: 911, Name: main &rarr; __init__', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1698, 'parent': 1699, 'tfidf_word': 'jerry args run fail debugger coverage command check info send ', 'tfidf_method': 'DebuggerPrompt parse_arguments send_message execute parse_arguments execute check_args join run_jerry get ', 'lda_word': ' get,main,coverage,info,flash,', 'lda_method': ' fail,check_args,main,parse_arguments,flash,', 'lsi_word': ' main,parse,argument,execute,get,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,do_continue,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 7, 'files': ['ssh_device.py', 'console.py', 'coverage_client.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 11, 'function_id_to_name_file': {'228': 'check_args(ssh_device.py)', '105': 'fail(console.py)', '43': 'main(coverage_client.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 463, 'parent': 1723, 'tfidf_word': 'EP: 463, Name: run &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1722, 'parent': 1723, 'tfidf_word': 'freya exist dump define config close basename listener log environment ', 'tfidf_method': 'basename define_environment exists _listener close_pseudo_terminal open_pseudo_terminal SimpleSession requestAvatar dump_section_table hoist_section ', 'lda_word': ' environment,basename,define,push,init,', 'lda_method': ' open_pseudo_terminal,listener,main,basename,print_message,', 'lsi_word': ' environment,push,define,pseudo,terminal,', 'lsi_method': ' main,dump_section_table,hoist_section,listener,open_pseudo_terminal,', 'spm_method': ' ', 'text_summary': 'Close the pseudo terminal. Checks that the given path is exist. Print a message with the given color.', 'files_count': 6, 'files': ['twisted_server.py', 'pseudo_terminal.py', 'utils.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'163': 'requestAvatar(twisted_server.py)', '160': 'SimpleSession(twisted_server.py)', '157': 'close_pseudo_terminal(pseudo_terminal.py)', '134': 'exists(utils.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 684, 'parent': 1698, 'tfidf_word': 'EP: 684, Name: check_args &rarr; fail', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1697, 'parent': 1698, 'tfidf_word': 'prompt message join info run debugger coverage command jerry send ', 'tfidf_method': 'do_continue arguments_parse run_jerry send_message parse_arguments execute parse_arguments execute DebuggerPrompt get ', 'lda_word': ' main,argument,parse,get,execute,', 'lda_method': ' main,execute,run_jerry,arguments_parse,flash,', 'lsi_word': ' main,argument,parse,execute,get,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,do_continue,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 5, 'files': ['coverage_client.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 10, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '42': 'arguments_parse(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 462, 'parent': 1722, 'tfidf_word': 'EP: 462, Name: requestAvatar &rarr; SimpleSession', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1721, 'parent': 1722, 'tfidf_word': 'hoist freya exist dump define config close init listener environment ', 'tfidf_method': 'push_environment log basename define_environment exists _listener close_pseudo_terminal open_pseudo_terminal dump_section_table hoist_section ', 'lda_word': ' freya,init,config,basename,environment,', 'lda_method': ' log,print_message,main,push_environment,open_pseudo_terminal,', 'lsi_word': ' environment,define,push,main,section,', 'lsi_method': ' main,dump_section_table,hoist_section,print_message,log,', 'spm_method': ' ', 'text_summary': 'Print a message with the given color. Checks that the given path is exist. Define environment.', 'files_count': 5, 'files': ['pseudo_terminal.py', 'utils.py', 'lumpy.py', 'builtins.py', 'console.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'157': 'close_pseudo_terminal(pseudo_terminal.py)', '134': 'exists(utils.py)', '158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 910, 'parent': 1697, 'tfidf_word': 'EP: 910, Name: main &rarr; arguments_parse', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1696, 'parent': 1697, 'tfidf_word': 'prompt message join info run debugger coverage command jerry send ', 'tfidf_method': 'get_continue do_continue run_jerry send_message parse_arguments execute parse_arguments execute DebuggerPrompt get ', 'lda_word': ' flash,get,main,parse,execute,', 'lda_method': ' send_message,send_command,get_continue,main,parse_arguments,', 'lsi_word': ' main,get,send,continue,parse,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,do_continue,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 5, 'files': ['coverage_client.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 9, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '53': 'get_coverage_info(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 461, 'parent': 1721, 'tfidf_word': 'EP: 461, Name: close_pseudo_terminal &rarr; exists', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1720, 'parent': 1721, 'tfidf_word': 'log init hoist freya dump define config listener terminal environment ', 'tfidf_method': 'init_freya_config print_message push_environment log basename define_environment _listener open_pseudo_terminal dump_section_table hoist_section ', 'lda_word': ' basename,config,init,freya,print,', 'lda_method': ' log,print_message,dump_section_table,main,basename,', 'lsi_word': ' environment,define,push,section,main,', 'lsi_method': ' main,hoist_section,dump_section_table,push_environment,define_environment,', 'spm_method': ' ', 'text_summary': 'Define the environment variables globally, not just for a process. Define environment.', 'files_count': 5, 'files': ['pseudo_terminal.py', 'lumpy.py', 'builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)', '100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 897, 'parent': 1696, 'tfidf_word': 'EP: 897, Name: main &rarr; get_coverage_info', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1695, 'parent': 1696, 'tfidf_word': 'get parse command debugger jerry join message prompt run send ', 'tfidf_method': 'execute parse_arguments run_jerry DebuggerPrompt main do_continue get_continue send_command send_message get ', 'lda_word': ' main,flash,execute,get,parse,', 'lda_method': ' main,execute,run_jerry,parse_arguments,join,', 'lsi_word': ' main,send,continue,parse,argument,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,debuggerprompt,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments. Execute the given test.', 'files_count': 5, 'files': ['coverage_client.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 8, 'function_id_to_name_file': {'43': 'main(coverage_client.py)', '37': 'DebuggerPrompt(coverage_client.py)', '45': 'do_continue(coverage_client.py)', '52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 1713, 'parent': 1720, 'tfidf_word': 'main section dump hoist listener open pseudo table terminal ', 'tfidf_method': 'main _listener open_pseudo_terminal dump_section_table hoist_section ', 'lda_word': ' section,main,hoist,open,terminal,', 'lda_method': ' main,open_pseudo_terminal,hoist_section,listener,dump_section_table,', 'lsi_word': ' main,section,table,dump,hoist,', 'lsi_method': ' main,dump_section_table,hoist_section,open_pseudo_terminal,listener,', 'spm_method': ' ', 'text_summary': '', 'files_count': 2, 'files': ['pseudo_terminal.py', 'lumpy.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'158': 'open_pseudo_terminal(pseudo_terminal.py)', '156': '_listener(pseudo_terminal.py)', '88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)'}}, {'key': 1719, 'parent': 1720, 'tfidf_word': 'basename config define freya init log message print push environment ', 'tfidf_method': 'init_freya_config print_message push_environment log basename define_environment ', 'lda_word': ' environment,print,message,freya,basename,', 'lda_method': ' init_freya_config,basename,push_environment,log,define_environment,', 'lsi_word': ' environment,define,push,basename,print,', 'lsi_method': ' print_message,log,define_environment,push_environment,basename,', 'spm_method': ' ', 'text_summary': 'Print a message with the given color. Print a message to the screen.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'100': 'init_freya_config(builtins.py)', '124': 'basename(utils.py)', '103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 896, 'parent': 1695, 'tfidf_word': 'EP: 896, Name: main &rarr; DebuggerPrompt &rarr; do_continue', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1694, 'parent': 1695, 'tfidf_word': 'flash get parse command continue jerry join message run send ', 'tfidf_method': 'join execute parse_arguments execute parse_arguments run_jerry get_continue send_command send_message get ', 'lda_word': ' flash,execute,get,main,parse,', 'lda_method': ' main,flash,parse_arguments,execute,get,', 'lsi_word': ' send,get,message,continue,command,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,get_continue,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['coverage_client.py', 'flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 7, 'function_id_to_name_file': {'52': 'get_continue(coverage_client.py)', '58': 'send_command(coverage_client.py)', '59': 'send_message(coverage_client.py)', '169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 460, 'parent': 1713, 'tfidf_word': 'EP: 460, Name: open_pseudo_terminal &rarr; _listener', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1712, 'parent': 1713, 'tfidf_word': 'main section dump hoist table ', 'tfidf_method': 'main dump_section_table hoist_section ', 'lda_word': ' main,section,hoist,dump,table,', 'lda_method': ' main,hoist_section,dump_section_table,', 'lsi_word': ' section,main,dump,table,hoist,', 'lsi_method': ' main,dump_section_table,hoist_section,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['lumpy.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'88': 'main(lumpy.py)', '86': 'hoist_section(lumpy.py)', '84': 'dump_section_table(lumpy.py)'}}, {'key': 372, 'parent': 1719, 'tfidf_word': 'EP: 372, Name: init_freya_config &rarr; basename', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1718, 'parent': 1719, 'tfidf_word': 'define log message print push environment ', 'tfidf_method': 'print_message push_environment log define_environment ', 'lda_word': ' push,define,environment,print,message,', 'lda_method': ' push_environment,print_message,log,define_environment,', 'lsi_word': ' environment,define,push,print,log,', 'lsi_method': ' push_environment,define_environment,log,print_message,', 'spm_method': ' ', 'text_summary': 'Define the environment variables globally, not just for a process.', 'files_count': 3, 'files': ['builtins.py', 'utils.py', 'console.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'103': 'push_environment(builtins.py)', '127': 'define_environment(utils.py)', '102': 'print_message(builtins.py)', '107': 'log(console.py)'}}, {'key': 889, 'parent': 1694, 'tfidf_word': 'EP: 889, Name: get_continue &rarr; send_command &rarr; send_message', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1693, 'parent': 1694, 'tfidf_word': 'main argument execute flash parse get jerry join run ', 'tfidf_method': 'flash main main join execute parse_arguments execute parse_arguments run_jerry get ', 'lda_word': ' execute,main,run,jerry,flash,', 'lda_method': ' flash,get,main,parse_arguments,execute,', 'lsi_word': ' main,argument,parse,execute,jerry,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,join,', 'spm_method': ' ', 'text_summary': '', 'files_count': 5, 'files': ['flasher.py', 'coverage_client.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 6, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '64': 'get(coverage_client.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 446, 'parent': 1712, 'tfidf_word': 'EP: 446, Name: main &rarr; hoist_section', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 459, 'parent': 1712, 'tfidf_word': 'EP: 459, Name: main &rarr; dump_section_table', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 358, 'parent': 1718, 'tfidf_word': 'EP: 358, Name: push_environment &rarr; define_environment', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 359, 'parent': 1718, 'tfidf_word': 'EP: 359, Name: print_message &rarr; log', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 888, 'parent': 1693, 'tfidf_word': 'EP: 888, Name: flash &rarr; get', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1692, 'parent': 1693, 'tfidf_word': 'main argument execute parse flash jerry join run ', 'tfidf_method': 'main main join flash execute parse_arguments execute parse_arguments run_jerry ', 'lda_word': ' main,execute,argument,parse,join,', 'lda_method': ' join,flash,main,parse_arguments,execute,', 'lsi_word': ' main,argument,parse,execute,run,', 'lsi_method': ' main,execute,parse_arguments,run_jerry,join,', 'spm_method': ' ', 'text_summary': '', 'files_count': 4, 'files': ['flasher.py', 'utils.py', 'simpletester.py', 'tester.py'], 'execution_path_count': 5, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)', '258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 1690, 'parent': 1692, 'tfidf_word': 'main argument execute flash join parse ', 'tfidf_method': 'main join flash execute parse_arguments ', 'lda_word': ' main,join,flash,parse,execute,', 'lda_method': ' main,parse_arguments,execute,flash,join,', 'lsi_word': ' main,parse,argument,execute,join,', 'lsi_method': ' main,execute,parse_arguments,flash,join,', 'spm_method': ' ', 'text_summary': 'Parse the given arguments.', 'files_count': 3, 'files': ['flasher.py', 'utils.py', 'simpletester.py'], 'execution_path_count': 3, 'function_id_to_name_file': {'169': 'flash(flasher.py)', '137': 'join(utils.py)', '252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)'}}, {'key': 1691, 'parent': 1692, 'tfidf_word': 'main argument execute jerry parse run ', 'tfidf_method': 'main execute parse_arguments run_jerry ', 'lda_word': ' main,argument,parse,execute,run,', 'lda_method': ' main,parse_arguments,execute,run_jerry,', 'lsi_word': ' main,execute,run,jerry,argument,', 'lsi_method': ' main,execute,run_jerry,parse_arguments,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['tester.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'258': 'main(tester.py)', '262': 'run_jerry(tester.py)', '255': 'execute(tester.py)', '259': 'parse_arguments(tester.py)'}}, {'key': 746, 'parent': 1690, 'tfidf_word': 'EP: 746, Name: flash &rarr; join', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 1689, 'parent': 1690, 'tfidf_word': 'main argument execute parse ', 'tfidf_method': 'main execute parse_arguments ', 'lda_word': ' main,execute,parse,argument,', 'lda_method': ' main,execute,parse_arguments,', 'lsi_word': ' main,argument,parse,execute,', 'lsi_method': ' main,execute,parse_arguments,', 'spm_method': ' ', 'text_summary': '', 'files_count': 1, 'files': ['simpletester.py'], 'execution_path_count': 2, 'function_id_to_name_file': {'252': 'main(simpletester.py)', '251': 'execute(simpletester.py)', '253': 'parse_arguments(simpletester.py)'}}, {'key': 742, 'parent': 1691, 'tfidf_word': 'EP: 742, Name: main &rarr; run_jerry &rarr; execute', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 743, 'parent': 1691, 'tfidf_word': 'EP: 743, Name: main &rarr; parse_arguments', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 744, 'parent': 1689, 'tfidf_word': 'EP: 744, Name: main &rarr; execute', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}, {'key': 745, 'parent': 1689, 'tfidf_word': 'EP: 745, Name: main &rarr; parse_arguments', 'tfidf_method': '', 'lda_word': '', 'lda_method': '', 'lsi_word': '', 'lsi_method': '', 'spm_method': '', 'text_summary': 'hello summary', 'files': [], 'files_count': 0, 'execution_path_count': 0, 'function_id_to_name_file': []}]
